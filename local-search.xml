<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>rust实现selenium</title>
    <link href="/2025/07/21/R8BYJ4.html"/>
    <url>/2025/07/21/R8BYJ4.html</url>
    
    <content type="html"><![CDATA[<p>selenium是基于webdriver协议的自动化测试工具，当然也能用来做爬。</p><span id="more"></span><p><a href="https://github.com/SeleniumHQ/selenium">selenium</a>有很多语言版本，但是没有rust版本的，仓库里的是一个rust实现的浏览器和driver下载器。</p><p>目前<a href="https://crates.io/search?q=selenium">crates.io</a>上的三方实现很久没有更新了，而且缺乏功能，所以选择自己实现。</p><h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><p>selenium原理并不稀奇，主要是借助一个driver操作浏览器。selenium使用http和driver通信。所以实际上最核心的功能都在由浏览器厂商实现的driver里，说selenium只是个壳子也不为过。</p><p>采用的协议是<a href="https://www.w3.org/TR/webdriver1/">webdriver</a></p><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p>略去driver下载相关，首先需要启动driver，开发过程都是基于firefox和geckodriver。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">geckodriver</span> --host <span class="hljs-number">127.0.0.1</span> --port <span class="hljs-number">2983</span><br></code></pre></td></tr></table></figure><p>不同的driver启动参数不同。</p><p>我将启动driver流程集成到了代码里，但是由于rust的特性，容易产生孤儿进程，前后改了很多次，依旧不能保证没问题，只能说只要能正常退出程序，不要中途panic，基本就能避免。</p><hr><p>之后是创建一个session。可以简单理解一个session就是一个单独的浏览器进程，这里有一些注意事项</p><ul><li>session不能重复创建，一个driver同时只能有一个session，也就是没法操作多个浏览器实例，只能使用多个driver</li><li>必须调用quit。只有调用了quit方法，session才会被销毁，否则除非重启dervier，不然不能再创建session</li><li>每个session都是新环境，历史记录插件等即不继承也不遗留，除非设置profile</li><li>profile会被压缩后用base64传输，所以并非是driver或者浏览器所在设备的某个路径，而是selenium程序来读取压缩的</li></ul><h2 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h2><p>除了selenium提供的元素操作方法外，最好用的还是执行js代码。</p><p>js执行环境为当前网页，实际效果就和在控制台里执行一样。</p><p>需要注意同步和异步，同步js直接return即可，异步方法则略有不同</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-variable">v</span>:<span class="hljs-type">String</span> = driver.<span class="hljs-title function_ invoke__">execute_async_script</span>(<span class="hljs-string">r#&quot; let callback = arguments[arguments.length - 1]; setTimeout(()=&gt; callback(100) ,1000);  &quot;#</span>,&amp;[]).<span class="hljs-title function_ invoke__">unwrap</span>();<br></code></pre></td></tr></table></figure><p>js里可以通过<code>arguments</code>获取传入的方法，最后一个值是回调函数，异步方法结束时调用返回执行结果</p><h2 id="突破反爬"><a href="#突破反爬" class="headerlink" title="突破反爬"></a>突破反爬</h2><p>有的网站防火墙会校验浏览器是否处于webdriver协议控制下，其原理就是此时浏览器会将<code>window.navigator.webdriver</code>设置为true。</p><hr><p>目前有两种思路避开</p><p>一是 使用chrome的debug方式连接一个已打开的窗口，而非新窗口，但是时不时会出现连不上的情况。</p><p>二是 使用低版本(小于68)的firefox，通过设置pref <code>dom.webdriver.enabled=false</code></p><p>三是 <code>options.add_experimental_option(&#39;excludeSwitches&#39;, [&#39;enable-automation&#39;])</code></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.w3.org/TR/webdriver1/">webdriver</a></li><li><a href="https://github.com/SeleniumHQ/selenium">selenium</a></li><li><a href="https://github.com/inkroom/selenium-rs">selenium-rs</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>selenium</tag>
      
      <tag>webdriver</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mobi格式解析</title>
    <link href="/2024/08/26/2V0D1S7.html"/>
    <url>/2024/08/26/2V0D1S7.html</url>
    
    <content type="html"><![CDATA[<p>mobi格式或者azw格式，是亚马逊的私有格式，由于kindle不支持epub，所以准备研究一下mobi</p><span id="more"></span><h1 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h1><p>mobi原本是mobipacket，后来被亚马逊收购，就成了私有规范，目前网上没有完整的规范文档。亚马逊在mobi的基础上加上drm也就是版权信息就成了azw格式，后续又参考epub，加入更多功能，成了azw3格式，两种格式又叫kf6和kf8</p><h1 id="基础结构"><a href="#基础结构" class="headerlink" title="基础结构"></a>基础结构</h1><p>mobi是采用<a href="https://wiki.mobileread.com/wiki/PDB">PDB</a>格式封装，这个封装的意思可以理解成数据保存方式，一般格式规范有两部分，一是包括什么数据，二是数据存储方式。例如epub、docx这些就采用zip格式作为封装格式</p><h2 id="文件头-PDBHeader"><a href="#文件头-PDBHeader" class="headerlink" title="文件头(PDBHeader)"></a>文件头(PDBHeader)</h2><p>文件开头的78个字节(byte)，是文件的一些基础元数据，包括像是文件日期，文件类型等等。这里需要注意一些关键性字段</p><h3 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h3><p>在第36、40、44(offset,下同)索引的unit32字段，这三个字段都是时间相关字段，存储的都是秒时间戳，只是起始时间不一定是1970年。具体规则如下</p><p>如果拿到时间戳数字，其最高位(bit，下同)是1，这就是个无符号unit32，代表时间从1904年开始，否则从1970年开始；在我得到的mobi格式样例来看，都是从1970年开始，1904可能是其他文件类型在使用。这里给出一个判断时间的样例代码</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">do_time_format</span>(value: <span class="hljs-type">u32</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123;<br>    <span class="hljs-keyword">if</span> value &amp; <span class="hljs-number">0x80000000</span> == <span class="hljs-number">0x80000000</span> &#123;<br>        crate::common::<span class="hljs-title function_ invoke__">do_time_display</span>((value &amp; <span class="hljs-number">0x7fffffff</span>) <span class="hljs-keyword">as</span> <span class="hljs-type">u64</span>, <span class="hljs-number">1904</span>)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        crate::common::<span class="hljs-title function_ invoke__">time_display</span>(value <span class="hljs-keyword">as</span> <span class="hljs-type">u64</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>顺便一提，在mobi格式中，有一些规则跟数据长度息息相关，如果规范里规定了是2个字节，那么一定不要使用更大的数据格式——比如int——来存储，也要小心语言可能存在的自动向上转型</p><h3 id="magic"><a href="#magic" class="headerlink" title="magic"></a>magic</h3><p>魔法值，或者魔术值，一般用来区分文件格式，绝大多数文件格式都会在文件开头几个字节里放几个固定字节，比如java里的COFFIE，jpeg的IFEF。</p><p>mobi的magic值相对较远，在第52和56索引，分为两个字段，一共八个字节，固定值为<code>BOOKMOBI</code>，虽然规范分成两个字段，实际使用时不用管这个。另外azw3和mobi使用相同的magic，所以还需要判断第34索引，mobi值为6，azw3为8，也就是KF8</p><h3 id="书本名"><a href="#书本名" class="headerlink" title="书本名"></a>书本名</h3><p>从第0索引开始32个字节代表文件名，通常也是书本名，但是问题是32个字节不一定够存下书名，二是calibre生成的mobi这里也是ascii，如果是中文书，这里就是拼音字母了，所以这32个字节建议直接抛弃，后续字节中有可阅读的书本名称</p><h2 id="record"><a href="#record" class="headerlink" title="record"></a>record</h2><p>除了存储文件元数据的文件头外，剩下的字节被切割成一个个的record，每个record的长度不一定相同，具体有多少个record，文件头中也有描述；这里只介绍已知用得上的几种record</p><h1 id="书本信息"><a href="#书本信息" class="headerlink" title="书本信息"></a>书本信息</h1><h2 id="头信息"><a href="#头信息" class="headerlink" title="头信息"></a>头信息</h2><p>在第0个record中，分成了两部分，第0到16(左闭右开)索引是文件存储方式相关信息，比如压缩方式，文本长度，record数量，本文取名<code>MOBIDOCHeader</code>。具体用处后面再行描述。</p><p>从第16索引开始，后面的就是<code>MOBIHeader</code>，存储了一些record信息，比如文字编码方式，书本名称位置，第一张图片位置等等，一共二百多个字节的头信息中，存在相当多的unknown字段，可能是为了扩展预留字段，也可能是因为私有格式，反解析的时候实在找不到用处。</p><h2 id="书本名-1"><a href="#书本名-1" class="headerlink" title="书本名"></a>书本名</h2><p>在header的第84和88索引中记录了书本名的offset和length，注意这个offset是相对于record0的offset，不是从文件开头计算的。关于长度也有一番表述，如果只是读取的话，什么拼接0字节之类的，如果只是读取的话，不用管这些，直接定位到offset，然后读取length长度，按照编码方式解析即可</p><h2 id="元信息"><a href="#元信息" class="headerlink" title="元信息"></a>元信息</h2><p>在record0的第128索引，指代是否存在<code>EXTH</code>record，这是书本的元数据信息，就是作者、出版社这些，这是个可能存在的record，当<code>exth_flags &amp; 0x40 == 0x40</code>时才有exth</p><p>exth本身是不定长度的，除了record本身的信息外，其余的字节数又被分成一个个的小record，每个record通过<code>type</code>区分含义，比如作者、出版社、出版日期这类。根据具体情况不同，同一<code>type</code>可能有多个值。注意这里又有一份书本名。此外需要注意的就是封面图</p><h2 id="封面"><a href="#封面" class="headerlink" title="封面"></a>封面</h2><p>封面有普通封面和缩略图封面，注意二者都是可选值，不是一定有的。具体的值是offset。</p><p>注意这个offset不是字节位置，而是record索引，在我们解析文件头的时候，获取到有多少个record，以及他们的offset2，这个offset2就是相对于文件头的字节索引了。</p><p>另外在record0中还有一个字段是第一张图片的offset，当然也是record索引。</p><p>所以这里需要将两个offset相加（所有图片的操作都要加上这个第一张图片的offset），从而找到字节索引，然后直接读取相应长度(读取record offset时会有length)的字节，就是图片本身了。</p><p>注意这里是不存在图片的元数据信息的，也就是目前并不知道图片的文件名，也不知道到底有多少图片，不像epub格式会把所有的文件都列出来，想要获取所有图片，还需要读取文本信息才行</p><h2 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h2><p>文本的解析最为复杂，首先是文本被拆分到一个个的record里，每个record长度最大为4096，这个数字在文件头(MOBIDOCHeader)中也有记录，然后每个record还有特殊压缩编码，还有尾padding</p><p>一共有多少个record，在<code>MOBIDocHeader</code>中有记录，假设为 record_count，此时遍历[1, record_count]，注意，左右均为闭区间；</p><p>当拿到每个record的字节后，需要去除尾部的padding字节，具体有几个字节由以下规则确定</p><h3 id="tail-padding"><a href="#tail-padding" class="headerlink" title="tail padding"></a>tail padding</h3><p>有<code>MOBIHeader</code>中第240索引，长度4字节字段<code>flag</code>，flag虽然是4个字节，也就是unit32，但是实际使用是unit16，也就是只有<strong>低16bit</strong>有用</p><p>从低十六位的最高位开始循环，如果该位(bit)为1，则进入后续流程，注意最后一位(bit)不参与循环，伪代码如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">for</span><span class="hljs-params">(j = <span class="hljs-number">15</span>;j&gt;<span class="hljs-number">0</span>;j--)</span></span>&#123;<br>    <span class="hljs-keyword">if</span> (flag &amp; ( <span class="hljs-number">1</span> &lt;&lt; j ) &gt;=<span class="hljs-number">1</span> )&#123;<br>        <span class="hljs-comment">// do some thing</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>每次循环中，将record的最后四个字节拿出来，从倒数第四个字节开始，如果该字节<code>&amp; 0b1000_0000 &gt;= 1</code>，则重置计数，否则将低七位左移合并，伪代码如下</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">value=<span class="hljs-number">0</span><br>for(<span class="hljs-built_in">byte</span> <span class="hljs-keyword">in</span> bytes)&#123;<br>    if <span class="hljs-built_in">byte</span> &amp; <span class="hljs-number">0b1000_0000</span> &#123;<br>        value = <span class="hljs-number">0</span> <br>    &#125;<br>    value = (value &lt;&lt; <span class="hljs-number">7</span> ) | ( <span class="hljs-built_in">byte</span> &amp; <span class="hljs-number">0b111_1111</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>最终得到的value代表尾部需要去掉的长度，record去掉尾部数据后再次进行循环</p><p>结束循环后，如果 <code>flag &amp; 1 == 1</code>，则还需要去除长度，伪代码如下：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">let</span> <span class="hljs-built_in">length</span> = (data[data.<span class="hljs-built_in">length</span> - <span class="hljs-number">1</span>] &amp; <span class="hljs-number">0b11</span>)+<span class="hljs-number">1</span><br>data = data.subarr(<span class="hljs-number">0</span>, -<span class="hljs-built_in">length</span>);<br></code></pre></td></tr></table></figure><h3 id="uncompress"><a href="#uncompress" class="headerlink" title="uncompress"></a>uncompress</h3><p>解压缩，这里根据<code>MOBIDOCHeader</code>中关于压缩信息的字段值不同，有三种方案，一是不压缩，也就不解压，二是<code>PalmDOC compression(LZ77)</code>，三是<code>HUFF/CDIC compression</code>，因为我手头只有第二种的样本，暂时就只解析<a href="https://wiki.mobileread.com/wiki/LZ77">第二种</a></p><p><a href="https://wiki.mobileread.com/wiki/LZ77">LZ77</a>是为了减小体积。</p><p>遍历record的每一个字节，</p><ul><li>如果 byte = 0, copy it</li><li>如果 byte &lt;=8，copy从下一个字节开始共计byte个字节，同时迭代往前byte个长度</li><li>如果 byte &lt;= 0b111_1111，copy it</li><li>如果 byte &lt;= 0b1011_1111，将当前字节和下一个字节连起来，右移三位后取低11位(distance)；取下一个字节低三位后加3(length)，循环length次，每次将当前结果的倒数第distance个字节再添加到结果里，注意这里结果的长度在变，所以每次循环添加的不一定是同一个值</li><li>都不符合，添加一个32，再添加 <code>byte ^ 0b1000_0000</code></li></ul><p>最终拿到的结果即每个record的值，再把每个record相连，按照指定编码解码，即可拿到文本信息</p><h3 id="html"><a href="#html" class="headerlink" title="html"></a>html</h3><p>解析之后的文本信息是一个相对标准html文档，只有一个head和body。</p><h3 id="章节分页"><a href="#章节分页" class="headerlink" title="章节分页"></a>章节分页</h3><p>body中包含<code>&lt;mbp:pagebreak/&gt;</code>，代表一个章节的结束，其中第0个章节可能是目录导航，其他都是普通的html片段。</p><p>将文本分节，每节包括文本，开始字节数(start)，结束字节数(end)，这里的字节数是相对于<strong>文本</strong>开头，不是文件开头</p><p>分节的时候要注意，因为后续使用的都是字节数，而utf8一个字符使用的字节数是不固定的，所以不能在编解码后做分节，必须使用解压缩完之后的数据，这就成了一个基本的子串查找，可以上力扣刷题了</p><hr><p>head中会有特殊标签<code>guide#reference</code>指向toc目录，样例如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">guide</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">reference</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;toc&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Table of Contents&quot;</span> <span class="hljs-attr">filepos</span>=<span class="hljs-string">0002387139</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">guide</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用filepos在章节中查找，end值大于filepos的即为对应章节，就我手头的样本，导航会被放到最后一个章节里，这个章节的意思实际是给阅读器使用的，格式固定，样本里甚至还给了宽高都是0，避免被阅读器渲染出来被读者看到，开头第0个章节那个是书籍自定义的导航，用来给读者看的，样式规范多样化，阅读器无法识别，在epub格式中也有类似的设计。</p><p>这里给一个样例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mbp:pagebreak</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;1em&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;0pt&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;7&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>Table of Contents<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;1em&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;-19pt&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">filepos</span>=<span class="hljs-string">0000005452</span>&gt;</span>第一卷<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">blockquote</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;0pt&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;0pt&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">filepos</span>=<span class="hljs-string">0000005452</span>&gt;</span>插图<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">blockquote</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">blockquote</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;0pt&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;0pt&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">filepos</span>=<span class="hljs-string">0000007756</span>&gt;</span>第一章<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">blockquote</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">blockquote</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;0pt&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;0pt&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">filepos</span>=<span class="hljs-string">0000052866</span>&gt;</span>第二章<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">blockquote</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mbp:pagebreak</span>/&gt;</span><br></code></pre></td></tr></table></figure><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>每一个img标签都会被赋予一个<code>recindex</code>属性，代表的是record从1开始的索引，同时务必加上第一张图片的offset。</p><p>如果有字体等资源文件，也是相同的方案，只是读取到的值处理不一样，因为我手头没有这种样本，暂时不做研究</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>前文提到，文本章节中有目录导航，此外，当<code>MOBIHeader</code>中的第244索引值不等于<code>0xffffffff</code>，mobi存在INDX类型record，这里的解析方式较为复杂，而且缺失了目录层级信息，不建议使用该处数据，所以暂时先不解析了。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://wiki.mobileread.com/wiki/MOBI">mobi</a></li><li><a href="https://github.com/johnfactotum/foliate-js/blob/9ff893f3e73eadfcfd64db080ff486b8a55c9a81/mobi.js">foliate-js</a></li><li><a href="https://github.com/inkroom/iepub">iepub</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>rust</tag>
      
      <tag>mobi</tag>
      
      <tag>电子书</tag>
      
      <tag>kindle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手动计算时间戳转日期</title>
    <link href="/2024/08/06/3DR7BNH.html"/>
    <url>/2024/08/06/3DR7BNH.html</url>
    
    <content type="html"><![CDATA[<p>rust标准库没有时间戳转日期的方法，为了区区一个功能引入三方库又觉得划不来，于是准备自己实现</p><span id="more"></span><p>以前看到过转换时间戳的方法，但是这回网上找了半天都没找到想要的代码，全是各种语言调标准库或者三方库的，找来找去只有<a href="https://zhuanlan.zhihu.com/p/329686937">这个</a>，但是评论区又说有bug，我看过代码好像闰年部分有点问题</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>首先时间戳定义是1970年1月1日到指定时间的秒数，正数往后，负数往前，这里不需要考虑负数，一般采用32位存储，所以最多只能存储到2038年，又叫千年虫问题</p><p>时间戳计算的难度就在闰年，闰年导致每年的秒数不一致，从而不便于定位到年。顺便一提，除了闰年还有闰秒，每隔不确定的时间，将现在时间进行减一秒或者加一秒操作，闰秒也会导致一些大公司的系统出现bug，而且闰秒是国际协会根据地球运动情况确定的，不像闰年这样规律，所以不太好弄，不过时间戳里没有闰秒概念</p><p>为了确定过去到底有多少秒，最简单的办法就是把1970年到2038年每一年的秒数都累加出来，看时间戳小于哪一年，这个时间戳就是上一年的，再减去过去经过的秒数，剩下的就是在今年的秒数，确定日期和时间就很简单了。我看jdk里似乎就是这样干的，代码里把每一年的都硬编码了</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">//</span><br><span class="hljs-comment">// 判断是否是闰年</span><br><span class="hljs-comment">//</span><br><span class="hljs-meta">#[inline]</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">is_leap</span>(year: <span class="hljs-type">u64</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">bool</span> &#123;<br>    <span class="hljs-keyword">return</span> year % <span class="hljs-number">4</span> == <span class="hljs-number">0</span> &amp;&amp; ((year % <span class="hljs-number">100</span>) != <span class="hljs-number">0</span> || year % <span class="hljs-number">400</span> == <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">do_time_format</span>(value: <span class="hljs-type">u64</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123;<br>    <span class="hljs-comment">// 获取当前时间戳</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">time</span> = value;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">per_year_sec</span> = <span class="hljs-number">365</span> * <span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span>; <span class="hljs-comment">// 平年的秒数</span><br><br>    <span class="hljs-comment">// 平年的月份天数</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">day_of_year</span>: [<span class="hljs-type">u64</span>; <span class="hljs-number">12</span>] = [<span class="hljs-number">31</span>, <span class="hljs-number">28</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>];<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">all_sec</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 直接算到 2038年，把每一年的秒数加起来看哪年合适</span><br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">year</span> <span class="hljs-keyword">in</span> <span class="hljs-number">1970</span>..<span class="hljs-number">2038</span> &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">is_leap</span> = <span class="hljs-title function_ invoke__">is_leap</span>(year);<br><br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">before_sec</span> = all_sec;<br>        all_sec += per_year_sec;<br>        <span class="hljs-keyword">if</span> is_leap &#123;<br>            all_sec += <span class="hljs-number">86400</span>;<br>        &#125;<br>        <span class="hljs-comment">// println!(&quot;all=&#123;all_sec&#125; before_sec=&#123;before_sec&#125; year=&#123;year&#125;&quot;);</span><br>        <span class="hljs-comment">// 具体是哪一年应该是 当 小于这一年的秒数</span><br>        <span class="hljs-keyword">if</span> time &lt; all_sec &#123;<br>            <span class="hljs-comment">// 减去到上一年年底的秒数 剩下的才是这一年内的秒数</span><br>            time = value - before_sec;<br>            <span class="hljs-comment">// 找到了 计算日期</span><br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">sec</span> = time % <span class="hljs-number">60</span>;<br>            time /= <span class="hljs-number">60</span>;<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">min</span> = time % <span class="hljs-number">60</span>;<br>            time /= <span class="hljs-number">60</span>;<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">hour</span> = time % <span class="hljs-number">24</span>;<br>            time /= <span class="hljs-number">24</span>;<br><br>            <span class="hljs-comment">// 计算是哪天，因为每个月不一样多，所以需要修改</span><br>            <span class="hljs-keyword">if</span> is_leap &#123;<br>                day_of_year[<span class="hljs-number">1</span>] += <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">month</span> = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (index, ele) <span class="hljs-keyword">in</span> day_of_year.<span class="hljs-title function_ invoke__">iter</span>().<span class="hljs-title function_ invoke__">enumerate</span>() &#123;<br>                <span class="hljs-keyword">if</span> &amp;time &lt; ele &#123;<br>                    month = index + <span class="hljs-number">1</span>;<br>                    time += <span class="hljs-number">1</span>; <span class="hljs-comment">// 日期必须加一，否则 每年的 第 1 秒就成了第0天了</span><br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                time -= ele;<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">format!</span>(<br>                <span class="hljs-string">&quot;&#123;:04&#125;-&#123;:02&#125;-&#123;:02&#125;T&#123;:02&#125;:&#123;:02&#125;:&#123;:02&#125;Z&quot;</span>,<br>                year, month, time, hour, min, sec<br>            );<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">new</span>()<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h2><p>再思索下上面的程序，可以发现一个问题，那就是即使使用了64位存储，千年虫问题依然存在，因为只计算到了2038年</p><p>那怎么去掉这个上限呢？</p><p>因为闰年的存在，没法简单的直接确定年份，但是如果假设只有平年，那么年份就可以做个除法获得，这个粗略值只会比精确值更晚，比如粗略值可能是1988-01-01，因为中间有闰年，所以实际年份应该是1987，而且不会出现往前走两年的情况，因为这样需要中间有365个闰年，但是粗略值本身就是除以365的结果，这里我也不知道该怎样描述更清晰明了一点。</p><p>总之现在有个年份的粗略值，以及剩余的在年内的秒数，只需要循环判断一下1970到粗略值有多少个闰年，再用时间戳减去按平年计算的秒数和多出来的闰年的秒数，不直接用剩余秒数去减主要是考虑两种情况</p><p>一是中间没有闰年的情况，比如1971年；二是时间戳除以平年刚好能整除，剩余秒数就是0。</p><h2 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">do_time_format2</span>(value: <span class="hljs-type">u64</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123;<br>    <span class="hljs-comment">// 先粗略定位到哪一年</span><br>    <span class="hljs-comment">// 以 365 来计算，年通常只会相比正确值更晚，剩下的秒数也就更多，并且有可能出现需要往前一年的情况</span><br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">per_year_sec</span> = <span class="hljs-number">365</span> * <span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span>; <span class="hljs-comment">// 平年的秒数</span><br><br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">year</span> = value / per_year_sec;<br>    <span class="hljs-comment">// if year * per_year_sec == value &#123;</span><br>    <span class="hljs-comment">//     // 刚好是个整数倍</span><br>    <span class="hljs-comment">//     year -= 1;</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-comment">// 剩下的秒数，如果这些秒数 不够填补闰年，比如粗略计算是 2024年，还有 86300秒，不足一天，那么中间有很多闰年，所以 年应该-1，只有-1，因为-2甚至更多 需要 last_sec &gt; 365 * 86400，然而这是不可能的</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">last_sec</span> = value - (year) * per_year_sec;<br>    year += <span class="hljs-number">1970</span>;<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">leap_year_sec</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 计算中间有多少闰年，当前年是否是闰年不影响回退，只会影响后续具体月份计算</span><br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">y</span> <span class="hljs-keyword">in</span> <span class="hljs-number">1970</span>..year  &#123;<br>        <span class="hljs-keyword">if</span> <span class="hljs-title function_ invoke__">is_leap</span>(y) &#123;<br>            <span class="hljs-comment">// 出现了闰年</span><br>            leap_year_sec += <span class="hljs-number">86400</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> last_sec &lt; leap_year_sec &#123;<br>        <span class="hljs-comment">// 不够填补闰年，年份应该-1</span><br>        year -= <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">// 上一年是闰年，所以需要补一天</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-title function_ invoke__">is_leap</span>(year) &#123;<br>            leap_year_sec -= <span class="hljs-number">86400</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 剩下的秒数</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">time</span> = value - leap_year_sec - (year - <span class="hljs-number">1970</span>) * per_year_sec;<br><br>    <span class="hljs-comment">// 平年的月份天数</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">day_of_year</span>: [<span class="hljs-type">u64</span>; <span class="hljs-number">12</span>] = [<span class="hljs-number">31</span>, <span class="hljs-number">28</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>];<br><br>    <span class="hljs-comment">// 找到了 计算日期</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">sec</span> = time % <span class="hljs-number">60</span>;<br>    time /= <span class="hljs-number">60</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">min</span> = time % <span class="hljs-number">60</span>;<br>    time /= <span class="hljs-number">60</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">hour</span> = time % <span class="hljs-number">24</span>;<br>    time /= <span class="hljs-number">24</span>;<br><br>    <span class="hljs-comment">// 计算是哪天，因为每个月不一样多，所以需要修改</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-title function_ invoke__">is_leap</span>(year) &#123;<br>        day_of_year[<span class="hljs-number">1</span>] += <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">month</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (index, ele) <span class="hljs-keyword">in</span> day_of_year.<span class="hljs-title function_ invoke__">iter</span>().<span class="hljs-title function_ invoke__">enumerate</span>() &#123;<br>        <span class="hljs-keyword">if</span> &amp;time &lt; ele &#123;<br>            month = index + <span class="hljs-number">1</span>;<br>            time += <span class="hljs-number">1</span>; <span class="hljs-comment">// 日期必须加一，否则 每年的 第 1 秒就成了第0天了</span><br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        time -= ele;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">format!</span>(<br>        <span class="hljs-string">&quot;&#123;:04&#125;-&#123;:02&#125;-&#123;:02&#125;T&#123;:02&#125;:&#123;:02&#125;:&#123;:02&#125;Z&quot;</span>,<br>        year, month, time, hour, min, sec<br>    );<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>我用java直接生成2038为止每一天，随机时间的时间戳数据，共计两万多天。用了<code>assert_eq!</code>宏来做断言，然后编译总是出错，还没有错误原因，只有一个kill 9。最后把宏换成了方法调用就可以了，怀疑就是太多宏影响了编译，毕竟两万多个宏。</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>rust</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot自定义json参数解析注入</title>
    <link href="/2024/05/14/K4Q2PZ.html"/>
    <url>/2024/05/14/K4Q2PZ.html</url>
    
    <content type="html"><![CDATA[<p>自定义请求参数注入逻辑，允许将json解析到多个参数</p><span id="more"></span><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>SpringBoot中接收json参数一般使用<code>@RequestBody</code>注解，基本样式如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result&lt;String&gt; <span class="hljs-title function_">batchAdd</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> List&lt;Product&gt; data)</span> <br></code></pre></td></tr></table></figure><p>但是这样有个问题，那就是 <code>@RequestBody</code> 只能出现一次，也就是所有json参数必须封装到一个bean里，大多数情况下这都不是什么问题，但是如果接口很多，每个接口参数都不同的话，就会有很多个类，外带我个人不怎么喜欢使用单个类来接收参数，我更习惯使用多个参数，这样接口需要的参数更加明确</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>Spring中实现参数注入使用的是<code>org.springframework.web.method.support.HandlerMethodArgumentResolver</code>类，只需要实现该类即可</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>最早我找了一篇博客，地址找不到了，总之内容是使用fastjson手动获取内容并转换类型，较为繁琐，而且对于容器类参数没有兼容，所以我参照 <code>org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodArgumentResolver#readWithMessageConverters</code>的逻辑重写了一份。</p><p>另外我还兼容了 query 传参，参数不再仅限于http body里的json格式，k=v形式一样能获取</p><p>代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> cn.hutool.core.io.IoUtil;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> org.springframework.core.MethodParameter;<br><span class="hljs-keyword">import</span> org.springframework.core.convert.ConversionService;<br><span class="hljs-keyword">import</span> org.springframework.core.convert.TypeDescriptor;<br><span class="hljs-keyword">import</span> org.springframework.http.HttpHeaders;<br><span class="hljs-keyword">import</span> org.springframework.http.HttpInputMessage;<br><span class="hljs-keyword">import</span> org.springframework.http.MediaType;<br><span class="hljs-keyword">import</span> org.springframework.http.converter.GenericHttpMessageConverter;<br><span class="hljs-keyword">import</span> org.springframework.http.converter.HttpMessageConverter;<br><span class="hljs-keyword">import</span> org.springframework.http.server.ServletServerHttpRequest;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.util.Assert;<br><span class="hljs-keyword">import</span> org.springframework.util.StringUtils;<br><span class="hljs-keyword">import</span> org.springframework.validation.DataBinder;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.support.WebDataBinderFactory;<br><span class="hljs-keyword">import</span> org.springframework.web.context.request.NativeWebRequest;<br><span class="hljs-keyword">import</span> org.springframework.web.method.support.HandlerMethodArgumentResolver;<br><span class="hljs-keyword">import</span> org.springframework.web.method.support.ModelAndViewContainer;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Type;<br><span class="hljs-keyword">import</span> java.nio.charset.StandardCharsets;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 参数解析器，支持将json body注入到不同参数中，同时支持普通的form、query传参</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 明明如月</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2018/08/27</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MultiRequestBodyArgumentResolver</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerMethodArgumentResolver</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">JSONBODY_ATTRIBUTE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;JSON_REQUEST_BODY&quot;</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> List&lt;HttpMessageConverter&lt;?&gt;&gt; messageConverters;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MultiRequestBodyArgumentResolver</span><span class="hljs-params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; messageConverters)</span> &#123;<br>        <span class="hljs-built_in">this</span>.messageConverters = messageConverters;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置支持的方法参数类型</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> parameter 方法参数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 支持的类型</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">supportsParameter</span><span class="hljs-params">(MethodParameter parameter)</span> &#123;<br>        <span class="hljs-comment">// 支持带@MultiRequestBody注解的参数</span><br>        <span class="hljs-keyword">return</span> parameter.hasParameterAnnotation(MultiRequestBody.class);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Type <span class="hljs-title function_">getHttpEntityType</span><span class="hljs-params">(MethodParameter parameter)</span> &#123;<br>        <span class="hljs-keyword">return</span> parameter.nestedIfOptional().getNestedGenericParameterType();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 驼峰转下划线</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> input</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">humpToUnderline</span><span class="hljs-params">(String input)</span> &#123;<br>        <span class="hljs-keyword">if</span> (input == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>; <span class="hljs-comment">// garbage in, garbage out</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> input.length();<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(length * <span class="hljs-number">2</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">resultLength</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">wasPrevTranslated</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>            <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> input.charAt(i);<br>            <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span> || c != <span class="hljs-string">&#x27;_&#x27;</span>) <span class="hljs-comment">// skip first starting underscore</span><br>            &#123;<br>                <span class="hljs-keyword">if</span> (Character.isUpperCase(c)) &#123;<br>                    <span class="hljs-keyword">if</span> (!wasPrevTranslated &amp;&amp; resultLength &gt; <span class="hljs-number">0</span> &amp;&amp; result.charAt(resultLength - <span class="hljs-number">1</span>) != <span class="hljs-string">&#x27;_&#x27;</span>) &#123;<br>                        result.append(<span class="hljs-string">&#x27;_&#x27;</span>);<br>                        resultLength++;<br>                    &#125;<br>                    c = Character.toLowerCase(c);<br>                    wasPrevTranslated = <span class="hljs-literal">true</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    wasPrevTranslated = <span class="hljs-literal">false</span>;<br>                &#125;<br>                result.append(c);<br>                resultLength++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> resultLength &gt; <span class="hljs-number">0</span> ? result.toString() : input;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">getParameterName</span><span class="hljs-params">(MethodParameter parameter, MultiRequestBody parameterAnnotation)</span> &#123;<br>        <span class="hljs-comment">//注解的value是JSON的key</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> parameterAnnotation.value();<br>        <span class="hljs-comment">// 如果@MultiRequestBody注解没有设置value，则取参数名FrameworkServlet作为json解析的key</span><br>        <span class="hljs-keyword">if</span> (!StringUtils.hasText(key)) &#123;<br>            <span class="hljs-comment">// 注解为设置value则用参数名当做json的key</span><br>            key = parameter.getParameterName();<br>            <span class="hljs-comment">// 由于整体使用下划线法，所以参数名也要转换</span><br>            key = humpToUnderline(key);<br>        &#125;<br>        <span class="hljs-keyword">return</span> key;<br>    &#125;<br><br>    <span class="hljs-meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; Object <span class="hljs-title function_">doResolveArgument</span><span class="hljs-params">(MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest webRequest, WebDataBinderFactory binderFactory)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">servletRequest</span> <span class="hljs-operator">=</span> webRequest.getNativeRequest(HttpServletRequest.class);<br>        Assert.state(servletRequest != <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;No HttpServletRequest&quot;</span>);<br>        <span class="hljs-type">ServletServerHttpRequest</span> <span class="hljs-variable">inputMessage</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletServerHttpRequest</span>(servletRequest);<br>        <span class="hljs-type">MediaType</span> <span class="hljs-variable">contentType</span> <span class="hljs-operator">=</span> inputMessage.getHeaders().getContentType();<br><br>        <span class="hljs-type">MultiRequestBody</span> <span class="hljs-variable">parameterAnnotation</span> <span class="hljs-operator">=</span> parameter.getParameterAnnotation(MultiRequestBody.class);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> getParameterName(parameter, parameterAnnotation);<br><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span> (contentType.toString().contains(<span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>) || contentType.toString().contains(<span class="hljs-string">&quot;multipart&quot;</span>)) &#123;<br>            body = getFromQuery(key, mavContainer, servletRequest, binderFactory, parameter, webRequest);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">Type</span> <span class="hljs-variable">targetType</span> <span class="hljs-operator">=</span> getHttpEntityType(parameter);<br>            Class&lt;T&gt; targetClass = (targetType <span class="hljs-keyword">instanceof</span> Class clazz ? clazz : <span class="hljs-literal">null</span>);<br>            Class&lt;?&gt; contextClass = parameter.getContainingClass();<br><br>            <span class="hljs-type">StringHttpInputMessage</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>            <span class="hljs-type">String</span> <span class="hljs-variable">jsonBody</span> <span class="hljs-operator">=</span> getRequestBody(webRequest);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">v</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">if</span> (jsonBody.startsWith(<span class="hljs-string">&quot;[&quot;</span>) &amp;&amp; jsonBody.endsWith(<span class="hljs-string">&quot;]&quot;</span>)) &#123;<br>                <span class="hljs-comment">// 此时为一个 array，因此不支持 key，只能整个传入</span><br>                v = jsonBody;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;&quot;</span>.equals(jsonBody)) &#123;<br>                v = <span class="hljs-literal">null</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> JSON.parseObject(jsonBody);<br>                <span class="hljs-keyword">if</span> (jsonObject == <span class="hljs-literal">null</span>) &#123;<br>                    v = <span class="hljs-literal">null</span>;<br>                &#125; <span class="hljs-keyword">else</span><br>                    <span class="hljs-comment">// 注明了 key 的取特定json值，否则使用整个json字符串</span><br>                    v = <span class="hljs-string">&quot;&quot;</span>.equals(key) ? jsonBody : jsonObject.get(key).toString();<br>            &#125;<br>            <span class="hljs-keyword">if</span> (v != <span class="hljs-literal">null</span>) &#123;<br>                message = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringHttpInputMessage</span>(inputMessage.getHeaders(), v);<br>                body = convertValue(targetClass, targetType, contextClass, contentType, message);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (body == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (parameterAnnotation.required())<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;require &quot;</span> + key);<br><br>        &#125;<br>        <span class="hljs-keyword">return</span> body;<br>    &#125;<br><br>    <span class="hljs-meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; Object <span class="hljs-title function_">convertValue</span><span class="hljs-params">(Class&lt;T&gt; targetClass, Type targetType, Class&lt;?&gt; contextClass, MediaType contentType, StringHttpInputMessage msgToUse)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">for</span> (HttpMessageConverter&lt;?&gt; converter : <span class="hljs-built_in">this</span>.messageConverters) &#123;<br>            GenericHttpMessageConverter&lt;?&gt; genericConverter =<br>                    (converter <span class="hljs-keyword">instanceof</span> GenericHttpMessageConverter ghmc ? ghmc : <span class="hljs-literal">null</span>);<br>            <span class="hljs-keyword">if</span> (genericConverter != <span class="hljs-literal">null</span> ? genericConverter.canRead(targetType, contextClass, contentType) :<br>                    (targetClass != <span class="hljs-literal">null</span> &amp;&amp; converter.canRead(targetClass, contentType))) &#123;<br>                <span class="hljs-keyword">if</span> (msgToUse.hasBody()) &#123;<br>                    body = (genericConverter != <span class="hljs-literal">null</span> ? genericConverter.read(targetType, contextClass, msgToUse) :<br>                            ((HttpMessageConverter&lt;T&gt;) converter).read(targetClass, msgToUse));<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> body;<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">resolveArgument</span><span class="hljs-params">(MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest webRequest, WebDataBinderFactory binderFactory)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">return</span> doResolveArgument(parameter, mavContainer, webRequest, binderFactory);<br>    &#125;<br><br>    <span class="hljs-meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringHttpInputMessage</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HttpInputMessage</span> &#123;<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> HttpHeaders headers;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String json;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">StringHttpInputMessage</span><span class="hljs-params">(HttpHeaders headers, String json)</span> &#123;<br>            <span class="hljs-built_in">this</span>.headers = headers;<br>            <span class="hljs-built_in">this</span>.json = json;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasBody</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.json != <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> InputStream <span class="hljs-title function_">getBody</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>            <span class="hljs-keyword">return</span> json == <span class="hljs-literal">null</span> ? InputStream.nullInputStream() : <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(json.getBytes(StandardCharsets.UTF_8));<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> HttpHeaders <span class="hljs-title function_">getHeaders</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> headers;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> &lt;T&gt; Object <span class="hljs-title function_">getFromQuery</span><span class="hljs-params">(String key,</span><br><span class="hljs-params">                                    ModelAndViewContainer mavContainer, HttpServletRequest servletRequest,</span><br><span class="hljs-params">                                    WebDataBinderFactory binderFactory, MethodParameter parameter, NativeWebRequest webRequest)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">v</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span> (mavContainer.containsAttribute(key)) &#123;<br>            v = mavContainer.getModel().get(key);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            v = servletRequest.getParameter(key);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (v == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-type">DataBinder</span> <span class="hljs-variable">binder</span> <span class="hljs-operator">=</span> binderFactory.createBinder(webRequest, <span class="hljs-literal">null</span>, key);<br><br>        <span class="hljs-type">ConversionService</span> <span class="hljs-variable">conversionService</span> <span class="hljs-operator">=</span> binder.getConversionService();<br>        <span class="hljs-keyword">if</span> (conversionService != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">TypeDescriptor</span> <span class="hljs-variable">source</span> <span class="hljs-operator">=</span> TypeDescriptor.valueOf(String.class);<br>            <span class="hljs-type">TypeDescriptor</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeDescriptor</span>(parameter);<br>            <span class="hljs-keyword">if</span> (conversionService.canConvert(source, target)) &#123;<br>                <span class="hljs-keyword">return</span> binder.convertIfNecessary(v, parameter.getParameterType(), parameter);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取请求体JSON字符串</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">getRequestBody</span><span class="hljs-params">(NativeWebRequest webRequest)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">servletRequest</span> <span class="hljs-operator">=</span> ((HttpServletRequest) webRequest.getNativeRequest());<br><br>        <span class="hljs-comment">// 有就直接获取</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">jsonBody</span> <span class="hljs-operator">=</span> (String) webRequest.getAttribute(JSONBODY_ATTRIBUTE, NativeWebRequest.SCOPE_REQUEST);<br>        <span class="hljs-comment">// 没有就从请求中读取</span><br>        <span class="hljs-keyword">if</span> (jsonBody == <span class="hljs-literal">null</span>) &#123;<br>            jsonBody = IoUtil.read(servletRequest.getReader());<br>            webRequest.setAttribute(JSONBODY_ATTRIBUTE, jsonBody, NativeWebRequest.SCOPE_REQUEST);<br>        &#125;<br>        <span class="hljs-keyword">return</span> jsonBody;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注解定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.annotation.ElementType;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.annotation.RetentionPolicy;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><br><span class="hljs-meta">@Target(ElementType.PARAMETER)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> MultiRequestBody &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 是否必须出现的参数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">required</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 参数名称，默认为参数名的下划线形式，如appId -&gt; app_id</span><br><span class="hljs-comment">     */</span><br>    String <span class="hljs-title function_">value</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>只需要对参数使用<code>@MultiRequestBody</code>注解，样例如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Result&lt;PageVO&lt;ProductVO&gt;&gt; <span class="hljs-title function_">list</span><span class="hljs-params">(<span class="hljs-meta">@MultiRequestBody</span> PageRequest request</span><br><span class="hljs-params">            , <span class="hljs-meta">@MultiRequestBody(value = &quot;app_id&quot;, required = false)</span> Long appId</span><br><span class="hljs-params">    )</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker使用技巧</title>
    <link href="/2023/12/13/3DJZB2C.html"/>
    <url>/2023/12/13/3DJZB2C.html</url>
    
    <content type="html"><![CDATA[<p>总结的一些docker使用技巧</p><span id="more"></span><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>一般docker常用于搭建各种网络服务，但是也可以用于编译、开发环境搭建、命令行工具等</p><h3 id="编译环境"><a href="#编译环境" class="headerlink" title="编译环境"></a>编译环境</h3><p>各种语言需要的编译环境不尽相同，甚至可能彼此冲突。</p><p>以我用过的语言来说，</p><ul><li>java没什么问题，环境简单，但是有少数库编译会出问题；</li><li>node版本多变，兼容性差，不少三方库可能还会依赖c库；</li><li>c不常用，但是其对环境依赖最强，甚至没有包管理功能，我都不知道怎么控制依赖的版本，要是不兼容怎么办；</li><li>rust和c近似，有包管理，但是依旧有不少库是c的包装</li><li>python几乎完全不懂，环境搭建不能保证百分百成功</li><li>dart和flutter环境依赖不强，但是flutter更新可能会有版本兼容和依赖适配问题</li></ul><p>基于上述的种种理由，利用docker实现一个彼此隔离，可重现的编译环境非常有用，<a href="https://gist.github.com/inkroom/210cdec856ae59281602407664c5087c">这里</a>是我总结的一些库的编译脚本</p><p>此外，对于c、rust、go、dart等支持静态编译的语言来说，可以使用docker做到更完善纯粹的环境，比如使用<strong>scratch</strong>镜像，剔除所有用不到的文件，只需要保留<strong>glibc</strong>和可执行文件，如果有涉及https的，再保留一份<strong>ssl</strong>证书文件，例如我自己写的<a href="https://github.com/inkroom/git-lfs-server-c/blob/rust/Dockerfile">git-lfs-server</a>。如果是rust还能更加极端，直接使用musl编译，真正实现一个文件处处运行</p><hr><p>类似dart和go不支持彻底的静态编译，需要保留glibc和其他可能使用到的依赖，这里给出一个精简方案</p><p>dart可以参考<a href="https://github.com/inkroom/docker-util/blob/novel_down_dart/Dockerfile">这个</a>，有哪些依赖可以通过<strong>ldd</strong>查看</p><p>还有一种<a href="https://github.com/inkroom/git-lfs-server-c/commit/1217be116c4ec4cd0c7561991aeafe191265ea86#diff-dd2c0eb6ea5cfc6c4bd4eac30934e2d5746747af48fef6da689e85b752f39557">方案</a></p><p>这种方案更为繁琐。首先在静态编译完成后，执行以下脚本获取依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">exe=&quot;lfs&quot; # 构建产物名称<br>des=&quot;$(pwd)/lib&quot; # 依赖拷贝目录<br>echo $des<br>deplist=$(ldd $exe | awk &#x27;&#123;if (match($3,&quot;/&quot;))&#123; printf(&quot;%s &quot;),$3 &#125; &#125;&#x27;)<br>cp $deplist $des<br></code></pre></td></tr></table></figure><p>然后再通过以下脚本运行程序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">dirname=`dirname $0`<br>tmp=&quot;$&#123;dirname#?&#125;&quot;<br>if [ &quot;$&#123;dirname%$tmp&#125;&quot; != &quot;/&quot; ]; then<br>dirname=$PWD/$dirname<br>fi<br>LD_LIBRARY_PATH=$dirname/lib<br>export LD_LIBRARY_PATH<br>echo $LD_LIBRARY_PATH<br><span class="hljs-meta prompt_">$</span><span class="language-bash"><span class="hljs-built_in">dirname</span>/lfs <span class="hljs-string">&quot;<span class="hljs-variable">$@</span>&quot;</span></span><br></code></pre></td></tr></table></figure><p>原理就是通过指定<strong>LD_LIBRARY_PATH</strong>修改查找依赖的位置</p><hr><p>从编译完成的镜像中获取产物有两种方案</p><ul><li>方案一</li></ul><p>运行起来后执行cp命令，基本格式如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -itd --rm --name temp image_name bash &amp;&amp; docker cp temp:/out ./ &amp;&amp; docker stop temp<br></code></pre></td></tr></table></figure><p>其中<strong>bash</strong>可能需要根据镜像更换成其他shell，或者换成<code>tail -f /dev/null</code>，总之就是要让镜像处于一直运行的状态</p><ul><li>方案二</li></ul><p>将镜像输出为tar文件，然后解压，从中获取文件，样例如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker save -o mini.tar $mini_image_id<br>tar xvf mini.tar<br>cat manifest.json<br>echo &quot;layer:$(sed &#x27;s/&quot;,&quot;/\n/g&#x27; manifest.json | sed &#x27;s/&quot;]&#125;/\n/g&#x27; | tac | sed -n &quot;2,2p&quot;)&quot;<br>tar xvf $(sed &#x27;s/&quot;,&quot;/\n/g&#x27; manifest.json | sed &#x27;s/&quot;]&#125;/\n/g&#x27; | tac | sed -n &quot;2,2p&quot;)<br>cp server ../bin/server-mini<br></code></pre></td></tr></table></figure><p>这里是解压最后一层layer，具体需要哪一层可查看<strong>manifest.json</strong></p><p>没有<code>tac</code>命令可用<code>tail -r</code>代替</p><p>不同版本的docker导出的tar目录结构略有不同,但是好在不影响manifest.json,基本格式如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;Config&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;9d4c89bd4fa6947ea1ec699a1cd675b36f944cb6f661427cc1c7f9ebbb833fba.json&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;RepoTags&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-string">&quot;redis:alpine&quot;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;Layers&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-string">&quot;b93731aff72308a4aba32de5ee9f50dc3a2e702627b6893691c7f3f099132aca/layer.tar&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;0da7b4adee891f8e97c3619f3a4ac942076cb8ac84cd952c5b3427686bccc64f/layer.tar&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;86546f53d2382092a06e332014d30de2cb91ceb64e56a00a6602c944577bae17/layer.tar&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;c078df15cf9dce7fe6ffaa0e715fcf2f9eb0875e88e289330d73448ae8667937/layer.tar&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;f1b37bdd71e374c35fdb82c0d4a4703d07eb21260a078eecd7a003fd5b9b2da5/layer.tar&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;692214158801f0e9360e0addf367701d03263ac6a4f49d614a4000ce6595c3e5/layer.tar&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;87ad4eaa16e78a00b3baf73559ff63c31639d9bba4dbab2ce5b1cb862d179c14/layer.tar&quot;</span><br>    <span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><p>这里的命令过于繁琐,建议使用<a href="https://jqlang.github.io/jq/manual/">jq</a>代替,例如以下样例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar xvf $(jq --raw-output &#x27;.[0].Layers[1]&#x27; manifest.json)<br></code></pre></td></tr></table></figure><h3 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h3><p>使用docker搭建开发环境有一定局限性，只适用于网络应用或者命令行工具，对于依赖硬件或者GUI的目前无法使用</p><p>建议是搭配vscode的远程功能使用，如果环境部署到远程服务器，使用ssh通信，如果是本机的，可以不要ssh，同时镜像也可以使用alpine，体积更小，当然开发环境一般不差这点</p><p>远程的镜像之前常用的都是<strong>ubuntu:20.04</strong>，但是最近有几次用这个镜像出了些奇奇怪怪的状况，所以换成<strong>debian:12.2</strong>了，注意这个镜像的软件源位置不一样，参考上面给出的网址</p><p>还有一种方案是使用<a href="https://hub.docker.com/r/linuxserver/code-server">webide</a>，直接在浏览器上使用，但是要注意可能有性能问题</p><p><a href="https://gist.github.com/inkroom/501548078a930c6f3bd98ea257409648">这里</a>是我自用的开发环境脚本</p><h3 id="命令行工具"><a href="#命令行工具" class="headerlink" title="命令行工具"></a>命令行工具</h3><p>这里一般是用别人开发的软件居多了，因为别人的软件可能用各种语言开发，总不能什么环境都装吧，只能上docker了</p><p>比如我自己用的就有<a href="https://github.com/inkroom/docker-util/blob/novel_down_python/Dockerfile">epub</a>，<a href="https://eff-certbot.readthedocs.io/en/latest/install.html#running-with-docker">certbot</a></p><p>缺点就是命令会变得很繁琐，而且由于文件读写映射兼容，可能还需要修改源代码</p><p>如果是clone源代码的，在dockerfile里最好指定tag或者commit，避免二次构建因为版本更新而失败</p><h2 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h2><h3 id="基础镜像"><a href="#基础镜像" class="headerlink" title="基础镜像"></a>基础镜像</h3><p>ubuntu:20.04起步，22.04包管理器好像换了，不是很建议使用。如果有问题，就换成debian，debian还有基于日期的tag，更容易维持版本</p><p>工具类建议使用<strong>alpine</strong>，如果可以还能使用<strong>busybox</strong>，甚至<strong>scratch</strong>，都能有效减小体积，但是可能会出各种运行问题，比如有些软件在scratch下不能响应Ctrl+C，需要在程序里自己监听信号处理</p><h3 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h3><p>开发环境直接装<a href="https://ohmyz.sh/">oh-my-zsh</a>，alpine只有<strong>sh</strong>，非常难用</p><p>同时记得加入以下命令以便支持中文</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Dockerfile"><span class="hljs-keyword">ENV</span> LANG C.UTF-<span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><h3 id="时区"><a href="#时区" class="headerlink" title="时区"></a>时区</h3><p>基本上所有官方镜像都有时区问题，需要在Dockerfile中处理</p><p>例如</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Dockerfile"><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">export</span> DEBIAN_FRONTEND=noninteractive \</span><br><span class="language-bash">    &amp;&amp; apt-get update \</span><br><span class="language-bash">    &amp;&amp; apt-get install -y tzdata \</span><br><span class="language-bash">    &amp;&amp; <span class="hljs-built_in">ln</span> -fs /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \</span><br><span class="language-bash">    &amp;&amp; dpkg-reconfigure --frontend noninteractive tzdata</span><br></code></pre></td></tr></table></figure><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Dockerfile"><span class="hljs-keyword">ENV</span> TZ=Asia/Shanghai<br></code></pre></td></tr></table></figure><p>具体哪个有效，自己尝试吧</p><h3 id="减小体积"><a href="#减小体积" class="headerlink" title="减小体积"></a>减小体积</h3><p>除了换镜像外，还能通过多阶段构建，只保留构建产物，配合静态编译效果更好</p><p>将RUN命令进行合并，减少镜像层级，下载的文件记得删除，例如以下例子</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Dockerfile"><span class="hljs-keyword">RUN</span><span class="language-bash"> wget -q https://mirrors.huaweicloud.com/openjdk/<span class="hljs-variable">$&#123;JAVA_VERSION&#125;</span>/openjdk-<span class="hljs-variable">$&#123;JAVA_VERSION&#125;</span>_linux-x64_bin.tar.gz  &amp;&amp; <span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$&#123;JDK_HOME&#125;</span> &amp;&amp; tar -zxvf openjdk-<span class="hljs-variable">$&#123;JAVA_VERSION&#125;</span>_linux-x64_bin.tar.gz -C <span class="hljs-variable">$&#123;JDK_HOME&#125;</span> &amp;&amp; <span class="hljs-built_in">rm</span> -rf openjdk-<span class="hljs-variable">$&#123;JAVA_VERSION&#125;</span>_linux-x64_bin.tar.gz</span><br></code></pre></td></tr></table></figure><h3 id="加速构建"><a href="#加速构建" class="headerlink" title="加速构建"></a>加速构建</h3><p>在测试阶段，将RUN命令尽可能分开，以便调整后续命令时能够用上之前的缓存，不用从头开始</p><p>不同语言有不同的包管理方式，对于减少依赖下载次数，给出几个例子</p><ul><li>单文件类</li></ul><p>依赖存储于一个文件，例如node，简单的rust和java项目</p><p>node最为简单，可以直接 <code>RUN npm i axios</code>，或者提前COPY package.json，例如：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Dockerfile"><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /app</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> package.json /app/</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> npm i</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> . /app/</span><br><span class="hljs-comment"># 其他命令</span><br></code></pre></td></tr></table></figure><ul><li>多文件类</li></ul><p>rust和java的多模块项目，依赖文件可能位于不同的文件夹中，如果依旧使用上述方案的话，命令会较为繁琐，比如使用多个<strong>COPY</strong>命令，或者通过shell脚本修改目录结构等</p><p>这里最简单的方案还是使用 <strong>buildkit</strong> 的<a href="https://docs.docker.com/engine/reference/builder/#run---mount">RUN挂载功能</a></p><p>例如：<code>RUN --mount=type=cache,mode=0777,target=/root/.gradle/,id=gradle ./gradlew :spring-boot-project:spring-boot:build -x test</code></p><p>这里要注意缓存的目录，尽可能把后续命令中涉及的目录都归到一个父目录下</p><p>另外在<strong>mac</strong>上遇到了必须指定<strong>mode</strong>参数才生效的情况</p><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul><li><a href="https://gist.github.com/inkroom/f17f4ae7a2c61cc1e84f30d0a3977b1d">常用软件源</a></li><li><a href="https://github.com/DaoCloud/public-image-mirror">docker hub代理</a></li><li><a href="https://gist.github.com/inkroom/501548078a930c6f3bd98ea257409648">开发环境</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>netty并发优化思路</title>
    <link href="/2023/12/12/1F6HAFB.html"/>
    <url>/2023/12/12/1F6HAFB.html</url>
    
    <content type="html"><![CDATA[<p>有个基于netty的项目对并发要求较高，这里记录一下调优的过程</p><span id="more"></span><ol><li><p>首先放弃常用的tomcat之类的容器方案，因为其性能不够，也不方便深入优化</p></li><li><p>Spring可以继续使用，仅使用IOC部分，不使用其web模块</p></li><li><p>业务逻辑本身比较简单，主要工作是写日志，第三方服务使用云厂商提供，响应速度极快，所以一次请求可以在1毫秒内完成</p></li><li><p>借助阿里云使用5000并发压测两分钟，刚开始请求响应在几十毫秒，后来拉到两秒，最终平均响应时间高达两秒，RTS 4000+</p></li><li><p>Linux上使用netty的epoll，其余继续使用nio，效果不明显</p></li><li><p>修改linux连接数量 vim /etc/sysctl.conf，修改<code>net.core.somaxconn</code>和<code>net.ipv4.tcp_max_syn_backlog</code>，然后<code>sysctl -p</code></p></li><li><p>通过多种方式排查，可以认为是线程切换影响较大，可通过<code>netstat 1</code>查看线程切换，正常在两三千左右，压测的时候直接五六万</p></li><li><p>使用管道减少redis交互，效果不明显</p></li><li><p>将redis读写改为异步，效果明显，响应时间可在一秒内，测试10000并发，RTS也在10000+</p></li><li><p>进一步减小线程切换，将业务handler从原本的单独Group改为直接使用io线程池</p></li><li><p>将io线程数量限制为核心数+1，可通过top看到所有核心都在运转，只是使用率都不算高，整体使用率也才70%左右，所以核心数比单核性能更重要</p></li><li><p>通过<a href="https://arthas.gitee.io/">arthas</a>查看业务耗时情况，业务耗时一次不超过0.3毫秒，此时RTS依然是10000+，计算最大RTS (1000 / 0.3) * 8 = 26666，看似还有大量空间可优化，但是考虑到GC、上下文切换、其他程序竞争CPU，不好说还有多大优化空间</p></li><li><p>可通过<a href="https://gceasy.io/">https://gceasy.io/</a>解析GC日志，jdk8可配置<code>-XX:-UseAdaptiveSizePolicy -XX:+PrintGCApplicationStoppedTime -XX:+PrintGCApplicationConcurrentTime -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+UseGCLogFileRotation -XX:+PrintHeapAtGC -XX:NumberOfGCLogFiles=5 -XX:GCLogFileSize=20M -Xloggc:/data/weblogs/ard-user-gc-%t.log -XX:+HeapDumpOnOutOfMemoryError</code> 输出GC日志</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>netty</tag>
      
      <tag>并发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring-boot启动慢</title>
    <link href="/2023/12/11/1SSP84N.html"/>
    <url>/2023/12/11/1SSP84N.html</url>
    
    <content type="html"><![CDATA[<p>一个简单应用，使用了springBoot框架，发现启动就需要五六秒</p><span id="more"></span><h2 id="可能性"><a href="#可能性" class="headerlink" title="可能性"></a>可能性</h2><p>一般情况下，启动慢是注入了太多bean，或者和网络服务建立连接慢，可以通过懒加载之类的方式优化</p><p>但是我这次不一样，是由于框架本身导致的启动慢。怎么判断的呢，打开org.springframework的trace日志，发现输出的第一条日志和第二条之间差距在五六秒左右</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>由于涉及底层框架，所以最好下载一份源码，修改代码做好日志打点，一点点排查。耗时问题不太适合使用debug。</p><p>这里附上一份用于编译Spring-Boot的Dockerfile，最好启用buildkit使用缓存</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs Dockerfile"><span class="hljs-comment"># syntax=docker/dockerfile:1</span><br><span class="hljs-comment">#FROM ubuntu:20.04</span><br><span class="hljs-keyword">FROM</span> debian:<span class="hljs-number">12.2</span><br><span class="hljs-comment">#FROM debian:stable-20231120</span><br><span class="hljs-comment">#RUN echo $&#x27; \n\</span><br><span class="hljs-comment">#deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm main contrib non-free non-free-firmware\n\</span><br><span class="hljs-comment">#deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm main contrib non-free non-free-firmware\n\</span><br><span class="hljs-comment">#deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-updates main contrib non-free non-free-firmware\n\</span><br><span class="hljs-comment">#deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-updates main contrib non-free non-free-firmware\n\</span><br><span class="hljs-comment">#deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-backports main contrib non-free non-free-firmware\n\</span><br><span class="hljs-comment">#deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-backports main contrib non-free non-free-firmware\n\</span><br><span class="hljs-comment">#deb https://mirrors.tuna.tsinghua.edu.cn/debian-security bookworm-security main contrib non-free non-free-firmware\n\</span><br><span class="hljs-comment">#deb-src https://mirrors.tuna.tsinghua.edu.cn/debian-security bookworm-security main contrib non-free non-free-firmware\n\&#x27; &gt;&gt; /etc/apt/sources.list</span><br><br><span class="hljs-comment">#RUN sed -i &quot;s|http://deb.debian.org/debian|http://mirror.sjtu.edu.cn/debian|g&quot; /etc/apt/sources.list</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> sed -i <span class="hljs-string">&#x27;s/deb.debian.org/mirrors.ustc.edu.cn/g&#x27;</span> /etc/apt/sources.list.d/debian.sources</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">export</span> DEBIAN_FRONTEND=noninteractive  &amp;&amp; apt update -y &amp;&amp; apt upgrade -y &amp;&amp; apt install -y \</span><br><span class="language-bash"><span class="hljs-comment"># autoconf \</span></span><br><span class="language-bash"><span class="hljs-comment"># automake \</span></span><br><span class="language-bash"> git \</span><br><span class="language-bash"><span class="hljs-comment"># gcc \</span></span><br><span class="language-bash"><span class="hljs-comment"># g++ \</span></span><br><span class="language-bash"><span class="hljs-comment"># libtool \</span></span><br><span class="language-bash"><span class="hljs-comment"># lksctp-tools \</span></span><br><span class="language-bash"><span class="hljs-comment"># libssl-dev \</span></span><br><span class="language-bash"><span class="hljs-comment"># lsb-core \</span></span><br><span class="language-bash"><span class="hljs-comment"># make \</span></span><br><span class="language-bash"> tar \</span><br><span class="language-bash"> unzip \</span><br><span class="language-bash"> wget \</span><br><span class="language-bash"> zip</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> wget https://mirrors.tuna.tsinghua.edu.cn/Adoptium/8/jdk/aarch64/linux/OpenJDK8U-jdk_aarch64_linux_hotspot_8u392b08.tar.gz &amp;&amp; tar zvxf OpenJDK8U-jdk_aarch64_linux_hotspot_8u392b08.tar.gz</span><br><span class="hljs-keyword">ARG</span> JDK_HOME=/jdk8u392-b08<br><span class="hljs-keyword">ENV</span> JAVA_HOME $&#123;JDK_HOME&#125;<br><span class="hljs-keyword">ENV</span> JRE_HOME $JAVA_HOME/jre<br><span class="hljs-keyword">ENV</span> CLASS_PATH=.:$JAVA_HOME/lib:$JRE_HOME/lib<br><span class="hljs-keyword">ENV</span> PATH $&#123;PATH&#125;:$&#123;JAVA_HOME&#125;/bin:$&#123;JAVA_HOME&#125;/jre/bin<br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /app</span><br><span class="hljs-comment">#RUN apt install -y clang &amp;&amp; git clone https://github.com/spring-projects/spring-boot -b v2.7.17 /app</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> . /app</span><br><br><span class="hljs-comment">#RUN --mount=type=cache,mode=0777,target=/root/.gradle/,id=gradle ./gradlew build -x test</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> --mount=<span class="hljs-built_in">type</span>=cache,mode=0777,target=/root/.gradle/,<span class="hljs-built_in">id</span>=gradle ./gradlew :spring-boot-project:spring-boot:build -x <span class="hljs-built_in">test</span></span><br><span class="hljs-comment">#RUN --mount=type=cache,mode=0777,target=/project/maven/ ls /project/maven &amp;&amp; mvn clean package -DskipTests=true -Dcheckstyle.skip=true -Dmaven.test.skip=true -T 4 &amp;&amp; ls /project/maven</span><br><br></code></pre></td></tr></table></figure><p>编译通过后，拷贝<code>spring-boot-project/spring-boot/build/libs/spring-boot-2.7.17.jar</code>到项目引入即可</p><h3 id="打点"><a href="#打点" class="headerlink" title="打点"></a>打点</h3><p>最开始使用 spring的logger成员变量日志打点，但是debug后发现有些日志不会输出，很奇怪，也没功夫去研究，就索性自己写个log方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">info</span><span class="hljs-params">(String m)</span> &#123;<br>    <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;</span>);<br>    System.out.println(f.format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()) + <span class="hljs-string">&quot; &quot;</span> + m);<br>&#125;<br></code></pre></td></tr></table></figure><p>再次编译后遇到代码格式校验不通过问题，几番尝试后，解决办法如下</p><p>修改<code>spring-boot-project/spring-boot/build.gradle</code></p><p>原内容如下</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gradle">tasks.named(<span class="hljs-string">&quot;checkFormatMain&quot;</span>) &#123;<br><span class="hljs-comment">//def generatedSources = fileTree(&quot;build/generated-sources/main&quot;)</span><br><span class="hljs-comment">//// Exclude source generated from the templates as expand(properties) changes line endings on Windows</span><br><span class="hljs-comment">//exclude &#123; candidate -&gt; generatedSources.contains(candidate.file) &#125;</span><br><span class="hljs-comment">//// Add the templates to check that the input is correctly formatted</span><br><span class="hljs-comment">//source(fileTree(&quot;src/main/javaTemplates&quot;))</span><br>&#125;<br></code></pre></td></tr></table></figure><p>修改后如下</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs gradle">tasks.named(<span class="hljs-string">&quot;checkFormatMain&quot;</span>) &#123;<br><span class="hljs-comment">//def generatedSources = fileTree(&quot;build/generated-sources/main&quot;)</span><br><span class="hljs-comment">//// Exclude source generated from the templates as expand(properties) changes line endings on Windows</span><br><span class="hljs-comment">//exclude &#123; candidate -&gt; generatedSources.contains(candidate.file) &#125;</span><br><span class="hljs-comment">//// Add the templates to check that the input is correctly formatted</span><br><span class="hljs-comment">//source(fileTree(&quot;src/main/javaTemplates&quot;))</span><br><br>enabled = <span class="hljs-keyword">false</span><br>&#125;<br>tasks.named(<span class="hljs-string">&quot;checkstyleMain&quot;</span>) &#123;<br>enabled = <span class="hljs-keyword">false</span><br>&#125;<br></code></pre></td></tr></table></figure><p>原理就是关闭两个和格式校验相关的task</p><h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><p>一通操作之后，将耗时操作定位到 <code>org/springframework/boot/SpringApplicationRunListeners</code> 的第<strong>66</strong>行的lamda方法内</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">environmentPrepared</span><span class="hljs-params">(ConfigurableBootstrapContext bootstrapContext, ConfigurableEnvironment environment)</span> &#123;<br>    doWithListeners(<span class="hljs-string">&quot;spring.boot.application.environment-prepared&quot;</span>,<br>            (listener) -&gt; listener.environmentPrepared(bootstrapContext, environment)<span class="hljs-comment">/* 就这一行代码 */</span> );<br>&#125;<br></code></pre></td></tr></table></figure><p>虽然定位到耗时代码，但是这段代码的执行顺序还是挺奇怪的</p><p>以下代码位于 <code>org/springframework/boot/SpringApplication</code> 第293行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ConfigurableApplicationContext <span class="hljs-title function_">run</span><span class="hljs-params">(String... args)</span> &#123;<br><span class="hljs-comment">/*1*/</span><span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> System.nanoTime();<br>    <span class="hljs-type">DefaultBootstrapContext</span> <span class="hljs-variable">bootstrapContext</span> <span class="hljs-operator">=</span> createBootstrapContext();<br>    <span class="hljs-type">ConfigurableApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-comment">/*2*/</span>configureHeadlessProperty();<br><span class="hljs-comment">/*3*/</span><span class="hljs-type">SpringApplicationRunListeners</span> <span class="hljs-variable">listeners</span> <span class="hljs-operator">=</span> getRunListeners(args);<br><span class="hljs-comment">/*4*/</span>listeners.starting(bootstrapContext, <span class="hljs-built_in">this</span>.mainApplicationClass);<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">ApplicationArguments</span> <span class="hljs-variable">applicationArguments</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultApplicationArguments</span>(args);<br><span class="hljs-comment">/*5*/</span><span class="hljs-type">ConfigurableEnvironment</span> <span class="hljs-variable">environment</span> <span class="hljs-operator">=</span> prepareEnvironment(listeners, bootstrapContext, applicationArguments);<span class="hljs-comment">// 耗时操作就在这里</span><br><span class="hljs-comment">/*6*/</span>configureIgnoreBeanInfo(environment);<br><span class="hljs-comment">/*7*/</span><span class="hljs-type">Banner</span> <span class="hljs-variable">printedBanner</span> <span class="hljs-operator">=</span> printBanner(environment);<br>context = createApplicationContext();<br><span class="hljs-comment">/*8*/</span>context.setApplicationStartup(<span class="hljs-built_in">this</span>.applicationStartup);<br>prepareContext(bootstrapContext, context, environment, listeners, applicationArguments, printedBanner);<br>refreshContext(context);<br>afterRefresh(context, applicationArguments);<br><span class="hljs-type">Duration</span> <span class="hljs-variable">timeTakenToStartup</span> <span class="hljs-operator">=</span> Duration.ofNanos(System.nanoTime() - startTime);<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.logStartupInfo) &#123;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">StartupInfoLogger</span>(<span class="hljs-built_in">this</span>.mainApplicationClass).logStarted(getApplicationLog(), timeTakenToStartup);<br>&#125;<br>listeners.started(context, timeTakenToStartup);<br>callRunners(context, applicationArguments);<br>&#125;<br><span class="hljs-keyword">catch</span> (Throwable ex) &#123;<br>handleRunFailure(context, ex, listeners);<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(ex);<br>&#125;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">Duration</span> <span class="hljs-variable">timeTakenToReady</span> <span class="hljs-operator">=</span> Duration.ofNanos(System.nanoTime() - startTime);<br>listeners.ready(context, timeTakenToReady);<br>&#125;<br><span class="hljs-keyword">catch</span> (Throwable ex) &#123;<br>handleRunFailure(context, ex, <span class="hljs-literal">null</span>);<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(ex);<br>&#125;<br><span class="hljs-keyword">return</span> context;<br>&#125;<br></code></pre></td></tr></table></figure><p>我对关键代码标注了行号，其执行顺序为：1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6 -&gt; 7 -&gt; 8 -&gt; 6 -&gt; 7 -&gt; 8 -&gt; 启动完成</p><p>由于执行顺序过于绕，可能有遗漏，总体逻辑就是 <strong>5</strong> 会被执行两次，而且是递归式的两次，不是并行的两次，这都是因为spring使用的listener机制，弄得人头大，然后耗时的是第二次也就是被递归调用的那一次</p><p>所以接下来的思路就是理清listener的逻辑，是否前后两次执行的代码不一样</p><h2 id="listener"><a href="#listener" class="headerlink" title="listener"></a>listener</h2><p>首先这套机制是 spring 提供的，具体到我的项目是 <strong>spring-context</strong> 里的 <code>org.springframework.context.event.SimpleApplicationEventMulticaster#multicastEvent:137</code>，不同的项目配置可能会有不同的listener实现，所以这里再下载一份spring源码，看看具体是哪个listener在耗时</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs Dockerfile"><span class="hljs-comment"># syntax=docker/dockerfile:1</span><br><span class="hljs-comment">#FROM ubuntu:20.04</span><br><span class="hljs-keyword">FROM</span> debian:<span class="hljs-number">12.2</span><br><span class="hljs-comment">#FROM debian:stable-20231120</span><br><span class="hljs-comment">#RUN echo $&#x27; \n\</span><br><span class="hljs-comment">#deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm main contrib non-free non-free-firmware\n\</span><br><span class="hljs-comment">#deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm main contrib non-free non-free-firmware\n\</span><br><span class="hljs-comment">#deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-updates main contrib non-free non-free-firmware\n\</span><br><span class="hljs-comment">#deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-updates main contrib non-free non-free-firmware\n\</span><br><span class="hljs-comment">#deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-backports main contrib non-free non-free-firmware\n\</span><br><span class="hljs-comment">#deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-backports main contrib non-free non-free-firmware\n\</span><br><span class="hljs-comment">#deb https://mirrors.tuna.tsinghua.edu.cn/debian-security bookworm-security main contrib non-free non-free-firmware\n\</span><br><span class="hljs-comment">#deb-src https://mirrors.tuna.tsinghua.edu.cn/debian-security bookworm-security main contrib non-free non-free-firmware\n\&#x27; &gt;&gt; /etc/apt/sources.list</span><br><br><span class="hljs-comment">#RUN sed -i &quot;s|http://deb.debian.org/debian|http://mirror.sjtu.edu.cn/debian|g&quot; /etc/apt/sources.list</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> sed -i <span class="hljs-string">&#x27;s/deb.debian.org/mirrors.ustc.edu.cn/g&#x27;</span> /etc/apt/sources.list.d/debian.sources</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">export</span> DEBIAN_FRONTEND=noninteractive  &amp;&amp; apt update -y &amp;&amp; apt upgrade -y &amp;&amp; apt install -y \</span><br><span class="language-bash"><span class="hljs-comment"># autoconf \</span></span><br><span class="language-bash"><span class="hljs-comment"># automake \</span></span><br><span class="language-bash"> git \</span><br><span class="language-bash"><span class="hljs-comment"># gcc \</span></span><br><span class="language-bash"><span class="hljs-comment"># g++ \</span></span><br><span class="language-bash"><span class="hljs-comment"># libtool \</span></span><br><span class="language-bash"><span class="hljs-comment"># lksctp-tools \</span></span><br><span class="language-bash"><span class="hljs-comment"># libssl-dev \</span></span><br><span class="language-bash"><span class="hljs-comment"># lsb-core \</span></span><br><span class="language-bash"><span class="hljs-comment"># make \</span></span><br><span class="language-bash"> tar \</span><br><span class="language-bash"> unzip \</span><br><span class="language-bash"> wget \</span><br><span class="language-bash"> zip</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> wget https://mirrors.tuna.tsinghua.edu.cn/Adoptium/8/jdk/aarch64/linux/OpenJDK8U-jdk_aarch64_linux_hotspot_8u392b08.tar.gz &amp;&amp; tar zvxf OpenJDK8U-jdk_aarch64_linux_hotspot_8u392b08.tar.gz</span><br><span class="hljs-keyword">ARG</span> JDK_HOME=/jdk8u392-b08<br><span class="hljs-keyword">ENV</span> JAVA_HOME $&#123;JDK_HOME&#125;<br><span class="hljs-keyword">ENV</span> JRE_HOME $JAVA_HOME/jre<br><span class="hljs-keyword">ENV</span> CLASS_PATH=.:$JAVA_HOME/lib:$JRE_HOME/lib<br><span class="hljs-keyword">ENV</span> PATH $&#123;PATH&#125;:$&#123;JAVA_HOME&#125;/bin:$&#123;JAVA_HOME&#125;/jre/bin<br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /app</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> git <span class="hljs-built_in">clone</span> https://github.com/spring-projects/spring-framework -b v5.3.30 /app</span><br><span class="hljs-comment">#COPY . /app</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> --mount=<span class="hljs-built_in">type</span>=cache,mode=0777,target=/root/.gradle/,<span class="hljs-built_in">id</span>=gradle ./gradlew :spring-context:build -x <span class="hljs-built_in">test</span></span><br></code></pre></td></tr></table></figure><p>输出文件位于 <code>spring-context/build/libs/spring-context-5.3.30.jar</code></p><p>修改代码后 同样出现和之前类似的错误</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">Execution failed <span class="hljs-keyword">for</span> <span class="hljs-keyword">task</span> <span class="hljs-string">&#x27;:spring-context:checkstyleMain&#x27;</span><br></code></pre></td></tr></table></figure><p>解决方法一样，关闭<code>checkstyleMain</code>，这次只有这一个task</p><p>打点后输出的多个listener执行时间如下</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">2023</span>-<span class="hljs-number">12</span>-<span class="hljs-number">12</span> <span class="hljs-number">09</span>:<span class="hljs-number">48</span>:<span class="hljs-number">11.448</span> listener org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.cloud</span><span class="hljs-selector-class">.bootstrap</span>.BootstrapApplicationListener@<span class="hljs-number">14</span>bee915 org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.boot</span><span class="hljs-selector-class">.context</span><span class="hljs-selector-class">.event</span><span class="hljs-selector-class">.ApplicationEnvironmentPreparedEvent</span><span class="hljs-selector-attr">[source=org.springframework.boot.SpringApplication@54eb2b70]</span><br><span class="hljs-number">2023</span>-<span class="hljs-number">12</span>-<span class="hljs-number">12</span> <span class="hljs-number">09</span>:<span class="hljs-number">48</span>:<span class="hljs-number">11.448</span> listener finish org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.cloud</span><span class="hljs-selector-class">.bootstrap</span>.BootstrapApplicationListener@<span class="hljs-number">14</span>bee915 org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.boot</span><span class="hljs-selector-class">.context</span><span class="hljs-selector-class">.event</span><span class="hljs-selector-class">.ApplicationEnvironmentPreparedEvent</span><span class="hljs-selector-attr">[source=org.springframework.boot.SpringApplication@54eb2b70]</span><br><span class="hljs-number">2023</span>-<span class="hljs-number">12</span>-<span class="hljs-number">12</span> <span class="hljs-number">09</span>:<span class="hljs-number">48</span>:<span class="hljs-number">11.448</span> listener org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.cloud</span><span class="hljs-selector-class">.bootstrap</span>.LoggingSystemShutdownListener@<span class="hljs-number">1115</span>ec15 org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.boot</span><span class="hljs-selector-class">.context</span><span class="hljs-selector-class">.event</span><span class="hljs-selector-class">.ApplicationEnvironmentPreparedEvent</span><span class="hljs-selector-attr">[source=org.springframework.boot.SpringApplication@54eb2b70]</span><br><span class="hljs-number">2023</span>-<span class="hljs-number">12</span>-<span class="hljs-number">12</span> <span class="hljs-number">09</span>:<span class="hljs-number">48</span>:<span class="hljs-number">11.448</span> listener finish org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.cloud</span><span class="hljs-selector-class">.bootstrap</span>.LoggingSystemShutdownListener@<span class="hljs-number">1115</span>ec15 org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.boot</span><span class="hljs-selector-class">.context</span><span class="hljs-selector-class">.event</span><span class="hljs-selector-class">.ApplicationEnvironmentPreparedEvent</span><span class="hljs-selector-attr">[source=org.springframework.boot.SpringApplication@54eb2b70]</span><br><span class="hljs-number">2023</span>-<span class="hljs-number">12</span>-<span class="hljs-number">12</span> <span class="hljs-number">09</span>:<span class="hljs-number">48</span>:<span class="hljs-number">11.448</span> listener org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.boot</span><span class="hljs-selector-class">.env</span>.EnvironmentPostProcessorApplicationListener@<span class="hljs-number">82</span>ea68c org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.boot</span><span class="hljs-selector-class">.context</span><span class="hljs-selector-class">.event</span><span class="hljs-selector-class">.ApplicationEnvironmentPreparedEvent</span><span class="hljs-selector-attr">[source=org.springframework.boot.SpringApplication@54eb2b70]</span><br><span class="hljs-number">2023</span>-<span class="hljs-number">12</span>-<span class="hljs-number">12</span> <span class="hljs-number">09</span>:<span class="hljs-number">48</span>:<span class="hljs-number">11.567</span> listener finish org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.boot</span><span class="hljs-selector-class">.env</span>.EnvironmentPostProcessorApplicationListener@<span class="hljs-number">82</span>ea68c org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.boot</span><span class="hljs-selector-class">.context</span><span class="hljs-selector-class">.event</span><span class="hljs-selector-class">.ApplicationEnvironmentPreparedEvent</span><span class="hljs-selector-attr">[source=org.springframework.boot.SpringApplication@54eb2b70]</span><br><span class="hljs-number">2023</span>-<span class="hljs-number">12</span>-<span class="hljs-number">12</span> <span class="hljs-number">09</span>:<span class="hljs-number">48</span>:<span class="hljs-number">11.567</span> listener org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.boot</span><span class="hljs-selector-class">.context</span><span class="hljs-selector-class">.config</span>.AnsiOutputApplicationListener@<span class="hljs-number">59</span>e505b2 org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.boot</span><span class="hljs-selector-class">.context</span><span class="hljs-selector-class">.event</span><span class="hljs-selector-class">.ApplicationEnvironmentPreparedEvent</span><span class="hljs-selector-attr">[source=org.springframework.boot.SpringApplication@54eb2b70]</span><br><span class="hljs-number">2023</span>-<span class="hljs-number">12</span>-<span class="hljs-number">12</span> <span class="hljs-number">09</span>:<span class="hljs-number">48</span>:<span class="hljs-number">11.569</span> listener finish org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.boot</span><span class="hljs-selector-class">.context</span><span class="hljs-selector-class">.config</span>.AnsiOutputApplicationListener@<span class="hljs-number">59</span>e505b2 org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.boot</span><span class="hljs-selector-class">.context</span><span class="hljs-selector-class">.event</span><span class="hljs-selector-class">.ApplicationEnvironmentPreparedEvent</span><span class="hljs-selector-attr">[source=org.springframework.boot.SpringApplication@54eb2b70]</span><br><span class="hljs-number">2023</span>-<span class="hljs-number">12</span>-<span class="hljs-number">12</span> <span class="hljs-number">09</span>:<span class="hljs-number">48</span>:<span class="hljs-number">11.569</span> listener org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.boot</span><span class="hljs-selector-class">.context</span><span class="hljs-selector-class">.logging</span>.LoggingApplicationListener@<span class="hljs-number">3</span>af0a9da org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.boot</span><span class="hljs-selector-class">.context</span><span class="hljs-selector-class">.event</span><span class="hljs-selector-class">.ApplicationEnvironmentPreparedEvent</span><span class="hljs-selector-attr">[source=org.springframework.boot.SpringApplication@54eb2b70]</span><br><span class="hljs-number">2023</span>-<span class="hljs-number">12</span>-<span class="hljs-number">12</span> <span class="hljs-number">09</span>:<span class="hljs-number">48</span>:<span class="hljs-number">16.620</span> listener finish org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.boot</span><span class="hljs-selector-class">.context</span><span class="hljs-selector-class">.logging</span>.LoggingApplicationListener@<span class="hljs-number">3</span>af0a9da org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.boot</span><span class="hljs-selector-class">.context</span><span class="hljs-selector-class">.event</span><span class="hljs-selector-class">.ApplicationEnvironmentPreparedEvent</span><span class="hljs-selector-attr">[source=org.springframework.boot.SpringApplication@54eb2b70]</span><br><span class="hljs-number">2023</span>-<span class="hljs-number">12</span>-<span class="hljs-number">12</span> <span class="hljs-number">09</span>:<span class="hljs-number">48</span>:<span class="hljs-number">16.621</span> listener org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.boot</span><span class="hljs-selector-class">.autoconfigure</span>.BackgroundPreinitializer@<span class="hljs-number">43</span>b9fd5 org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.boot</span><span class="hljs-selector-class">.context</span><span class="hljs-selector-class">.event</span><span class="hljs-selector-class">.ApplicationEnvironmentPreparedEvent</span><span class="hljs-selector-attr">[source=org.springframework.boot.SpringApplication@54eb2b70]</span><br><span class="hljs-number">2023</span>-<span class="hljs-number">12</span>-<span class="hljs-number">12</span> <span class="hljs-number">09</span>:<span class="hljs-number">48</span>:<span class="hljs-number">16.621</span> listener finish org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.boot</span><span class="hljs-selector-class">.autoconfigure</span>.BackgroundPreinitializer@<span class="hljs-number">43</span>b9fd5 org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.boot</span><span class="hljs-selector-class">.context</span><span class="hljs-selector-class">.event</span><span class="hljs-selector-class">.ApplicationEnvironmentPreparedEvent</span><span class="hljs-selector-attr">[source=org.springframework.boot.SpringApplication@54eb2b70]</span><br><span class="hljs-number">2023</span>-<span class="hljs-number">12</span>-<span class="hljs-number">12</span> <span class="hljs-number">09</span>:<span class="hljs-number">48</span>:<span class="hljs-number">16.621</span> listener org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.boot</span><span class="hljs-selector-class">.context</span><span class="hljs-selector-class">.config</span>.DelegatingApplicationListener@<span class="hljs-number">8</span>e50104 org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.boot</span><span class="hljs-selector-class">.context</span><span class="hljs-selector-class">.event</span><span class="hljs-selector-class">.ApplicationEnvironmentPreparedEvent</span><span class="hljs-selector-attr">[source=org.springframework.boot.SpringApplication@54eb2b70]</span><br><span class="hljs-number">2023</span>-<span class="hljs-number">12</span>-<span class="hljs-number">12</span> <span class="hljs-number">09</span>:<span class="hljs-number">48</span>:<span class="hljs-number">16.621</span> listener finish org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.boot</span><span class="hljs-selector-class">.context</span><span class="hljs-selector-class">.config</span>.DelegatingApplicationListener@<span class="hljs-number">8</span>e50104 org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.boot</span><span class="hljs-selector-class">.context</span><span class="hljs-selector-class">.event</span><span class="hljs-selector-class">.ApplicationEnvironmentPreparedEvent</span><span class="hljs-selector-attr">[source=org.springframework.boot.SpringApplication@54eb2b70]</span><br><span class="hljs-number">2023</span>-<span class="hljs-number">12</span>-<span class="hljs-number">12</span> <span class="hljs-number">09</span>:<span class="hljs-number">48</span>:<span class="hljs-number">16.622</span> listener org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.boot</span><span class="hljs-selector-class">.context</span>.FileEncodingApplicationListener@<span class="hljs-number">74</span>a6f9c1 org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.boot</span><span class="hljs-selector-class">.context</span><span class="hljs-selector-class">.event</span><span class="hljs-selector-class">.ApplicationEnvironmentPreparedEvent</span><span class="hljs-selector-attr">[source=org.springframework.boot.SpringApplication@54eb2b70]</span><br><span class="hljs-number">2023</span>-<span class="hljs-number">12</span>-<span class="hljs-number">12</span> <span class="hljs-number">09</span>:<span class="hljs-number">48</span>:<span class="hljs-number">16.622</span> listener finish org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.boot</span><span class="hljs-selector-class">.context</span>.FileEncodingApplicationListener@<span class="hljs-number">74</span>a6f9c1 org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.boot</span><span class="hljs-selector-class">.context</span><span class="hljs-selector-class">.event</span><span class="hljs-selector-class">.ApplicationEnvironmentPreparedEvent</span><span class="hljs-selector-attr">[source=org.springframework.boot.SpringApplication@54eb2b70]</span><br></code></pre></td></tr></table></figure><p>没想到拖后腿的居然是<code>LoggingApplicationListener</code>，这个类是boot提供的，兜兜转转又回来了，来看看他干了什么</p><p>根据事件类型，定位到119行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onApplicationEnvironmentPreparedEvent</span><span class="hljs-params">(ApplicationEnvironmentPreparedEvent event)</span> &#123;<br>    <span class="hljs-type">SpringApplication</span> <span class="hljs-variable">springApplication</span> <span class="hljs-operator">=</span> event.getSpringApplication();<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.loggingSystem == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-built_in">this</span>.loggingSystem = LoggingSystem.get(springApplication.getClassLoader());<br>    &#125;<br><br>    <span class="hljs-built_in">this</span>.initialize(event.getEnvironment(), springApplication.getClassLoader());<br>&#125;<br></code></pre></td></tr></table></figure><p>继续对方法打点</p><p>最终定位到了<code>org.springframework.boot.system.ApplicationPid</code>第72行 <code>String jvmName = ManagementFactory.getRuntimeMXBean().getName();</code>，就慢在这个 <code>getName()</code> 上，而且只有第一次很慢。另外这行代码下面有过于耗时的一个warn日志，但是现在是在logging初始化阶段，所以这条日志没有输出，让我废了这么大功夫来定位</p><p>简单测试一下，果真是这里，第一次执行能有四五秒</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>    <span class="hljs-type">RuntimeMXBean</span> <span class="hljs-variable">runtimeMXBean</span> <span class="hljs-operator">=</span> ManagementFactory.getRuntimeMXBean();<br>    System.out.println(runtimeMXBean.getName());<br><br>    System.out.println((System.currentTimeMillis() - s));<br>    System.out.println(runtimeMXBean.getName());<br>    System.out.println((System.currentTimeMillis() - s));<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>首先我使用的是mac mini的m2版本，所以解决方案也是针对mac系统，其他系统方法可能不通用</p><p>首先在网上找了个方法，简化为命令行如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">HOSTNAME=$(hostname) sudo echo &quot;127.0.0.1  $HOSTNAME&quot; &gt;&gt; /etc/hosts<br></code></pre></td></tr></table></figure><p>结果未生效</p><p>继续往下深入，可定位到<code>InetAddress.getLocalHost()</code>，这是jdk的方法，没法打点了，再用这行代码为关键字检索</p><p>发现了<a href="https://zhuanlan.zhihu.com/p/570660615">这篇文章</a></p><p>其 hosts 文件写法和我的不一样</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1</span>   localhost Mac-mini.local<br></code></pre></td></tr></table></figure><p>修改一下再测试，成功</p><hr><p>简单测试了一下，只有文章中的写法才有效，只要单独一行都不行</p><p>使用上述测试代码打一个可执行包，放到docker里测试一下</p><p>docker run -it –rm -v ./exec.jar:/s.jar eclipse-temurin:8-jre-ubi9-minimal java -jar /s.jar</p><p>耗时正常</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java枚举的应用</title>
    <link href="/2023/08/19/19Q3283.html"/>
    <url>/2023/08/19/19Q3283.html</url>
    
    <content type="html"><![CDATA[<p>巧用枚举可以简化不少操作</p><span id="more"></span><p>java中的枚举我认为有以下几种用途</p><h2 id="限定范围"><a href="#限定范围" class="headerlink" title="限定范围"></a>限定范围</h2><p>这是枚举最基础的应用，作为参数或者响应可以限制取值范围，过于简单不加赘述</p><h2 id="存储常量"><a href="#存储常量" class="headerlink" title="存储常量"></a>存储常量</h2><p>java中的枚举实际上就是类的简化，所以大多数类的语法都能应用于枚举，比如成员变量和构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Demo</span> &#123;<br><br>    FIRST(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;ok&quot;</span>),<br><br>    SECOND(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;fail&quot;</span>),<br><br>    ;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> code;<br>    <span class="hljs-keyword">private</span> String msg; <br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Demo</span><span class="hljs-params">(<span class="hljs-type">int</span> code,String msg)</span>&#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>        <span class="hljs-built_in">this</span>.msg = msg;<br>    &#125;<br><br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>和一般的常量类比起来，优点是可以将多种常量分组存放，比如http中常见的响应码由code和msg组成，各大框架一般都用枚举来存放</p><p>注意，由于枚举都只有一个实例，所以不能用来存储变量。题外话，rust的枚举可以存放变量，这一点还是很好的</p><h2 id="实现设计模式"><a href="#实现设计模式" class="headerlink" title="实现设计模式"></a>实现设计模式</h2><p>使用枚举可以轻松实现部分设计模式</p><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>用普通类实现的单例模式有可能会被反序列化破坏(话说什么情况下才会去反序列化单例类啊)，而使用枚举可以避免这一点</p><h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><p>策略模式是为了取代大量的if else，枚举也可以简单实现这一点</p><p>因为枚举是类，所以里面也可以有方法，例如这样写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Demo</span> &#123;<br><br>    FIRST(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;ok&quot;</span>)&#123;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">process</span><span class="hljs-params">()</span>&#123;<br>            <span class="hljs-comment">// do something </span><br>        &#125;<br>    &#125;,<br><br>    SECOND(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;fail&quot;</span>)&#123;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">process</span><span class="hljs-params">()</span>&#123;<br>            <span class="hljs-comment">// do something</span><br>        &#125;<br><br>    &#125;,<br><br>    ;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> code;<br>    <span class="hljs-keyword">private</span> String msg; <br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Demo</span><span class="hljs-params">(<span class="hljs-type">int</span> code,String msg)</span>&#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>        <span class="hljs-built_in">this</span>.msg = msg;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">process</span><span class="hljs-params">()</span>&#123;<br><br>    &#125;<br><br>&#125;<br><br><br></code></pre></td></tr></table></figure><hr><p>常规的策略模式一般是将不同逻辑拆分到不同子类，再通过某种方式，比如工厂类来获取某个具体实现；使用枚举实现就只需要传一个枚举值就可以了；</p><p>相比起策略模式动则四五个类，枚举只需要在一个文件——也只能在一个文件——内写完所有逻辑;</p><p>不过缺点也很明显，枚举都是单实例，所以所有依赖都需要在方法参数上写出来，如果不同的实现需要不同的依赖，那参数表会很长，而且修改起来也比较繁琐</p><h3 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h3><p>策略模式取代if else，责任链也可以说是取代循环类</p><p>用枚举实现和上面的代码几乎一模一样，只是在调用的时候写成这样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">for</span>(Demo d: Demo.values())&#123;<br>    d.process();<span class="hljs-comment">// 也可以自行实现责任链中断</span><br>&#125;<br><br></code></pre></td></tr></table></figure><hr><p>相比责任链模式，可以省去注册等流程，而且顺序也可以轻松调整，缺点就是调用上稍微麻烦一些</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Github Action并行构建多架构docker</title>
    <link href="/2023/07/24/3GFZG3W.html"/>
    <url>/2023/07/24/3GFZG3W.html</url>
    
    <content type="html"><![CDATA[<p>利用docker作为rust的开发环境，可以便捷升级，引入依赖，避免对本地环境的污染。为了便捷，使用了github action来构建docker镜像，实现了多架构和快速访问国外网络</p><span id="more"></span><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在原本的构建逻辑中，使用了<a href="https://github.com/docker/build-push-action/">build-push-action</a>来实现多架构构建，但是因为其原理是使用QUME来模拟arm进行串行构建，arm构建非常慢，在我构建四个架构的情况下运行时间超出了action的六小时限制</p><p>因此需要想办法实现并行构建</p><h2 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h2><p>action提供了<strong>matrix</strong>，可以通过提供不同的变量实现并行</p><p><a href="https://github.com/inkroomtemp/util/commit/31c06616160e93bfba2de0bd375fc68328e32814">简单配置一下</a></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">dev:</span><br>  <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-20.04</span><br>  <span class="hljs-attr">permissions:</span> <span class="hljs-string">write-all</span><br>  <span class="hljs-attr">needs:</span> [<span class="hljs-string">version</span>]<br>  <span class="hljs-attr">if:</span> <span class="hljs-string">needs.version.outputs.u</span> <span class="hljs-string">==</span> <span class="hljs-string">&#x27;true&#x27;</span><br>  <span class="hljs-attr">strategy:</span><br>    <span class="hljs-attr">matrix:</span><br>      <span class="hljs-attr">platform:</span> [<span class="hljs-string">linux/386</span>, <span class="hljs-string">linux/amd64</span>, <span class="hljs-string">linux/arm/v7</span>, <span class="hljs-string">linux/arm64</span>]<br>  <span class="hljs-attr">steps:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span> <span class="hljs-string">repository</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v3</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span> <span class="hljs-string">Runtime</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        git clone https://gist.github.com/inkroom/501548078a930c6f3bd98ea257409648 runtime</span><br><span class="hljs-string"></span>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Set</span> <span class="hljs-string">up</span> <span class="hljs-string">QEMU</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">docker/setup-qemu-action@v2</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Set</span> <span class="hljs-string">up</span> <span class="hljs-string">Docker</span> <span class="hljs-string">Buildx</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">docker/setup-buildx-action@v2</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Log</span> <span class="hljs-string">in</span> <span class="hljs-string">to</span> <span class="hljs-string">the</span> <span class="hljs-string">Container</span> <span class="hljs-string">registry</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">docker/login-action@v2</span><br>      <span class="hljs-attr">with:</span><br>        <span class="hljs-attr">registry:</span> <span class="hljs-string">ghcr.io</span><br>        <span class="hljs-attr">username:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">github.repository_owner</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">password:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.GITHUB_TOKEN</span> <span class="hljs-string">&#125;&#125;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Log</span> <span class="hljs-string">in</span> <span class="hljs-string">to</span> <span class="hljs-string">the</span> <span class="hljs-string">Docker</span> <span class="hljs-string">Hub</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">docker/login-action@v2</span><br>      <span class="hljs-attr">with:</span><br>        <span class="hljs-attr">username:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.DOCKER_HUB_USERNAME</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">password:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.DOCKER_HUB_PASSWORD</span> <span class="hljs-string">&#125;&#125;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Extract</span> <span class="hljs-string">metadata</span> <span class="hljs-string">(tags,</span> <span class="hljs-string">labels)</span> <span class="hljs-string">for</span> <span class="hljs-string">Docker</span><br>      <span class="hljs-attr">id:</span> <span class="hljs-string">meta</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">docker/metadata-action@v4</span><br>      <span class="hljs-attr">with:</span><br>        <span class="hljs-attr">images:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          ghcr.io/$&#123;&#123; github.repository_owner &#125;&#125;/rust</span><br><span class="hljs-string">          $&#123;&#123; secrets.DOCKER_HUB_USERNAME &#125;&#125;/rust</span><br><span class="hljs-string"></span>        <span class="hljs-attr">tags:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          type=raw,value=$&#123;&#123; needs.version.outputs.ve &#125;&#125;</span><br><span class="hljs-string"></span>        <span class="hljs-attr">labels:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          org.opencontainers.image.description=rust开发环境-$&#123;&#123; needs.version.outputs.ve &#125;&#125;</span><br><span class="hljs-string">          org.opencontainers.image.title=rust-$&#123;&#123; needs.version.outputs.ve &#125;&#125;</span><br><span class="hljs-string"></span>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Build</span> <span class="hljs-string">Docker</span> <span class="hljs-string">image</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">docker/build-push-action@v4</span><br>      <span class="hljs-attr">with:</span><br>        <span class="hljs-attr">context:</span> <span class="hljs-string">runtime</span><br>        <span class="hljs-attr">file:</span> <span class="hljs-string">runtime/Dockerfile.rust</span><br>        <span class="hljs-attr">push:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">tags:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">steps.meta.outputs.tags</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">labels:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">steps.meta.outputs.labels</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">platforms:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">matrix.platform</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">github-token:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.GITHUB_TOKEN</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">build-args:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          RUST_VERSION=$&#123;&#123; needs.version.outputs.ve &#125;&#125;</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><hr><p>结果就成了每构建成功一个架构，docker hub里面对应tag就会被替换成新镜像，之前push的就会丢失</p><h2 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h2><p>之前的方案之所以会这样，是因为分开构建的镜像不被认为属于同一个tag</p><p>所以尝试使用manifast实现镜像合并</p><p>将不同架构push到不同的tag，然后使用命令实现合并</p><p><a href="https://github.com/inkroomtemp/util/commit/6192641a1fcf32a5e9d5add85d273062d4718a40">新增</a>一个<strong>combine</strong>任务</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">combine:</span><br>  <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-20.04</span><br>  <span class="hljs-attr">permissions:</span> <span class="hljs-string">write-all</span><br>  <span class="hljs-attr">needs:</span> [<span class="hljs-string">version</span>, <span class="hljs-string">dev</span>]<br>  <span class="hljs-comment"># 直接push  会导致 新推送覆盖旧推送，所以只能分开推送到不同tag，最后才采取合并</span><br>  <span class="hljs-attr">if:</span> <span class="hljs-string">needs.version.outputs.u</span> <span class="hljs-string">==</span> <span class="hljs-string">&#x27;true&#x27;</span><br>  <span class="hljs-attr">steps:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span> <span class="hljs-string">repository</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v3</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Log</span> <span class="hljs-string">in</span> <span class="hljs-string">to</span> <span class="hljs-string">the</span> <span class="hljs-string">Container</span> <span class="hljs-string">registry</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">docker/login-action@v2</span><br>      <span class="hljs-attr">with:</span><br>        <span class="hljs-attr">registry:</span> <span class="hljs-string">ghcr.io</span><br>        <span class="hljs-attr">username:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">github.repository_owner</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">password:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.GITHUB_TOKEN</span> <span class="hljs-string">&#125;&#125;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Set</span> <span class="hljs-string">up</span> <span class="hljs-string">Docker</span> <span class="hljs-string">Buildx</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">docker/setup-buildx-action@v2</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Log</span> <span class="hljs-string">in</span> <span class="hljs-string">to</span> <span class="hljs-string">the</span> <span class="hljs-string">Docker</span> <span class="hljs-string">Hub</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">docker/login-action@v2</span><br>      <span class="hljs-attr">with:</span><br>        <span class="hljs-attr">username:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.DOCKER_HUB_USERNAME</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">password:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.DOCKER_HUB_PASSWORD</span> <span class="hljs-string">&#125;&#125;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Create</span> <span class="hljs-string">Manifest</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        docker manifest create --insecure ghcr.io/$&#123;&#123; github.repository_owner &#125;&#125;/rust:$&#123;&#123; needs.version.outputs.ve &#125;&#125; ghcr.io/$&#123;&#123; github.repository_owner &#125;&#125;/rust:amd64 ghcr.io/$&#123;&#123; github.repository_owner &#125;&#125;/rust:386 ghcr.io/$&#123;&#123; github.repository_owner &#125;&#125;/rust:arm-v7 ghcr.io/$&#123;&#123; github.repository_owner &#125;&#125;/rust:arm64</span><br><span class="hljs-string"></span>        <br>        <span class="hljs-string">docker</span> <span class="hljs-string">manifest</span> <span class="hljs-string">annotate</span>  <span class="hljs-string">ghcr.io/$&#123;&#123;</span> <span class="hljs-string">github.repository_owner</span> <span class="hljs-string">&#125;&#125;/rust:$&#123;&#123;</span> <span class="hljs-string">needs.version.outputs.ve</span> <span class="hljs-string">&#125;&#125;</span> <span class="hljs-string">ghcr.io/$&#123;&#123;</span> <span class="hljs-string">github.repository_owner</span> <span class="hljs-string">&#125;&#125;/rust:amd64</span> <span class="hljs-string">--os</span> <span class="hljs-string">linux</span> <span class="hljs-string">--arch</span> <span class="hljs-string">amd64</span> <br>        <span class="hljs-string">docker</span> <span class="hljs-string">manifest</span> <span class="hljs-string">annotate</span>  <span class="hljs-string">ghcr.io/$&#123;&#123;</span> <span class="hljs-string">github.repository_owner</span> <span class="hljs-string">&#125;&#125;/rust:$&#123;&#123;</span> <span class="hljs-string">needs.version.outputs.ve</span> <span class="hljs-string">&#125;&#125;</span> <span class="hljs-string">ghcr.io/$&#123;&#123;</span> <span class="hljs-string">github.repository_owner</span> <span class="hljs-string">&#125;&#125;/rust:386</span> <span class="hljs-string">--os</span> <span class="hljs-string">linux</span> <span class="hljs-string">--arch</span> <span class="hljs-number">386</span><br>        <span class="hljs-string">docker</span> <span class="hljs-string">manifest</span> <span class="hljs-string">annotate</span>  <span class="hljs-string">ghcr.io/$&#123;&#123;</span> <span class="hljs-string">github.repository_owner</span> <span class="hljs-string">&#125;&#125;/rust:$&#123;&#123;</span> <span class="hljs-string">needs.version.outputs.ve</span> <span class="hljs-string">&#125;&#125;</span> <span class="hljs-string">ghcr.io/$&#123;&#123;</span> <span class="hljs-string">github.repository_owner</span> <span class="hljs-string">&#125;&#125;/rust:arm-v7</span> <span class="hljs-string">--os</span> <span class="hljs-string">linux</span> <span class="hljs-string">--arch</span> <span class="hljs-string">arm</span> <span class="hljs-string">--variant</span> <span class="hljs-string">v7</span><br>        <span class="hljs-string">docker</span> <span class="hljs-string">manifest</span> <span class="hljs-string">annotate</span>  <span class="hljs-string">ghcr.io/$&#123;&#123;</span> <span class="hljs-string">github.repository_owner</span> <span class="hljs-string">&#125;&#125;/rust:$&#123;&#123;</span> <span class="hljs-string">needs.version.outputs.ve</span> <span class="hljs-string">&#125;&#125;</span> <span class="hljs-string">ghcr.io/$&#123;&#123;</span> <span class="hljs-string">github.repository_owner</span> <span class="hljs-string">&#125;&#125;/rust:arm64</span> <span class="hljs-string">--os</span> <span class="hljs-string">linux</span> <span class="hljs-string">--arch</span> <span class="hljs-string">arm64</span><br>        <span class="hljs-string">docker</span> <span class="hljs-string">manifest</span> <span class="hljs-string">push</span> <span class="hljs-string">--insecure</span> <span class="hljs-string">ghcr.io/$&#123;&#123;</span> <span class="hljs-string">github.repository_owner</span> <span class="hljs-string">&#125;&#125;/rust:$&#123;&#123;</span> <span class="hljs-string">needs.version.outputs.ve</span> <span class="hljs-string">&#125;&#125;</span><br>        <br>               <br>        <span class="hljs-string">docker</span> <span class="hljs-string">manifest</span> <span class="hljs-string">create</span> <span class="hljs-string">--insecure</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">github.repository_owner</span> <span class="hljs-string">&#125;&#125;/rust:$&#123;&#123;</span> <span class="hljs-string">needs.version.outputs.ve</span> <span class="hljs-string">&#125;&#125;</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">github.repository_owner</span> <span class="hljs-string">&#125;&#125;/rust:amd64</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">github.repository_owner</span> <span class="hljs-string">&#125;&#125;/rust:386</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">github.repository_owner</span> <span class="hljs-string">&#125;&#125;/rust:arm-v7</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">github.repository_owner</span> <span class="hljs-string">&#125;&#125;/rust:arm64</span><br>   <br>        <span class="hljs-string">docker</span> <span class="hljs-string">manifest</span> <span class="hljs-string">annotate</span>  <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">github.repository_owner</span> <span class="hljs-string">&#125;&#125;/rust:$&#123;&#123;</span> <span class="hljs-string">needs.version.outputs.ve</span> <span class="hljs-string">&#125;&#125;</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">github.repository_owner</span> <span class="hljs-string">&#125;&#125;/rust:amd64</span> <span class="hljs-string">--os</span> <span class="hljs-string">linux</span> <span class="hljs-string">--arch</span> <span class="hljs-string">amd64</span> <br>        <span class="hljs-string">docker</span> <span class="hljs-string">manifest</span> <span class="hljs-string">annotate</span>  <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">github.repository_owner</span> <span class="hljs-string">&#125;&#125;/rust:$&#123;&#123;</span> <span class="hljs-string">needs.version.outputs.ve</span> <span class="hljs-string">&#125;&#125;</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">github.repository_owner</span> <span class="hljs-string">&#125;&#125;/rust:386</span> <span class="hljs-string">--os</span> <span class="hljs-string">linux</span> <span class="hljs-string">--arch</span> <span class="hljs-number">386</span><br>        <span class="hljs-string">docker</span> <span class="hljs-string">manifest</span> <span class="hljs-string">annotate</span>  <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">github.repository_owner</span> <span class="hljs-string">&#125;&#125;/rust:$&#123;&#123;</span> <span class="hljs-string">needs.version.outputs.ve</span> <span class="hljs-string">&#125;&#125;</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">github.repository_owner</span> <span class="hljs-string">&#125;&#125;/rust:arm-v7</span> <span class="hljs-string">--os</span> <span class="hljs-string">linux</span> <span class="hljs-string">--arch</span> <span class="hljs-string">arm</span> <span class="hljs-string">--variant</span> <span class="hljs-string">v7</span><br>        <span class="hljs-string">docker</span> <span class="hljs-string">manifest</span> <span class="hljs-string">annotate</span>  <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">github.repository_owner</span> <span class="hljs-string">&#125;&#125;/rust:$&#123;&#123;</span> <span class="hljs-string">needs.version.outputs.ve</span> <span class="hljs-string">&#125;&#125;</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">github.repository_owner</span> <span class="hljs-string">&#125;&#125;/rust:arm64</span> <span class="hljs-string">--os</span> <span class="hljs-string">linux</span> <span class="hljs-string">--arch</span> <span class="hljs-string">arm64</span><br><br>        <span class="hljs-string">docker</span> <span class="hljs-string">manifest</span> <span class="hljs-string">push</span> <span class="hljs-string">--insecure</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">github.repository_owner</span> <span class="hljs-string">&#125;&#125;/rust:$&#123;&#123;</span> <span class="hljs-string">needs.version.outputs.ve</span> <span class="hljs-string">&#125;&#125;</span><br><br></code></pre></td></tr></table></figure><hr><p>执行后出现以下<a href="https://github.com/inkroomtemp/util/actions/runs/5608340637/job/15200531959">错误</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift">ghcr.io<span class="hljs-regexp">/inkroomtemp/</span>rust:amd64 <span class="hljs-keyword">is</span> a manifest list<br></code></pre></td></tr></table></figure><p>猜测是因为构建出来的镜像已经是一个 manifest list，而非manifest，所以不能再套娃了</p><h2 id="方案三"><a href="#方案三" class="headerlink" title="方案三"></a>方案三</h2><p>研究一番后，发现<a href="https://github.com/docker/build-push-action/">build-push-action</a>在readme里提供了一个并行构建的<a href="https://docs.docker.com/build/ci/github-actions/multi-platform/">样例</a></p><hr><p><a href="https://github.com/inkroomtemp/util/actions/runs/5617649190">结果</a>是不能<strong>push by digest</strong></p><p>到处都找不到这个配置的文档，只能放弃</p><h2 id="方案四"><a href="#方案四" class="headerlink" title="方案四"></a>方案四</h2><p>这个方案来自<a href="https://github.com/docker/build-push-action/issues/846">issues</a></p><p>思路是并行构建产物作为缓存，<strong>combine</strong>里引入缓存，完整执行一次普通构建，因为有缓存，所以速度很快，不会超出时间限制</p><p>有一点需要处理，每个matrix构建出的缓存都是一个整体，后面使用的时候需要进行一次合并，就是把缓存目录合并，同时把index.json进行<a href="https://github.com/inkroomtemp/util/commit/f75bf5be54b0abb7dce60e98b841baf67cc74475">合并</a></p><hr><p>结果很不理想，构建依然没用上缓存</p><h2 id="最终方案"><a href="#最终方案" class="headerlink" title="最终方案"></a>最终方案</h2><p>研究半天，最终还是回到方案三</p><p>发现最开始的错误原因是我在初步构建的时候给了tag和image，这个和outputs里的配置冲突了，去掉就可以正常使用了</p><h2 id="2024-04-03"><a href="#2024-04-03" class="headerlink" title="2024-04-03"></a>2024-04-03</h2><p>使用中发现一个奇怪的问题:使用qemu模拟i386,dockerfile中使用命令<code>arch</code>返回的是x86_64,但是包管理器和命令<code>dpkg --print-architecture</code>能返回i386</p><p>没找到原因和解决方案,只能不构建这个架构</p>]]></content>
    
    
    
    <tags>
      
      <tag>rust</tag>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自建git-lfs-server</title>
    <link href="/2023/02/27/10J1G9S.html"/>
    <url>/2023/02/27/10J1G9S.html</url>
    
    <content type="html"><![CDATA[<p>git-lfs是git对于二进制文件管理的一种扩展，可以减小仓库体积。</p><span id="more"></span><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>我的<a href="https://github.com/inkroom/image">图片库</a>由于存放了大量的图片，发现仓库本身高达<strong>5G</strong>，其中 <strong>.git</strong> 目录就占了一半，应该是每一个二进制文件就会有个备份，再加上被删除的文件。</p><p>尝试过重建commit历史，但是依然没减小。</p><p>后来了解到<a href="https://github.com/git-lfs/git-lfs">git-lfs</a>，github的lfs仓库就给<strong>1G</strong>，等于没有，于是准备自建一个。</p><p>由于个人的兴趣爱好原因，准备使用<strong>C</strong>来实现</p><h2 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h2><p>经过一通搜索，找到了一个C的web框架<a href="https://facil.io">facil.io</a>，正常情况下，应该没什么人会用纯C写web，起码也要用C++，所以能找到一个框架真不容易</p><p>C的编译可以命令行，本次选择使用<strong>CMake</strong>。</p><p>开发软件使用<a href="https://code.visualstudio.com/">VSCode</a></p><p>开发环境搭建使用之前搞出来的<a href="https://gist.github.com/inkroom/501548078a930c6f3bd98ea257409648">docker镜像</a>，再用VSCode远程开发</p><p>由于我对CMake完全不熟悉，所以用了一个<a href="https://marketplace.visualstudio.com/items?itemName=ChenPerach.c-cpp-cmake-project-creator">插件</a>来新建项目。</p><hr><p>插件本身只是创建基础的目录结构，启动脚本之类的。源代码初始化需要使用<strong>facil</strong>提供的<a href="https://github.com/boazsegev/facil.io">脚本</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">bash &lt;(curl -s https://raw.githubusercontent.com/boazsegev/facil.io/master/scripts/new/app) appname<br></code></pre></td></tr></table></figure><p>上面的两个步骤需要两个单独的文件夹，之后把脚本创建的目录里的 <strong>.c</strong> 和 <strong>.h</strong> 复制到插件目录里。</p><p>为了引入<strong>facil</strong>依赖，将其源码作为git子模块引入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git submodule add https://github.com/boazsegev/facil.io<br></code></pre></td></tr></table></figure><p>最后目录结构如下</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stylus">. <br>├── CMakeLists<span class="hljs-selector-class">.txt</span> <br>├── LICENSE<br>├── README<span class="hljs-selector-class">.md</span><br>├── facil<span class="hljs-selector-class">.io</span><br>├── include<br>│   ├── cli<span class="hljs-selector-class">.h</span><br>│   ├── http_service<span class="hljs-selector-class">.h</span><br>│   └── <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.h</span><br>└── <span class="hljs-attribute">src</span><br>    ├── cli<span class="hljs-selector-class">.c</span><br>    ├── http_service<span class="hljs-selector-class">.c</span><br>    └── <span class="hljs-selector-tag">main</span>.c<br></code></pre></td></tr></table></figure><h2 id="协议文档"><a href="#协议文档" class="headerlink" title="协议文档"></a>协议文档</h2><p>本次要实现一个最简单的lfs服务器，相关文档可以查看<a href="https://github.com/git-lfs/git-lfs/tree/main/docs/api">lfs仓库</a></p><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p>facil是个基础的web框架，没有路由功能，不过没有正好，本来也不需要那些功能。</p><p>这里只需要实现一个 <strong>Batch</strong> 接口，只需要以下代码就能判断url</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">on_http_request</span><span class="hljs-params">(http_s *h)</span><br>&#123;<br>  <span class="hljs-comment">/* set a response and send it (finnish vs. destroy). */</span><br><br>  fio_str_info_s path = fiobj_obj2cstr(h-&gt;path);<br><br>  fio_str_info_s method = fiobj_obj2cstr(h-&gt;method);<br><br>  fio_str_info_s body = fiobj_obj2cstr(h-&gt;body);<br><br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(path.data, LFS_BATCH_URL_PATH) == <span class="hljs-number">0</span>)<br>  &#123;<br>    batch_request(h);<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>LFS_BATCH_URL_PATH</code>是一个字符串宏，具体内容是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> LFS_BATCH_URL_PATH <span class="hljs-string">&quot;/objects/batch&quot;</span></span><br></code></pre></td></tr></table></figure><p>c语言作为早期的高级语言，功能比较原始。比如字符串是用字符数组——实际上很多更高级的语言也是这样——实现的，所以很多库都需要自己用结构体来定义字符串，上面的<code>fio_str_info_s</code>是<strong>facil</strong>定义的，之后还有别的库定义的字符串</p><h2 id="逻辑"><a href="#逻辑" class="headerlink" title="逻辑"></a>逻辑</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-type">void</span> _batch_request(http_s *h, FIOBJ jsonBody, lfs_item_each each)<br>&#123;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;request 1\n&quot;</span>);<br>    FIOBJ objectsKey = fiobj_str_new(<span class="hljs-string">&quot;objects&quot;</span>, <span class="hljs-built_in">strlen</span>(<span class="hljs-string">&quot;objects&quot;</span>));<br>    FIOBJ objects = fiobj_hash_get(jsonBody, objectsKey);<br><br>    <span class="hljs-keyword">if</span> (!fiobj_type_is(objects, FIOBJ_T_ARRAY))<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;not allowed json body &quot;</span>);<br><br>        fio_free(objects);<br>        fio_free(objectsKey);<br><br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;request 2\n&quot;</span>);<br><br>    <span class="hljs-comment">// 构建要返回的数据结构</span><br>    FIOBJ res = fiobj_hash_new2(<span class="hljs-number">3</span>);<br>    FIOBJ transferKey = fiobj_str_new(<span class="hljs-string">&quot;transfer&quot;</span>, <span class="hljs-built_in">strlen</span>(<span class="hljs-string">&quot;transfer&quot;</span>));<br>    FIOBJ basic = fiobj_str_new(<span class="hljs-string">&quot;basic&quot;</span>, <span class="hljs-built_in">strlen</span>(<span class="hljs-string">&quot;basic&quot;</span>));<br><br>    FIOBJ hash_algo_key = fiobj_str_new(<span class="hljs-string">&quot;hash_algo&quot;</span>, <span class="hljs-built_in">strlen</span>(<span class="hljs-string">&quot;hash_algo&quot;</span>));<br>    FIOBJ sha256 = fiobj_str_new(<span class="hljs-string">&quot;sha256&quot;</span>, <span class="hljs-built_in">strlen</span>(<span class="hljs-string">&quot;sha256&quot;</span>));<br>    fiobj_hash_set(res, transferKey, basic);<br>    fiobj_hash_set(res, hash_algo_key, sha256);<br><br>    <span class="hljs-type">size_t</span> count = fiobj_ary_count(objects);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;request 3&quot;</span>);<br><br>    <span class="hljs-comment">// FIOBJ authenticated = fiobj_str_new(&quot;true&quot;, strlen(&quot;true&quot;));</span><br><br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; count; i++)<br>    &#123;<br>        FIOBJ item = fiobj_ary_index(objects, i);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;request 4\n&quot;</span>);<br><br>        each(item);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;request 5\n&quot;</span>);<br><br>        <span class="hljs-comment">// fio_free(item);</span><br>    &#125;<br><br>    fiobj_hash_set(res, objectsKey, objects);<br>    FIOBJ f = fiobj_obj2json(res, <span class="hljs-number">1</span>);<br>    fio_str_info_s res_str = fiobj_obj2cstr(f);<br>    fiobj_free(f);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;res %s\n&quot;</span>, res_str.data);<br>    FIOBJ contentTypeKey = fiobj_str_new(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-built_in">strlen</span>(<span class="hljs-string">&quot;Content-Type&quot;</span>));<br>    FIOBJ contentType = fiobj_str_new(<span class="hljs-string">&quot;application/vnd.git-lfs+json&quot;</span>, <span class="hljs-built_in">strlen</span>(<span class="hljs-string">&quot;application/vnd.git-lfs+json&quot;</span>));<br>    <span class="hljs-type">int</span> r = http_set_header(h, contentTypeKey, contentType);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;set content type %d\n&quot;</span>, r);<br>    http_send_body(h, res_str.data, res_str.len);<br><br>    fiobj_free(objects);<br>    fiobj_free(objectsKey);<br><br>    fiobj_free(contentTypeKey);<br>    fiobj_free(contentType);<br><br>    fiobj_free(hash_algo_key);<br>    fiobj_free(sha256);<br><br>    fiobj_free(transferKey);<br>    fiobj_free(basic);<br><br>    fiobj_free(res);<br><br>    <span class="hljs-comment">// fio_free(oidKey);</span><br>    <span class="hljs-comment">// fio_free(sizeKey);</span><br>    <span class="hljs-comment">// fio_free(objects);</span><br>    <span class="hljs-comment">// fio_free(objectsKey);</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><p><code>lfs_item_each</code>是一个函数指针，upload和download有不同的实现，由于逻辑本身很简单，不再贴代码了，要看可以直接去<a href="https://github.com/inkroom/git-lfs-server-c">仓库</a></p><h2 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h2><p><strong>git-lfs</strong>本身不负责存储，只是负责提供存储相关的API。本次采用<a href="https://github.com/tencentyun/cos-c-sdk-v5">腾讯云COS</a>作为存储</p><p>需要调用两个核心方法<strong>cos_gen_presigned_url</strong>和<strong>cos_gen_object_url</strong>；一个是上传用url，一个是下载用url。</p><p>COS库本身的编译安装这里略过不提</p><p>由于引入了第三方库，所以需要修改<strong>CMakeLists.txt</strong>，参考cos提供的demo里的，直接把内容拷贝过来，最后就是这样</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><code class="hljs CMake"><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.14</span>)<br><br><br><span class="hljs-keyword">set</span>(PROJECT_N lfs)<br><span class="hljs-keyword">project</span>(<span class="hljs-variable">$&#123;PROJECT_N&#125;</span> VERSION <span class="hljs-number">1.0</span>)<br><br><span class="hljs-keyword">set</span>(CMAKE_C_STANDARD <span class="hljs-number">99</span>)<br><span class="hljs-keyword">set</span>(CMAKE_C_STANDARD_REQUIRED <span class="hljs-keyword">True</span>)<br><span class="hljs-keyword">set</span>(CMAKE_EXPORT_COMPILE_COMMANDS <span class="hljs-keyword">ON</span>) <span class="hljs-comment"># 最好只在debug下生成这个，或者 -DCMAKE_EXPORT_COMPILE_COMMANDS=on</span><br><br><span class="hljs-comment"># if (WIN32 OR MSVC)</span><br><span class="hljs-comment">#     set(CMAKE_FIND_LIBRARY_SUFFIXES &quot;.lib&quot;)</span><br><span class="hljs-comment"># elseif (UNIX)</span><br><span class="hljs-comment">#     # 仅查找静态库，强制后缀为 .a</span><br><span class="hljs-comment">#     set(CMAKE_FIND_LIBRARY_SUFFIXES &quot;.a&quot;)</span><br><br><span class="hljs-comment">#     # 如果只是优先查找静态库，保证 .a 后缀在前面即可，把默认的后缀加上</span><br><span class="hljs-comment">#     # set(CMAKE_FIND_LIBRARY_SUFFIXES .a $&#123;CMAKE_FIND_LIBRARY_SUFFIXES&#125;)</span><br><span class="hljs-comment"># endif()</span><br><br><br><span class="hljs-keyword">file</span>(GLOB_RECURSE SRCS <span class="hljs-variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src/*.c)<br><br><span class="hljs-comment"># a macro that gets all of the header containing directories. </span><br><span class="hljs-keyword">MACRO</span>(header_directories return_list includes_base_folder extention)<br>    <span class="hljs-keyword">FILE</span>(GLOB_RECURSE new_list <span class="hljs-variable">$&#123;includes_base_folder&#125;</span>/*.<span class="hljs-variable">$&#123;extention&#125;</span>)<br>    <span class="hljs-keyword">SET</span>(dir_list <span class="hljs-string">&quot;&quot;</span>)<br>    <span class="hljs-keyword">FOREACH</span>(file_path <span class="hljs-variable">$&#123;new_list&#125;</span>)<br>        <span class="hljs-keyword">GET_FILENAME_COMPONENT</span>(dir_path <span class="hljs-variable">$&#123;file_path&#125;</span> PATH)<br>        <span class="hljs-keyword">SET</span>(dir_list <span class="hljs-variable">$&#123;dir_list&#125;</span> <span class="hljs-variable">$&#123;dir_path&#125;</span>)<br>    <span class="hljs-keyword">ENDFOREACH</span>()<br>    <span class="hljs-keyword">LIST</span>(REMOVE_DUPLICATES dir_list)<br>    <span class="hljs-keyword">SET</span>(<span class="hljs-variable">$&#123;return_list&#125;</span> <span class="hljs-variable">$&#123;dir_list&#125;</span>)<br><span class="hljs-keyword">ENDMACRO</span>()<br><span class="hljs-comment"># a macro that gets all of the header containing directories.</span><br>header_directories(INCLUDES <span class="hljs-variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="hljs-keyword">include</span>/ h)<br><br><span class="hljs-comment"># include(FetchContent)</span><br><span class="hljs-comment"># FetchContent_Declare(curl</span><br><span class="hljs-comment">#         GIT_REPOSITORY https://github.com/curl/curl.git</span><br><span class="hljs-comment">#         GIT_TAG 7.88.1)</span><br><span class="hljs-comment"># FetchContent_MakeAvailable(curl)</span><br><br><span class="hljs-comment"># add_subdirectory(cos-c-sdk-v5)</span><br><br><br><span class="hljs-comment"># find_package(libcos_c_sdk)</span><br><br><br><br><span class="hljs-keyword">FIND_PROGRAM</span>(APR_CONFIG_BIN NAMES apr-config apr-<span class="hljs-number">1</span>-config PATHS /usr/bin /usr/local/bin /usr/local/apr/bin/)<br><span class="hljs-keyword">FIND_PROGRAM</span>(APU_CONFIG_BIN NAMES apu-config apu-<span class="hljs-number">1</span>-config PATHS /usr/bin /usr/local/bin /usr/local/apr/bin/)<br><br><span class="hljs-keyword">IF</span> (APR_CONFIG_BIN)<br>    <span class="hljs-keyword">EXECUTE_PROCESS</span>(<br>        <span class="hljs-keyword">COMMAND</span> <span class="hljs-variable">$&#123;APR_CONFIG_BIN&#125;</span> --includedir<br>        OUTPUT_VARIABLE APR_INCLUDE_DIR<br>        OUTPUT_STRIP_TRAILING_WHITESPACE<br>    )<br>    <span class="hljs-keyword">EXECUTE_PROCESS</span>(<br>        <span class="hljs-keyword">COMMAND</span> <span class="hljs-variable">$&#123;APR_CONFIG_BIN&#125;</span> --cflags<br>        OUTPUT_VARIABLE APR_C_FLAGS<br>        OUTPUT_STRIP_TRAILING_WHITESPACE<br>    )<br>    <span class="hljs-keyword">EXECUTE_PROCESS</span>(<br>        <span class="hljs-keyword">COMMAND</span> <span class="hljs-variable">$&#123;APR_CONFIG_BIN&#125;</span> --link-ld<br>        OUTPUT_VARIABLE APR_LIBRARIES<br>        OUTPUT_STRIP_TRAILING_WHITESPACE<br>    )<br><span class="hljs-keyword">ELSE</span>()<br>    <span class="hljs-keyword">MESSAGE</span>(FATAL_ERROR <span class="hljs-string">&quot;Could not find apr-config/apr-1-config&quot;</span>)<br><span class="hljs-keyword">ENDIF</span>()<br><br><span class="hljs-keyword">IF</span> (APU_CONFIG_BIN)<br>    <span class="hljs-keyword">EXECUTE_PROCESS</span>(<br>        <span class="hljs-keyword">COMMAND</span> <span class="hljs-variable">$&#123;APU_CONFIG_BIN&#125;</span> --includedir<br>        OUTPUT_VARIABLE APR_UTIL_INCLUDE_DIR<br>        OUTPUT_STRIP_TRAILING_WHITESPACE<br>    )<br>    <span class="hljs-keyword">EXECUTE_PROCESS</span>(<br>        <span class="hljs-keyword">COMMAND</span> <span class="hljs-variable">$&#123;APU_CONFIG_BIN&#125;</span> --cflags<br>        OUTPUT_VARIABLE APU_C_FLAGS<br>        OUTPUT_STRIP_TRAILING_WHITESPACE<br>    )<br>    <span class="hljs-keyword">EXECUTE_PROCESS</span>(<br>        <span class="hljs-keyword">COMMAND</span> <span class="hljs-variable">$&#123;APU_CONFIG_BIN&#125;</span> --link-ld<br>        OUTPUT_VARIABLE APU_LIBRARIES<br>        OUTPUT_STRIP_TRAILING_WHITESPACE<br>    )<br><span class="hljs-keyword">ELSE</span>()<br>    <span class="hljs-keyword">MESSAGE</span>(FATAL_ERROR <span class="hljs-string">&quot;Could not find apu-config/apu-1-config&quot;</span>)<br><span class="hljs-keyword">ENDIF</span>()<br><br><span class="hljs-comment">#curl-config</span><br><span class="hljs-keyword">FIND_PROGRAM</span>(CURL_CONFIG_BIN NAMES curl-config)<br>  <br><span class="hljs-keyword">IF</span> (CURL_CONFIG_BIN)<br>    <span class="hljs-keyword">EXECUTE_PROCESS</span>(<br>        <span class="hljs-keyword">COMMAND</span> <span class="hljs-variable">$&#123;CURL_CONFIG_BIN&#125;</span> --libs<br>        OUTPUT_VARIABLE CURL_LIBRARIES<br>        OUTPUT_STRIP_TRAILING_WHITESPACE<br>        )<br><span class="hljs-keyword">ELSE</span>()<br>    <span class="hljs-keyword">MESSAGE</span>(FATAL_ERROR <span class="hljs-string">&quot;Could not find curl-config&quot;</span>)<br><span class="hljs-keyword">ENDIF</span>()<br><span class="hljs-comment"># set(CURL_LIBRARY &quot;-lcurl&quot;) </span><br><span class="hljs-comment"># find_package(CURL REQUIRED) </span><br><br><span class="hljs-keyword">include_directories</span> (<span class="hljs-variable">$&#123;APR_INCLUDE_DIR&#125;</span>)<br><span class="hljs-keyword">include_directories</span> (<span class="hljs-variable">$&#123;APR_UTIL_INCLUDE_DIR&#125;</span>)<br><span class="hljs-keyword">include_directories</span> (<span class="hljs-variable">$&#123;MINIXML_INCLUDE_DIR&#125;</span>)<br><span class="hljs-keyword">include_directories</span> (<span class="hljs-variable">$&#123;CURL_INCLUDE_DIR&#125;</span>)<br><span class="hljs-comment"># include_directories(&quot;include/curl&quot;)</span><br><span class="hljs-comment"># message(&quot;url $&#123;CURL_INCLUDE_DIRS&#125;&quot;)</span><br><span class="hljs-keyword">include_directories</span> (<span class="hljs-string">&quot;/usr/local/include/cos_c_sdk&quot;</span>)<br><br><span class="hljs-keyword">find_library</span>(APR_LIBRARY apr-<span class="hljs-number">1</span> PATHS /usr/local/apr/lib/)<br><span class="hljs-keyword">find_library</span>(APR_UTIL_LIBRARY aprutil-<span class="hljs-number">1</span> PATHS /usr/local/apr/lib/)<br><span class="hljs-keyword">find_library</span>(MINIXML_LIBRARY mxml)<br><span class="hljs-keyword">find_library</span>(CURL_LIBRARY curl)<br><span class="hljs-keyword">find_library</span>(COS_LIBRARY cos_c_sdk PATHS /usr/local/lib/)<br><br><span class="hljs-keyword">add_subdirectory</span>(facil.io)<br><span class="hljs-keyword">message</span>(STATUS <span class="hljs-variable">$&#123;SRCS&#125;</span>)<br><span class="hljs-keyword">add_executable</span>(<span class="hljs-variable">$&#123;PROJECT_N&#125;</span> <span class="hljs-variable">$&#123;SRCS&#125;</span>)<br><br><span class="hljs-keyword">target_include_directories</span>(<span class="hljs-variable">$&#123;PROJECT_N&#125;</span> PUBLIC <span class="hljs-keyword">include</span> )<br><span class="hljs-keyword">target_link_libraries</span>(<span class="hljs-variable">$&#123;PROJECT_N&#125;</span> facil.io)<br><span class="hljs-comment"># target_link_libraries($&#123;PROJECT_N&#125; PRIVATE  cos_c_sdk::cos_c_sdk)</span><br><span class="hljs-keyword">target_link_libraries</span>(<span class="hljs-variable">$&#123;PROJECT_N&#125;</span> <span class="hljs-variable">$&#123;COS_LIBRARY&#125;</span>)<br><span class="hljs-keyword">target_link_libraries</span>(<span class="hljs-variable">$&#123;PROJECT_N&#125;</span> <span class="hljs-variable">$&#123;APR_UTIL_LIBRARY&#125;</span>)<br><span class="hljs-keyword">target_link_libraries</span>(<span class="hljs-variable">$&#123;PROJECT_N&#125;</span> <span class="hljs-variable">$&#123;APR_LIBRARY&#125;</span>)<br><span class="hljs-keyword">target_link_libraries</span>(<span class="hljs-variable">$&#123;PROJECT_N&#125;</span> <span class="hljs-variable">$&#123;MINIXML_LIBRARY&#125;</span>)<br><br><span class="hljs-comment"># target_link_libraries($&#123;PROJECT_N&#125; curl)</span><br><span class="hljs-keyword">target_link_libraries</span>(<span class="hljs-variable">$&#123;PROJECT_N&#125;</span> <span class="hljs-variable">$&#123;CURL_LIBRARY&#125;</span>)<br><br></code></pre></td></tr></table></figure><h2 id="docker镜像"><a href="#docker镜像" class="headerlink" title="docker镜像"></a>docker镜像</h2><p>C程序过于依赖环境，所以最好使用docker镜像来运行构建产物。</p><p>采用docker<strong>多阶段构建</strong>，对docker版本要求较高，公司的测试服务器版本就很低，不支持该特性</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs Dockerfile"><span class="hljs-keyword">FROM</span> ubuntu:<span class="hljs-number">20.04</span><br><span class="hljs-keyword">ENV</span> TZ=Asia/Shanghai<br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">ln</span> -snf /usr/share/zoneinfo/<span class="hljs-variable">$TZ</span> /etc/localtime &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-variable">$TZ</span> &gt; /etc/timezone &amp;&amp; <span class="hljs-built_in">export</span> DEBIAN_FRONTEND=noninteractive</span><br><span class="hljs-comment"># libapr1-dev</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> sed -i <span class="hljs-string">&quot;s@http://.*archive.ubuntu.com@http://mirrors.huaweicloud.com@g&quot;</span> /etc/apt/sources.list \</span><br><span class="language-bash">    &amp;&amp; sed -i <span class="hljs-string">&quot;s@http://.*security.ubuntu.com@http://mirrors.huaweicloud.com@g&quot;</span> /etc/apt/sources.list \</span><br><span class="language-bash">    &amp;&amp; apt update -y &amp;&amp; apt upgrade -y</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> apt install -y cmake g++  libaprutil1-dev libcurl4-openssl-dev curl wget git libssl-dev</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> wget https://github.com/michaelrsweet/mxml/releases/download/v3.3.1/mxml-3.3.1.tar.gz \</span><br><span class="language-bash">    &amp;&amp; tar -zxf mxml-3.3.1.tar.gz &amp;&amp; <span class="hljs-built_in">cd</span> mxml-3.3.1 &amp;&amp; ./configure  &amp;&amp; make &amp;&amp; make install</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> wget https://dlcdn.apache.org/apr/apr-1.7.2.tar.gz \</span><br><span class="language-bash">    &amp;&amp; tar -zxf apr-1.7.2.tar.gz &amp;&amp; <span class="hljs-built_in">cd</span> apr-1.7.2 &amp;&amp; ./configure  &amp;&amp; make &amp;&amp; make install</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> wget https://github.com/tencentyun/cos-c-sdk-v5/archive/refs/tags/v5.0.16.tar.gz \</span><br><span class="language-bash">    &amp;&amp; tar -zxf v5.0.16.tar.gz &amp;&amp; <span class="hljs-built_in">cd</span> cos-c-sdk-v5-5.0.16 &amp;&amp; cmake .  &amp;&amp; make &amp;&amp; make install</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> wget https://curl.se/download/curl-7.88.1.tar.gz</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> apt install -y libssl-dev</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> tar -zxf curl-7.88.1.tar.gz &amp;&amp; <span class="hljs-built_in">cd</span> curl-7.88.1/ &amp;&amp; ./configure --disable-ldap --disable-ldaps --with-openssl &amp;&amp; make &amp;&amp; make install</span><br><br><span class="hljs-keyword">ADD</span><span class="language-bash"> . /data</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">cd</span> /data &amp;&amp; git submodule update --init --recursive &amp;&amp; <span class="hljs-built_in">mkdir</span> /data/build &amp;&amp; <span class="hljs-built_in">cd</span> /data/build &amp;&amp; cmake .. &amp;&amp; make &amp;&amp; <span class="hljs-built_in">chmod</span> +x lfs &amp;&amp; <span class="hljs-built_in">cp</span> ../entrypoint.sh ./ &amp;&amp; <span class="hljs-built_in">chmod</span> +x entrypoint.sh  &amp;&amp; <span class="hljs-built_in">cp</span> ../pack.sh ./  &amp;&amp; <span class="hljs-built_in">mkdir</span> lib &amp;&amp; sh pack.sh  </span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> </span><br><br><br><br><br><br><span class="hljs-keyword">FROM</span> ubuntu:<span class="hljs-number">20.04</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> --from=0  /data/build/ /lfs</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">3000</span><br><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="hljs-string">&quot;/lfs/entrypoint.sh&quot;</span>]</span><br></code></pre></td></tr></table></figure><hr><p>有几点需要注意，现在都是动态编译的，单个文件无法运行，需要一堆.so动态库，所以需要使用<code>pack.sh</code>来拷贝依赖，<code>entrypoint.sh</code>来运行程序</p><p><strong>pack.sh</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">exe=&quot;lfs&quot; # 这里是最终构建的可执行程序的名字<br>des=&quot;$(pwd)/lib&quot;<br>echo $des<br>deplist=$(ldd $exe | awk &#x27;&#123;if (match($3,&quot;/&quot;))&#123; printf(&quot;%s &quot;),$3 &#125; &#125;&#x27;)<br>cp $deplist $des<br></code></pre></td></tr></table></figure><p><strong>entrypoint.sh</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh</span><br>dirname=`dirname $0`<br>tmp=&quot;$&#123;dirname#?&#125;&quot;<br>if [ &quot;$&#123;dirname%$tmp&#125;&quot; != &quot;/&quot; ]; then<br>dirname=$PWD/$dirname<br>fi<br>LD_LIBRARY_PATH=$dirname/lib<br>export LD_LIBRARY_PATH<br>echo $LD_LIBRARY_PATH<br><span class="hljs-meta prompt_">$</span><span class="language-bash"><span class="hljs-built_in">dirname</span>/lfs <span class="hljs-string">&quot;<span class="hljs-variable">$@</span>&quot;</span></span><br></code></pre></td></tr></table></figure><p>基础原理就是告诉Linux系统去哪里找对应的动态库文件。</p><p>但是上面拷贝的动态库实际上是不全的，缺少<strong>glibc</strong>，这一部分一般由操作系统提供，所以最终使用的运行镜像是<strong>Ubuntu:20.04</strong>，不能使用诸如<strong>alpine</strong>、<strong>busybox</strong>之类的精简镜像，因为没有匹配的环境</p><h2 id="静态编译"><a href="#静态编译" class="headerlink" title="静态编译"></a>静态编译</h2><p>由于动态库下最终镜像体积高达<strong>87MB</strong>，实在是太大了，所以尝试使用静态编译，然后更新精简镜像来缩小体积</p><p>想要实现动态编译，就要告诉CMake去查找 <strong>.a</strong> 文件，可以添加以下代码</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs CMake"><span class="hljs-keyword">if</span> (WIN32 <span class="hljs-keyword">OR</span> MSVC)<br>    <span class="hljs-keyword">set</span>(CMAKE_FIND_LIBRARY_SUFFIXES <span class="hljs-string">&quot;.lib&quot;</span>)<br><span class="hljs-keyword">elseif</span> (UNIX)<br>    <span class="hljs-comment"># 仅查找静态库，强制后缀为 .a</span><br>    <span class="hljs-keyword">set</span>(CMAKE_FIND_LIBRARY_SUFFIXES <span class="hljs-string">&quot;.a&quot;</span>)<br><br><span class="hljs-comment">#     # 如果只是优先查找静态库，保证 .a 后缀在前面即可，把默认的后缀加上</span><br><span class="hljs-comment">#     # set(CMAKE_FIND_LIBRARY_SUFFIXES .a $&#123;CMAKE_FIND_LIBRARY_SUFFIXES&#125;)</span><br><span class="hljs-keyword">endif</span>()<br><br></code></pre></td></tr></table></figure><p>注意 cos 库的 .a 文件名与常规命名规则不同，修改一下</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CMake"><span class="hljs-keyword">find_library</span>(COS_LIBRARY libcos_c_sdk_static.a PATHS /usr/local/lib/)<br></code></pre></td></tr></table></figure><hr><p>由于我不知道的原因，静态编译需要把动态编译下不需要关心的依赖的依赖也给加进来，这里主要是 <strong>liburl</strong> 的一些依赖</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs CMake"><br><span class="hljs-keyword">find_library</span>(IDN_LIBRARY idn)<br><span class="hljs-keyword">find_library</span>(SSL_LIBRARY ssl)<br><span class="hljs-keyword">find_library</span>(C_LIBRARY crypto)<br><span class="hljs-keyword">find_library</span>(DL_LIBRARY dl)<br><br><br><span class="hljs-keyword">target_link_libraries</span>(<span class="hljs-variable">$&#123;LIBRARY_N&#125;</span> <span class="hljs-variable">$&#123;IDN_LIBRARY&#125;</span> <span class="hljs-variable">$&#123;SSL_LIBRARY&#125;</span> <span class="hljs-variable">$&#123;C_LIBRARY&#125;</span> <span class="hljs-variable">$&#123;DL_LIBRARY&#125;</span> <span class="hljs-variable">$&#123;THREAD_LIBRARY&#125;</span>)<br><br></code></pre></td></tr></table></figure><p>Docker镜像可以使用<strong>busybox</strong>，我还调整curl编译参数，去掉一些不需要的功能。最终产物就只有<strong>12.1MB</strong>了，比较完美</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>可以使用github actions来构建docker镜像，并发布到github packages，这里不再赘述</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://github.com/git-lfs/git-lfs">git-lfs</a></li><li><a href="https://zhuanlan.zhihu.com/p/511750788">自行构建GIT LFS服务</a></li><li><a href="https://zhuanlan.zhihu.com/p/437865866">https://zhuanlan.zhihu.com/p/437865866</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>lfs</tag>
      
      <tag>cmake</tag>
      
      <tag>c</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用github actions更新存储库</title>
    <link href="/2023/02/17/X0B93.html"/>
    <url>/2023/02/17/X0B93.html</url>
    
    <content type="html"><![CDATA[<p>我在我的<a href="https://github.com/inkroom/image">图片存储库</a>里搞了个列表用于存储文件列表，由于每次上传图片后需要手动执行一些操作，比较繁琐，最终想到利用github actions来实现</p><span id="more"></span><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在我的<a href="https://github.com/inkroom/image">图片库</a>里，有个list文件夹，按上传顺序存储图片列表和对应的图床地址。</p><p>实际上，这个图片存储方案改过几次了。</p><p>最早存在云服务oss里，自己写个web服务用于上传、浏览，但是后来云服务器到期了，这套方案就没法用了。</p><p>然后又使用github pages服务，把图片存在仓库里，然后写个静态页面，借用github pages服务，和github的api，实现了完全免费的图片相册。</p><p>但是github访问速度比较慢，因此考虑过gitee，但是图片库体积超过了gitee的限制。借着服务器打折的机会，又买了服务器，这次采用的方案是把网站和图片备份放到服务器上，然后再通过webhook的方式同步图片库，这样速度上去了，也不用担心服务器故障导致图片丢失。</p><p>但是又有新问题，图片列表如果调用github的api的话，排序规则不由我决定，不能实现新上传的图片在前面。</p><p>最终方案是在图片库里新建文件夹专门存放图片列表，这样顺序就有了。后来又搞了一个图床用作缩略图，还是把数据放这个文件夹里。</p><hr><p>于是上传操作就变得比较繁琐。</p><p>首先添加要上传的图片，然后手动上传到图床，接着修改list文件，最后push。后面的同步借用webhook机制，不用管</p><h2 id="actions"><a href="#actions" class="headerlink" title="actions"></a>actions</h2><p>后来比较偶然的机会知道了github actions，其实还有别的免费自动化CI/CD，但是需要到第三方网站使用，不如github本身的便捷</p><p>相关代码比较简单，直接参考<a href="https://github.com/inkroom/image/blob/master/.github/workflows/list.yml">仓库</a></p><p>为了限定获取到上传的文件的commit范围，每次成功后会写入一个<strong>commit sha</strong>到 <strong>.sha</strong> 文件</p><p>需要注意的是，想要在github actions里push代码，需要配置 <strong>GITHUB_TOKEN</strong> 的权限，在<a href="https://github.com/inkroom/image/settings/actions">https://github.com/inkroom/image/settings/actions</a>的 <strong>Workflow permissions</strong> 选中 <strong>Read and write permissions</strong></p><p>借用 github actions 有个好处是不用关注网络问题了，不需要镜像，不需要代理</p><p>最后只需要添加图片后<strong>push</strong>就行了</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>这里顺便提供一份配置，用于重建仓库以减小仓库体积</p><p>在 <strong>.github/workflows/</strong> 下新建<strong>clean.yml</strong></p><p>由于需要使用ssh，还需要将ssh私钥配置到actions secrets</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">clean</span><br><br><span class="hljs-comment"># Controls when the workflow will run</span><br><span class="hljs-attr">on:</span><br>  <span class="hljs-comment"># Triggers the workflow on push or pull request events but only for the &quot;main&quot; branch</span><br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span> [ <span class="hljs-string">&quot;master&quot;</span> ]<br>  <span class="hljs-attr">pull_request:</span><br>    <span class="hljs-attr">branches:</span> [ <span class="hljs-string">&quot;master&quot;</span> ]<br><br>  <span class="hljs-comment"># Allows you to run this workflow manually from the Actions tab</span><br>  <span class="hljs-attr">workflow_dispatch:</span><br><br><span class="hljs-comment"># A workflow run is made up of one or more jobs that can run sequentially or in parallel</span><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-comment"># This workflow contains a single job called &quot;build&quot;</span><br>  <span class="hljs-attr">clean:</span><br>    <span class="hljs-comment"># The type of runner that the job will run on</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-20.04</span><br><br>    <span class="hljs-comment"># Steps represent a sequence of tasks that will be executed as part of the job</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Encoding</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          git config --global i18n.logoutputencoding utf-8</span><br><span class="hljs-string">          git config --global i18n.commitencoding utf-8</span><br><span class="hljs-string">          git config --global core.quotepath false</span><br><span class="hljs-string">          git config --global http.version HTTP/1.1</span><br><span class="hljs-string">          git config --global http.postBuffer 524288000</span><br><span class="hljs-string">          export LESSCHARSET=utf-8</span><br><span class="hljs-string"></span>      <span class="hljs-comment"># Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v3</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">ssh-key:</span> <span class="hljs-string">$&#123;&#123;</span>  <span class="hljs-string">secrets.SSH_PR</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-comment"># We need to fetch all branches and commits so that Nx affected has a base to compare against.</span><br>          <span class="hljs-attr">fetch-depth:</span> <span class="hljs-number">0</span><br>      <span class="hljs-comment"># - name: Last Success SHA</span><br>      <span class="hljs-comment">#   uses: nrwl/nx-set-shas@v3</span><br>      <span class="hljs-comment">#   id: sha</span><br>      <span class="hljs-comment">#   with:</span><br>      <span class="hljs-comment">#     main-branch-name: &quot;master&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Clean</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          git remote set-url origin git@github.com:/inkroom/image.git</span><br><span class="hljs-string">          git config http.version HTTP/1.1</span><br><span class="hljs-string">          git config http.postBuffer 5242880000</span><br><span class="hljs-string">          git checkout --orphan clean</span><br><span class="hljs-string">          rm .github/workflows/clean.yml</span><br><span class="hljs-string">          git config user.email &quot;enpassPixiv@protonmail.com&quot;</span><br><span class="hljs-string">          git config user.name &quot;inkbox&quot;</span><br><span class="hljs-string">          #  因为一次全部commit会超出github限制,所以需要分成多次提交 首先把单独的文件都提交了</span><br><span class="hljs-string">          git rm --cached -f -r .</span><br><span class="hljs-string">          for file in *</span><br><span class="hljs-string">          do</span><br><span class="hljs-string">            if [ -f &quot;$(pwd)/$file&quot; ]</span><br><span class="hljs-string">            then</span><br><span class="hljs-string">              echo &quot;添加文件 $file&quot;</span><br><span class="hljs-string">              git add &quot;$file&quot;</span><br><span class="hljs-string">            fi</span><br><span class="hljs-string">          done</span><br><span class="hljs-string"></span><br>          <span class="hljs-string">git</span> <span class="hljs-string">commit</span> <span class="hljs-string">-m</span> <span class="hljs-string">&quot;clean&quot;</span><br>          <span class="hljs-string">git</span> <span class="hljs-string">branch</span> <span class="hljs-string">-D</span> <span class="hljs-string">master</span><br>          <span class="hljs-string">git</span> <span class="hljs-string">branch</span> <span class="hljs-string">-m</span> <span class="hljs-string">master</span><br>          <span class="hljs-string">git</span> <span class="hljs-string">push</span> <span class="hljs-string">-f</span> <span class="hljs-string">origin</span> <span class="hljs-string">master</span><br><br>          <span class="hljs-comment">## 文件夹依次提交</span><br><br>          <span class="hljs-string">for</span> <span class="hljs-string">file</span> <span class="hljs-string">in</span> <span class="hljs-string">*</span><br>          <span class="hljs-string">do</span><br>            <span class="hljs-string">if</span> [ <span class="hljs-string">-d</span> <span class="hljs-string">&quot;$(pwd)/$file&quot;</span> ]<br>            <span class="hljs-string">then</span><br>              <span class="hljs-string">if</span> [ <span class="hljs-string">&quot;$file&quot;</span> <span class="hljs-type">!=</span> <span class="hljs-string">&#x27;.git&#x27;</span> ]<br>              <span class="hljs-string">then</span><br>                <span class="hljs-string">echo</span> <span class="hljs-string">&quot;添加文件夹 $file&quot;</span><br>                <span class="hljs-string">git</span> <span class="hljs-string">add</span> <span class="hljs-string">&quot;$file&quot;</span><br>                <span class="hljs-string">git</span> <span class="hljs-string">commit</span> <span class="hljs-string">-m</span> <span class="hljs-string">&quot;clean:$file&quot;</span><br>           <span class="hljs-comment">#     git push origin master</span><br>              <span class="hljs-string">fi</span><br>            <span class="hljs-string">fi</span><br>          <span class="hljs-string">done</span><br><br>          <span class="hljs-string">echo</span> <span class="hljs-string">$(git</span> <span class="hljs-string">show</span> <span class="hljs-string">-s</span> <span class="hljs-string">--format=%H)</span> <span class="hljs-string">&gt;</span> <span class="hljs-string">.github/.sha</span><br>          <span class="hljs-string">git</span> <span class="hljs-string">add</span> <span class="hljs-string">.github/.sha</span><br>          <span class="hljs-string">git</span> <span class="hljs-string">commit</span> <span class="hljs-string">-m</span> <span class="hljs-string">&quot;clean:sha&quot;</span><br>          <span class="hljs-string">git</span> <span class="hljs-string">log</span><br>          <span class="hljs-string">git</span> <span class="hljs-string">push</span> <span class="hljs-string">origin</span> <span class="hljs-string">master</span><br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>github</tag>
      
      <tag>node</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>james源码解析（四）</title>
    <link href="/2022/11/15/0A214P.html"/>
    <url>/2022/11/15/0A214P.html</url>
    
    <content type="html"><![CDATA[<p>在测试过程中发现了james一个不那么友好的地方，略微做一些修改</p><span id="more"></span><p>在测试james的过程中，我尝试向<strong><a href="mailto:general-subscribe@james.apache.org">general-subscribe@james.apache.org</a></strong>（james的一个邮件列表）发送邮件，结果邮件始终无法送达，debug之后发现是apache服务器拒绝了命令</p><p>拒绝的是 helo命令和echo 命令会传输一个 hostname，默认情况取得是主机名称，因此给拒绝了。</p><p>修改 <strong>mailetcontainer.xml</strong>中的<strong>RemoteDelivery</strong>，添加一个属性 <strong>heloName</strong>，最终结果如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">processor</span> <span class="hljs-attr">state</span>=<span class="hljs-string">&quot;relay&quot;</span> <span class="hljs-attr">enableJmx</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mailet</span> <span class="hljs-attr">match</span>=<span class="hljs-string">&quot;All&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;RemoteDelivery&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">outgoingQueue</span>&gt;</span>outgoing<span class="hljs-tag">&lt;/<span class="hljs-name">outgoingQueue</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">delayTime</span>&gt;</span>5000, 100000, 500000<span class="hljs-tag">&lt;/<span class="hljs-name">delayTime</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maxRetries</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">maxRetries</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maxDnsProblemRetries</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">maxDnsProblemRetries</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">deliveryThreads</span>&gt;</span>10<span class="hljs-tag">&lt;/<span class="hljs-name">deliveryThreads</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">sendpartial</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">sendpartial</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bounceProcessor</span>&gt;</span>bounces<span class="hljs-tag">&lt;/<span class="hljs-name">bounceProcessor</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">heloName</span>&gt;</span>smtp.domain.com<span class="hljs-tag">&lt;/<span class="hljs-name">heloName</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mailet</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">processor</span>&gt;</span><br></code></pre></td></tr></table></figure><p>本以为这样就可以了，继续测试发现出现了另一个错误</p><blockquote><p>Client host rejected: cannot find your reverse hostname</p></blockquote><p>查了一下该问题无解，因为要解决该问题，需要给出口ip做反向域名解析，绑定到<strong>heloName</strong>上，然而这是一项收费服务，而且还很贵。</p><hr><p>邮件发不出去没关系，但是消息提醒需要有啊，在测试过程中，我确实收到过一次错误邮件，但是邮件内容只有以下信息有用</p><blockquote><p>Error message:<br>Too many retries failure. Bouncing after 3 retries.</p></blockquote><p>意思是重试了三次依然失败，但是没有错误原因，这就很不方便。因此我准备改造一下</p><hr><p>投递出错的处理在<code>DeliveryRunnable</code>的第153行 <code>handleTemporaryFailure</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@VisibleForTesting</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">attemptDelivery</span><span class="hljs-params">(Mail mail)</span> <span class="hljs-keyword">throws</span> MailQueue.MailQueueException &#123;<br>    <span class="hljs-type">ExecutionResult</span> <span class="hljs-variable">executionResult</span> <span class="hljs-operator">=</span> mailDelivrer.deliver(mail);<br>    <span class="hljs-keyword">switch</span> (executionResult.getExecutionState()) &#123;<br>        <span class="hljs-keyword">case</span> SUCCESS:<br>            outgoingMailsMetric.increment();<br>            configuration.getOnSuccess()<br>                .ifPresent(Throwing.consumer(onSuccess -&gt; mailetContext.sendMail(mail, onSuccess)));<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> TEMPORARY_FAILURE:<br>            handleTemporaryFailure(mail, executionResult);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> PERMANENT_FAILURE:<br>            handlePermanentFailure(mail, executionResult);<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>里面负责判断重试次数，如果达标，则交给<code>Bouncer</code>处理，<code>Bouncer</code>会修改邮件状态，然后转给别的处理器处理。默认配置下最终转给了<code>DSNBounce</code></p><p>研究了一下代码，在<code>Bouncer</code>的第62行，就已经把真正有用的错误堆栈信息给处理掉了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bounce</span><span class="hljs-params">(Mail mail, Exception ex)</span> &#123;<br>    <span class="hljs-keyword">if</span> (!mail.hasSender()) &#123;<br>        LOGGER.debug(<span class="hljs-string">&quot;Null Sender: no bounce will be generated for &#123;&#125;&quot;</span>, mail.getName());<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (configuration.getBounceProcessor() != <span class="hljs-literal">null</span>) &#123;<br>            computeErrorCode(ex).ifPresent(mail::setAttribute);<br>            mail.setAttribute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Attribute</span>(DELIVERY_ERROR, AttributeValue.of(getErrorMsg(ex))));<br>            <span class="hljs-keyword">try</span> &#123;<br>                mailetContext.sendMail(mail, configuration.getBounceProcessor());<br>            &#125; <span class="hljs-keyword">catch</span> (MessagingException e) &#123;<br>                LOGGER.warn(<span class="hljs-string">&quot;Exception re-inserting failed mail: &quot;</span>, e);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            bounceWithMailetContext(mail, ex);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>那就只有改这个类，但是这个类是直接在<code>RemoteDelivery</code>里写死的new方法创建，没办法动态注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> MessagingException &#123;<br>    configuration = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RemoteDeliveryConfiguration</span>(getMailetConfig(), domainList);<br>    queue = queueFactory.createQueue(configuration.getOutGoingQueueName());<br>    deliveryRunnable = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeliveryRunnable</span>(queue,<br>        configuration,<br>        dnsServer,<br>        metricFactory,<br>        getMailetContext(),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bouncer</span>(configuration, getMailetContext()));<br>    <span class="hljs-keyword">if</span> (startThreads == ThreadState.START_THREADS) &#123;<br>        deliveryRunnable.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>james大概是不希望这里能够自由扩展，但是没关系，反正是有源码的，改一下重新打包就是，修改成如下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleTemporaryFailure</span><span class="hljs-params">(Mail mail, ExecutionResult executionResult)</span> <span class="hljs-keyword">throws</span> MailQueue.MailQueueException &#123;<br>    <span class="hljs-keyword">if</span> (!mail.getState().equals(Mail.ERROR)) &#123;<br>        mail.setState(Mail.ERROR);<br>        DeliveryRetriesHelper.initRetries(mail);<br>        mail.setLastUpdated(dateSupplier.get());<br>    &#125;<br>    mail.setAttribute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Attribute</span>(IS_DELIVERY_PERMANENT_ERROR, AttributeValue.of(<span class="hljs-literal">false</span>)));<br>    <span class="hljs-type">int</span> <span class="hljs-variable">retries</span> <span class="hljs-operator">=</span> DeliveryRetriesHelper.retrieveRetries(mail);<br><br>    <span class="hljs-keyword">if</span> (retries &lt; configuration.getMaxRetries()) &#123;<br>        reAttemptDelivery(mail, retries);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>    LOGGER.debug(<span class="hljs-string">&quot;Bouncing message &#123;&#125; after &#123;&#125; retries&quot;</span>, mail.getName(), retries);<br>    bouncer.bounce(mail, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>(<span class="hljs-string">&quot;Too many retries failure. Bouncing after &quot;</span> + retries + <span class="hljs-string">&quot; retries.\n&quot;</span> + executionResult.getException().map(e -&gt; &#123;<br>        <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> MessagingException) &#123;<br>            <span class="hljs-keyword">return</span> e.getMessage() + <span class="hljs-string">&quot;\n&quot;</span> + ((MessagingException) e).getNextException().getMessage();<br>        &#125;<br>        <span class="hljs-keyword">return</span> e.getMessage();<br>    &#125;).orElse(<span class="hljs-string">&quot;&quot;</span>), executionResult.getException().orElse(<span class="hljs-literal">null</span>)));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>尝试打包后失败，原因是代码格式未通过校验。相关错误是import的位置不对和代码缩减使用了tab，处理一下就行能顺利打包了。</p><p>如果之前已经打过包的，只需要在<code>server/mailet/mailets</code>和要使用的构建版本打两次包就行</p><p>我这里用的docker，所以需要的是<code>server/apps/jpa-app/target</code>下的<strong>jib-image.tar</strong>，我还顺便改了一下image的标签</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
      <category>james</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>james</tag>
      
      <tag>apache</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>james源码解析（三）</title>
    <link href="/2022/11/14/2VRR7FK.html"/>
    <url>/2022/11/14/2VRR7FK.html</url>
    
    <content type="html"><![CDATA[<p>因个人需要，在个人服务器上搭建了邮箱服务器，使用的是<a href="https://mailu.io/">mailu</a>，整体基于docker多容器搭建。</p><p>本来用起来没什么大问题，但是因为其自带nginx容器，和我原本部署的nginx容器会有一定的冲突，不是很满意</p><p>一番查找后，让我找到了<a href="https://james.apache.org">james</a>——apache开发的基于java的邮箱服务器。</p><span id="more"></span><p>上一篇中解析到了SMTP协议的解码和命令执行，姑且搞明白了网络通信的部分，但是没有弄清楚如何跟邮件处理关联的。</p><p>在翻看了代码后，让我找到了 <code>DataCmdHandler</code> 类，这是负责<strong>Data</strong>指令的数据，指令执行完之后就是邮件发送完成了</p><p>查看<strong>doDATA</strong>方法，发现一行代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">session.pushLineHandler(lineHandler);<br></code></pre></td></tr></table></figure><p>这是在往处理链条里加入一个新的处理器，并且在原有处理器前执行，不知道和之前提到的 获取最后一个LineHandler 有没有关系，继续往里深入，没有发现其被添加到chain里</p><p>debug后发现，这个lineHandler是个责任链模式，具体里面有哪些handler暂时不去深究，现在的重点是要找到最终的邮件处理，在一通操作后，找到了<code>DataLineJamesMessageHookHandler</code>，在这个类里面负责了<strong>Mail</strong>的创建，之前的handler应该就是解析各个部分。</p><p>在这个类的 <strong>messageHandlers</strong> 属性中有个类是 <code>SendMailHandler</code>，在其<code>onMessage</code>方法中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">queue.enQueue(mail);<br></code></pre></td></tr></table></figure><p>可见最终是交给了一个队列，在jpa版本中这个队列是<code>ActiveMQCacheableMailQueue</code>，就整体架构来看，这应该是一个基于内存的队列。</p><p>队列入队的数据，需要通知消费者，相关代码在<code>JMSCacheableMailQueue</code>的第204行，再往下就是<code>activemq-client</code>依赖包提供的内容了。</p><p>SMTP邮件投递确实是一个异步的过程，可以使用队列解耦，但是IMAP和pop3是同步的，应该没法用mq了</p><hr><p>找到了生产者，之后就是找消费者。debug之后，queueName是 <strong>queue://spool</strong> ，直接搜这个字符串没找到。那就只能从创建开始，最终找到了<code>JamesMailSpooler</code>，从里面的注释来看，这个类是负责响应队列消息分发给processor</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> reactor.core.Disposable <span class="hljs-title function_">run</span><span class="hljs-params">(MailQueue queue)</span> &#123;<br>    <span class="hljs-keyword">return</span> Flux.from(queue.deQueue())<br>        .flatMap(item -&gt; handleOnQueueItem(item).subscribeOn(Schedulers.elastic()), configuration.getConcurrencyLevel())<br>        .onErrorContinue((throwable, item) -&gt; LOGGER.error(<span class="hljs-string">&quot;Exception processing mail while spooling &#123;&#125;&quot;</span>, item, throwable))<br>        .subscribeOn(Schedulers.elastic())<br>        .subscribe();<br>&#125;<br></code></pre></td></tr></table></figure><p>这里是通过一个定时器去队列里获取消息，最终转发到第117行，给处理器处理消息。从这个流程来看，感觉ActiveMQ仿佛没用上啊</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">performProcessMail</span><span class="hljs-params">(MailQueueItem queueItem, Mail mail)</span> &#123;<br>    LOGGER.debug(<span class="hljs-string">&quot;==== Begin processing mail &#123;&#125; ====&quot;</span>, mail.getName());<br>    ImmutableList&lt;MailAddress&gt; originalRecipients = ImmutableList.copyOf(mail.getRecipients());<br>    <span class="hljs-keyword">try</span> &#123;<br>        mailProcessor.service(mail);<br><br>        <span class="hljs-keyword">if</span> (Thread.currentThread().isInterrupted()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InterruptedException</span>(<span class="hljs-string">&quot;Thread has been interrupted&quot;</span>);<br>        &#125;<br>        queueItem.done(<span class="hljs-literal">true</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        handleError(queueItem, mail, originalRecipients, e);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        LOGGER.debug(<span class="hljs-string">&quot;==== End processing mail &#123;&#125; ====&quot;</span>, mail.getName());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p>现在已经真正开始了邮件的一个处理过程，核心接口是<code>MailProcessor</code>。james把不同邮件状态交给不同的<code>MailProcessor</code>实例执行，从配置文件中也能看出来，抽象父类<code>AbstractStateMailetProcessor</code>负责处理这一逻辑</p><p>这里开始涉及james中的一个概念————<strong>mailet</strong>，<a href="https://james.apache.org/server/feature-mailetcontainer.html">https://james.apache.org/server/feature-mailetcontainer.html</a> 有对其详细的描述</p><p>我的英文水平一般，看完之后的理解是：mailt是一个邮件处理器的抽象，其由两部分组成————matcher和Processor，前者负责匹配邮件，确定是否需要执行processor，后者负责具体的逻辑。整体看来依然是一个责任链模式或者装饰模式</p><p>mailt的实现类非常多，结合<strong>mailetcontainer.xml</strong>来看，最主要的是<strong>ToProcessor</strong>类————原本我是这样想的，但是打开代码一看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(Mail mail)</span> <span class="hljs-keyword">throws</span> MessagingException &#123;<br>    <span class="hljs-keyword">if</span> (debug) &#123;<br>        LOGGER.debug(<span class="hljs-string">&quot;Sending mail &#123;&#125; to &#123;&#125;&quot;</span>, mail, processor);<br>    &#125;<br>    mail.setState(processor);<br>    <span class="hljs-keyword">if</span> (noticeText.isPresent()) &#123;<br>        setNoticeInErrorMessage(mail);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>实际上这货就负责改一个邮件状态，然后在流程中就是交给其他处理器负责了。具体是那个处理器可以从配置文件中看到————<strong><processor>transport</processor></strong></p><p>再重新看配置文件夹，重点是<strong>transport</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">processor</span> <span class="hljs-attr">state</span>=<span class="hljs-string">&quot;transport&quot;</span> <span class="hljs-attr">enableJmx</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">matcher</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;relay-allowed&quot;</span> <span class="hljs-attr">match</span>=<span class="hljs-string">&quot;org.apache.james.mailetcontainer.impl.matchers.Or&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">matcher</span> <span class="hljs-attr">match</span>=<span class="hljs-string">&quot;SMTPAuthSuccessful&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">matcher</span> <span class="hljs-attr">match</span>=<span class="hljs-string">&quot;SMTPIsAuthNetwork&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">matcher</span> <span class="hljs-attr">match</span>=<span class="hljs-string">&quot;SentByMailet&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">matcher</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mailet</span> <span class="hljs-attr">match</span>=<span class="hljs-string">&quot;All&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;RemoveMimeHeader&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>bcc<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">onMailetException</span>&gt;</span>ignore<span class="hljs-tag">&lt;/<span class="hljs-name">onMailetException</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mailet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mailet</span> <span class="hljs-attr">match</span>=<span class="hljs-string">&quot;All&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;RecipientRewriteTable&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">errorProcessor</span>&gt;</span>rrt-error<span class="hljs-tag">&lt;/<span class="hljs-name">errorProcessor</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mailet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mailet</span> <span class="hljs-attr">match</span>=<span class="hljs-string">&quot;RecipientIsLocal&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;Sieve&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mailet</span> <span class="hljs-attr">match</span>=<span class="hljs-string">&quot;RecipientIsLocal&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;AddDeliveredToHeader&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mailet</span> <span class="hljs-attr">match</span>=<span class="hljs-string">&quot;RecipientIsLocal&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;LocalDelivery&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mailet</span> <span class="hljs-attr">match</span>=<span class="hljs-string">&quot;HostIsLocal&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ToProcessor&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">processor</span>&gt;</span>local-address-error<span class="hljs-tag">&lt;/<span class="hljs-name">processor</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">notice</span>&gt;</span>550 - Requested action not taken: no such user here<span class="hljs-tag">&lt;/<span class="hljs-name">notice</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mailet</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mailet</span> <span class="hljs-attr">match</span>=<span class="hljs-string">&quot;relay-allowed&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ToProcessor&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">processor</span>&gt;</span>relay<span class="hljs-tag">&lt;/<span class="hljs-name">processor</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mailet</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">processor</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里有开始看不懂了，<strong>Sieve</strong>是RFC3028的java实现，是为了实现邮件过滤，可以理解成防垃圾邮件。<strong>LocalDelivery</strong>应该是处理投递到当前服务器的邮件。那么投递到其他邮箱服务器的实现又在哪里呢？</p><p>先看本地投递吧</p><p>本地投递没多少特别的，主要是注入了<strong>UsersRepository</strong>、<strong>MailboxManager</strong>负责用户和邮件的存储，实际使用是再委托给了<strong>MailDispatcher</strong>负责。很多项目都会这样，一层套一层，导致理解起来相当费劲。就jpa版本来说，就是把数据入库，要注意的是这里没有做消息通知，说明james的listener机制还有别的地方再处理。搞得很头大啊！</p><p>手动发一封到其他邮箱服务的邮件，debug看一下具体流程</p><p>果然根本发不出去！</p><p>仔细看错误日志，这是在 <strong>RCPT TO</strong>给拒绝了</p><p>检查了半天，最后改了一下 <strong>smtpserver.xml</strong> 的配置，把587端口的ssl要求都关闭，同时邮件发送脚本改用587端口</p><p>debug之后，找到了<strong>RemoteDelivery</strong>，很明显，这个类负责投递远程邮件。那么这个类又是什么时候注入的呢？</p><p>再仔细回去看配置文件，这是在另一个state的processor中配置的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">processor</span> <span class="hljs-attr">state</span>=<span class="hljs-string">&quot;relay&quot;</span> <span class="hljs-attr">enableJmx</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mailet</span> <span class="hljs-attr">match</span>=<span class="hljs-string">&quot;All&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;RemoteDelivery&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">outgoingQueue</span>&gt;</span>outgoing<span class="hljs-tag">&lt;/<span class="hljs-name">outgoingQueue</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">delayTime</span>&gt;</span>5000, 100000, 500000<span class="hljs-tag">&lt;/<span class="hljs-name">delayTime</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maxRetries</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">maxRetries</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maxDnsProblemRetries</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">maxDnsProblemRetries</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">deliveryThreads</span>&gt;</span>10<span class="hljs-tag">&lt;/<span class="hljs-name">deliveryThreads</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">sendpartial</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">sendpartial</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bounceProcessor</span>&gt;</span>bounces<span class="hljs-tag">&lt;/<span class="hljs-name">bounceProcessor</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mailet</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">processor</span>&gt;</span><br></code></pre></td></tr></table></figure><p>查看该类的实现逻辑，依旧使用了队列，将其投递到了 <strong>outgoing</strong> 队列中，该队列由<code>DeliveryRunnable</code>负责消费，再将投递操作委托给<code>MailDelivrer</code>，再然后就是一些具体的邮件发送过程了，比如解析dns之类的，不做深入研究</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
      <category>james</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>james</tag>
      
      <tag>apache</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>james源码解析（二）</title>
    <link href="/2022/11/13/3X95FN1.html"/>
    <url>/2022/11/13/3X95FN1.html</url>
    
    <content type="html"><![CDATA[<p>因个人需要，在个人服务器上搭建了邮箱服务器，使用的是<a href="https://mailu.io/">mailu</a>，整体基于docker多容器搭建。</p><p>本来用起来没什么大问题，但是因为其自带nginx容器，和我原本部署的nginx容器会有一定的冲突，不是很满意</p><p>一番查找后，让我找到了<a href="https://james.apache.org">james</a>——apache开发的基于java的邮箱服务器。</p><span id="more"></span><p>上一篇章中实现了james的运行和测试，这一篇开始源码入门</p><h2 id="源码入门"><a href="#源码入门" class="headerlink" title="源码入门"></a>源码入门</h2><p>在 <code>server/Overview.md</code> 中有对项目一些结构性描述，奈何文档只写了个开头，总共不过一百行文字，而且和现有项目都有些对不上了，希望apache社区能早日补充文档</p><p>依照我目前的理解，james总体可以分成以下几个部分</p><ul><li>protocols 协议实现和通信，基于netty的网络通信，实现了协议解析</li><li>store 数据存储</li><li>mailet james自已定义的组件名称，我的理解是邮件的处理器，james的各种功能也是通过mailet实现的</li><li>event 事件机制</li></ul><p>当然james不止这点东西，其他的要么我还没了解到，要么没必要深究</p><hr><p>想要了解一个项目，首先需要从程序入口开始。</p><p>以<code>server/apps/jpa-app/src/main/java/org/apache/james/JPAJamesServerMain.java</code>为例</p><p>查看他的main方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    ExtraProperties.initialize();<br><br>    <span class="hljs-type">JPAJamesConfiguration</span> <span class="hljs-variable">configuration</span> <span class="hljs-operator">=</span> JPAJamesConfiguration.builder()<br>        .useWorkingDirectoryEnvProperty()<br>        .build();<br><br>    LOGGER.info(<span class="hljs-string">&quot;Loading configuration &#123;&#125;&quot;</span>, configuration.toString());<br>    <span class="hljs-type">GuiceJamesServer</span> <span class="hljs-variable">server</span> <span class="hljs-operator">=</span> createServer(configuration)<br>        .combineWith(<span class="hljs-keyword">new</span> <span class="hljs-title class_">JMXServerModule</span>());<br><br>    JamesServerMain.main(server);<br>&#125;<br></code></pre></td></tr></table></figure><p>头两行代码看起来是配置文件的读取，可以先跳过。重点是最后两行代码。</p><p><code>JamesServerMain.main(server);</code>是调用服务启动方法和注册关闭hook，不重要。</p><p>因此看<code>createServer</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> GuiceJamesServer <span class="hljs-title function_">createServer</span><span class="hljs-params">(JPAJamesConfiguration configuration)</span> &#123;<br>    <span class="hljs-keyword">return</span> GuiceJamesServer.forConfiguration(configuration)<br>        .combineWith(JPA_MODULE_AGGREGATE)<br>        .combineWith(<span class="hljs-keyword">new</span> <span class="hljs-title class_">UsersRepositoryModuleChooser</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">JPAUsersRepositoryModule</span>())<br>            .chooseModules(configuration.getUsersRepositoryImplementation()));<br>&#125;<br></code></pre></td></tr></table></figure><p>这个<code>combineWith</code>是干什么的？看一下<strong>JPA_MODULE_AGGREGATE</strong>参数是什么</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Module</span> <span class="hljs-variable">JPA_SERVER_MODULE</span> <span class="hljs-operator">=</span> Modules.combine(<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">ActiveMQQueueModule</span>(),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultProcessorsConfigurationProviderModule</span>(),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">ElasticSearchMetricReporterModule</span>(),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">JPADataModule</span>(),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">JPAMailboxModule</span>(),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">MailboxModule</span>(),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">LuceneSearchMailboxModule</span>(),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">NoJwtModule</span>(),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">RawPostDequeueDecoratorModule</span>(),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">SieveJPARepositoryModules</span>(),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultEventModule</span>(),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">TaskManagerModule</span>(),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">MemoryDeadLetterModule</span>(),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpamAssassinListenerModule</span>());<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Module</span> <span class="hljs-variable">JPA_MODULE_AGGREGATE</span> <span class="hljs-operator">=</span> Modules.combine(<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">MailetProcessingModule</span>(), JPA_SERVER_MODULE, PROTOCOLS);<br></code></pre></td></tr></table></figure><p>从命令看出，这应该是在组装应用模块。james将功能拆分开，最后通过组合不同的模块，实现最终提供不同功能的版本</p><p>一路深入下去，发现这一套 <strong>module</strong> 定义是 <strong>Guice</strong> 提供的，查阅资料可知，这是一个依赖注入框架，类似于Spring，在学习阶段直接当成Spring看待就行。</p><p>以<code>server/container/guice/protocols/smtp/src/main/java/org/apache/james/modules/protocols/SMTPServerModule.java</code> 为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SMTPServerModule</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractModule</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">()</span> &#123;<br>        install(<span class="hljs-keyword">new</span> <span class="hljs-title class_">JSPFModule</span>());<br>        bind(SMTPServerFactory.class).in(Scopes.SINGLETON);<br>        bind(OioSMTPServerFactory.class).in(Scopes.SINGLETON);<br><br>        Multibinder.newSetBinder(binder(), GuiceProbe.class).addBinding().to(SmtpGuiceProbe.class);<br>    &#125;<br><br>    <span class="hljs-meta">@ProvidesIntoSet</span><br>    InitializationOperation <span class="hljs-title function_">configureSmtp</span><span class="hljs-params">(ConfigurationProvider configurationProvider,</span><br><span class="hljs-params">                                        SMTPServerFactory smtpServerFactory,</span><br><span class="hljs-params">                                        SendMailHandler sendMailHandler)</span> &#123;<br>        <span class="hljs-keyword">return</span> InitilizationOperationBuilder<br>            .forClass(SMTPServerFactory.class)<br>            .init(() -&gt; &#123;<br>                smtpServerFactory.configure(configurationProvider.getConfiguration(<span class="hljs-string">&quot;smtpserver&quot;</span>));<br>                smtpServerFactory.init();<br>                sendMailHandler.init(<span class="hljs-literal">null</span>);<br>            &#125;);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>核心方法应该是 <strong>smtpServerFactory.init()</strong> ，一路追踪下去，最终来到了<code>server/protocols/protocols-library/src/main/java/org/apache/james/protocols/lib/netty/AbstractConfigurableAsyncServer#init</code> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostConstruct</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>    <span class="hljs-keyword">if</span> (isEnabled()) &#123;<br><br>        buildSSLContext();<br>        preInit();<br>        executionHandler = createExecutionHandler();<br>        frameHandlerFactory = createFrameHandlerFactory();<br>        bind();<br>        port = retrieveFirstBindedPort();<br><br>        mbeanServer = ManagementFactory.getPlatformMBeanServer();<br>        registerMBean();<br>        <br>        LOGGER.info(<span class="hljs-string">&quot;Init &#123;&#125; done&quot;</span>, getServiceType());<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>这个模块是SMTP协议实现，james的网络通信是使用的<strong>netty</strong>，netty核心是handler，所以需要关注的就是Handler实现类。</p><p>结合之前测试的日志可以发现有个<code>SMTPChannelUpstreamHandler</code>类，排查代码，定位到 <code>SMTPServer</code>的第<strong>221</strong>行。</p><p>这里的实现逻辑是抽象类提供方法负责注册handler，子类重写方法提供不同的handler实现。典型的模板模式</p><p><code>SMTPChannelUpstreamHandler</code>三个核心方法，也就是netty提供的方法，分别对应连接建立，收到消息和连接关闭。</p><p>查看代码可知，具体实现在其父类<code>BasicChannelUpstreamHandler</code></p><hr><p>先看连接建立</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelConnected</span><span class="hljs-params">(ChannelHandlerContext ctx, ChannelStateEvent e)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-keyword">try</span> (<span class="hljs-type">Closeable</span> <span class="hljs-variable">closeable</span> <span class="hljs-operator">=</span> mdc(ctx).build()) &#123;<br>        List&lt;ConnectHandler&gt; connectHandlers = chain.getHandlers(ConnectHandler.class);<br>        List&lt;ProtocolHandlerResultHandler&gt; resultHandlers = chain.getHandlers(ProtocolHandlerResultHandler.class);<br>        <span class="hljs-type">ProtocolSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> (ProtocolSession) ctx.getAttachment();<br>        LOGGER.info(<span class="hljs-string">&quot;Connection established from &#123;&#125;&quot;</span>, session.getRemoteAddress().getAddress().getHostAddress());<br>        <span class="hljs-keyword">if</span> (connectHandlers != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">for</span> (ConnectHandler cHandler : connectHandlers) &#123;<br>                <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>                <span class="hljs-type">Response</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> cHandler.onConnect(session);<br>                <span class="hljs-type">long</span> <span class="hljs-variable">executionTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis() - start;<br><br>                <span class="hljs-keyword">for</span> (ProtocolHandlerResultHandler resultHandler : resultHandlers) &#123;<br>                    resultHandler.onResponse(session, response, executionTime, cHandler);<br>                &#125;<br>                <span class="hljs-keyword">if</span> (response != <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> This kind of sucks but I was able to come up with something more elegant here</span><br>                    ((ProtocolSessionImpl) session).getProtocolTransport().writeResponse(response, session);<br>                &#125;<br><br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">super</span>.channelConnected(ctx, e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其实三个方法逻辑都大差不大，都是通过<strong>chain</strong>获取handler，依次执行后写入数据到连接。只是不同事件封装了不同的Handler接口</p><p><code>ProtocolHandlerChain chain</code>里维护了一个handler的列表，查看其子类找到<code>SMTPProtocolHandlerChain#initDefaultHandlers</code>，可以看到其维护的handler列表。此时出现问题了，通过ide无法找到该类构造方法调用位置，debug断点也没有执行，反倒找到了另外一个类<code>org.apache.james.smtpserver.CoreCmdHandlerLoader</code>,这个类同样维护了一个handler列表，这就有点迷惑了，这到底是怎么个流程。</p><p>实在搞不懂，先暂时跳过，总之知道了有哪些handler。</p><hr><p>回到<code>BasicChannelUpstreamHandler</code>，重点看消息接受方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">messageReceived</span><span class="hljs-params">(ChannelHandlerContext ctx, MessageEvent e)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-keyword">try</span> (<span class="hljs-type">Closeable</span> <span class="hljs-variable">closeable</span> <span class="hljs-operator">=</span> mdc(ctx).build()) &#123;<br>        <span class="hljs-type">ProtocolSession</span> <span class="hljs-variable">pSession</span> <span class="hljs-operator">=</span> (ProtocolSession) ctx.getAttachment();<br>        LinkedList&lt;LineHandler&gt; lineHandlers = chain.getHandlers(LineHandler.class);<br>        LinkedList&lt;ProtocolHandlerResultHandler&gt; resultHandlers = chain.getHandlers(ProtocolHandlerResultHandler.class);<br><br><br>        <span class="hljs-keyword">if</span> (lineHandlers.size() &gt; <span class="hljs-number">0</span>) &#123;<br><br>            <span class="hljs-type">ChannelBuffer</span> <span class="hljs-variable">buf</span> <span class="hljs-operator">=</span> (ChannelBuffer) e.getMessage();<br>            <span class="hljs-type">LineHandler</span> <span class="hljs-variable">lHandler</span> <span class="hljs-operator">=</span> (LineHandler) lineHandlers.getLast();<br>            <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>            <span class="hljs-type">Response</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> lHandler.onLine(pSession, buf.toByteBuffer());<br>            <span class="hljs-type">long</span> <span class="hljs-variable">executionTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis() - start;<br><br>            <span class="hljs-keyword">for</span> (ProtocolHandlerResultHandler resultHandler : resultHandlers) &#123;<br>                response = resultHandler.onResponse(pSession, response, executionTime, lHandler);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (response != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> This kind of sucks but I was able to come up with something more elegant here</span><br>                ((ProtocolSessionImpl) pSession).getProtocolTransport().writeResponse(response, pSession);<br>            &#125;<br><br>        &#125;<br><br>        <span class="hljs-built_in">super</span>.messageReceived(ctx, e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里可以看到有点不太一样了，获取的LineHandler列表只执行了最后一个，这是为何啊。</p><p>从之前的handler列表中，可以看到<code>CommandDispatcher</code>，从名字看是服务命令分发的。其他handler也基本是各个命令的实现。</p><p>看到这里已经大致明白了网络协议的部分架构，但是还没搞懂如何和核心的邮件处理关联</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
      <category>james</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>james</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>james源码解析（一）</title>
    <link href="/2022/11/12/3588MKS.html"/>
    <url>/2022/11/12/3588MKS.html</url>
    
    <content type="html"><![CDATA[<p>因个人需要，在个人服务器上搭建了邮箱服务器，使用的是<a href="https://mailu.io/">mailu</a>，整体基于docker多容器搭建。</p><p>本来用起来没什么大问题，但是因为其自带nginx容器，和我原本部署的nginx容器会有一定的冲突，不是很满意</p><p>一番查找后，让我找到了<a href="https://james.apache.org">james</a>——apache开发的基于java的邮箱服务器。</p><span id="more"></span><h2 id="james是什么"><a href="#james是什么" class="headerlink" title="james是什么"></a>james是什么</h2><p>james是apache开发的基于java的邮箱服务器，支持的协议包括常见的SMTP、IMAP、POP3，还有我都没听说过的JAMP。</p><p>在本文编写时，最新版本为3.7.2</p><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>首先获取项目源码，有两种途径，一是在apache官网上下载版本源码，二是在<a href="https://github.com/apache/james-project">github</a>上clone代码</p><p>我使用第二种方式。</p><p>从后续的过程来看，如果想要编译运行，似乎需要git log记录，如果不是git项目的话，不知道会不会编译失败。</p><hr><p>下载下来之后首先切到 3.7.2 的tag上，把代码固定住，后续贴代码的时候更方便</p><p>下载下来之后可以看到项目模块非常多，而且还有scala相关代码，因此ide最好下载一个scala插件。</p><p>里面还有部分文档是以.adoc结尾，是一种类似markdown的标记型语法，建议也装一个相关插件</p><hr><p>在根目录执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mvn clean install -DskipTests -T 6<br></code></pre></td></tr></table></figure><p><strong>-T 6</strong>代表开6个线程加速编译</p><p>注意跳过测试不能使用 <strong>-Dmaven.test.skip=true</strong>，这样会导致test目录不会被编译，部分模块依赖会出错</p><p>另外maven仓库最好换成官方仓库，我用的阿里云仓库会有部分依赖没有</p><p>如果网络没有什么问题的话，编译应该很顺利。编译完成后项目5G，依赖2G，很夸张啊。</p><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>如何启动项目<a href="https://james.apache.org/server/install.html">官网</a>也有明确的描述</p><p>james为了适应不同的环境需求，有着多种构建版本，具体可以参见<a href="https://james.apache.org/server/packaging.html">https://james.apache.org/server/packaging.html</a></p><p>总的分成五个版本：</p><ul><li>distributed 依赖最多、最为复杂的分布式版本，支持多节点部署</li><li>jpa 使用openjpa存储数据的单节点版本</li><li>demo 没看出和jpa有什么区别</li><li>memory 使用内存存储数据，主要用于测试</li><li>cassandra 换了存储方式和搜索引擎</li></ul><hr><p>为了测试环境是否正常，建议先运行<strong>memory</strong>版本</p><p>启动类位于 <code>server/apps/memory-app/src/main/java/org/apache/james/MemoryJamesServerMain.java</code></p><p>同时需要指定一个工作目录用于存储数据，可以通过启动参数 <code>-Dworking.directory=/home/james</code> 指定</p><p>在工作目录下创建目录 <code>conf</code>，将 <code>server/apps/memory-app/sample-configuration</code>里的文件全放进去</p><p>默认情况下，还需要生成证书。</p><p>在工作目录下执行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">keytool -genkey -alias james -keyalg RSA -keystore conf/keystore<br></code></pre></td></tr></table></figure><p>证书密钥固定为 <strong>james72laBalle</strong> ，或者更换相关配置文件中的值为你想要的内容</p><p>启动项目，注意由于 SMTP、POP3、IMAP默认启动端口都在1024以下，所以linux需要要么以<strong>root</strong>权限启动，要么修改<code>smtpserver.xml</code>、<code>imapserver.xml</code>、<code>pop3server.xml</code>里的端口</p><h2 id="配置邮箱"><a href="#配置邮箱" class="headerlink" title="配置邮箱"></a>配置邮箱</h2><p>启动项目之后需要添加两个账号用于测试，账号格式为 <strong>account@localhost</strong> ，后面域名部分固定，除非手动添加一个domain到domainlist中</p><p>这里我是用jconsole通过jmx添加的，也可以通过相关命令行执行</p><hr><p>邮箱客户端我使用的是win10自带的邮件软件</p><p>注意设置服务器地址，而且最好不要使用ssl</p><p>一通操作下来，向外部邮箱发送邮件和本地邮箱收发邮件应该没什么问题了。</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
      <category>james</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>james</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>统计最高在线人数</title>
    <link href="/2022/07/12/2DRS3A3.html"/>
    <url>/2022/07/12/2DRS3A3.html</url>
    
    <content type="html"><![CDATA[<p>最近接了个统计需求，需要统计某一段时间内的最高在线人数</p><span id="more"></span><p>本来最高在线人数是前期最好处理，根据长连接建立和中断统计人数，将最高值入库。</p><p>但是前期因为某些原因不太好做，那就只能后期来做处理。</p><h2 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h2><p>我能拿到的数据包含进入和离开时间，统计也按照这两个时间来。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>最开始想的是将若干个时间段放在时间轴上，然后用类似取交集的方式计算最高在线人数。</p><p>看着很像是用<strong>滑动窗口</strong>解决，为此还去letcode上找有没有类似的题目。</p><p>但是没找到，不得不转变思路。</p><p>首先需要一根时间轴，这个用链表实现，将链表的每个节点认为是一个时间点，用index来表示。</p><p>那么进入和退出就是在指定的节点上插入数据；</p><p>最后再遍历这条链表，根据每个节点不同的状态执行 +1 -1 操作</p><hr><p>但是上述方法会浪费大量的空间，因为可能存在某个时间点没有进入退出，但是链表上对应的节点依然存在</p><p>需要想办法把这些节点给干掉</p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>之所以要提前建立节点，是因为在插入数据的时候没法保证顺序，后面遍历的时候一定要保证链表节点是按照时间顺序排列的。</p><p>即便对原始数据进行排序，因为有两个时间的缘故，也没什么用处</p><p> 尝试把进入和退出拆分到两条链表，再把原始数据按照两个时间分别排序。</p><p>然后先遍历进入，再遍历退出。没办法在一个循环里搞定。</p><p>再考虑怎么遍历。一条链表的情况下，只需要对每个节点做判断；但是两条链表的话，如何保证是在遍历每一秒，因为此时index不能代表时间点。</p><p>可以使用双指针。<br>第一个指针指向进入链表，以这条链表为准遍历。</p><p>遍历开始，每个指针都执行头节点</p><p>进入指针步进，同时做+1操作，根据当前节点的时间来判断退出链表是否步进，当进入时间晚于退出时间，则退出指针步进，此时方才做-1操作</p><p>进入链表结束时，退出链表肯定没有完，但是后面的数据只会有-1操作，不影响最高人数统计，可以不用处理</p><p>实际上的遍历操作就是一个双链表合并排序问题</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VisitNode</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 当前秒操作人数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 当前节点代表的时间点，</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">second</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">private</span> VisitNode next;<br><br>    <span class="hljs-keyword">private</span> Long time;<br>&#125;<br><br><span class="hljs-keyword">private</span> VisitNode <span class="hljs-title function_">count</span><span class="hljs-params">(<span class="hljs-type">long</span> second, VisitNode tail, VisitNode head, LiveStat s, <span class="hljs-type">long</span> time)</span> &#123;<br>    <span class="hljs-keyword">if</span> (tail == head) &#123;<span class="hljs-comment">//创建第一个节点</span><br>        head.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VisitNode</span>();<br>        tail = head.next;<br>        tail.second = ((<span class="hljs-type">int</span>) second);<br>        tail.count = <span class="hljs-number">1</span>;<br>        tail.time = time;<br><br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (tail.second == second) &#123;<span class="hljs-comment">//判断是否和当前时间点相同</span><br>        tail.count += <span class="hljs-number">1</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//继续追加节点</span><br>        tail.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VisitNode</span>();<br>        tail = tail.next;<br>        tail.second = ((<span class="hljs-type">int</span>) second);<br>        tail.count = <span class="hljs-number">1</span>;<br>        tail.time = time;<br>    &#125;<br>    <span class="hljs-keyword">return</span> tail;<br>&#125;<br><br><br><br><span class="hljs-type">VisitNode</span> <span class="hljs-variable">enterHead</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VisitNode</span>();<br><span class="hljs-type">VisitNode</span> <span class="hljs-variable">quietHead</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VisitNode</span>();<br><span class="hljs-type">VisitNode</span> <span class="hljs-variable">enterTail</span> <span class="hljs-operator">=</span> enterHead, quietTail = quietHead;<br><br>List&lt;LiveStat&gt; enterStat; <span class="hljs-comment">// 数据来源不重要，总之 enterStat 是一个按照 进入时间 排好序的数据</span><br>List&lt;LiveStat&gt; quietStat;  <span class="hljs-comment">// 数据来源不重要，总之 quietStat 是一个按照 退出时间 排好序的数据</span><br><br><br><span class="hljs-comment">// 处理进入操作</span><br><br><span class="hljs-keyword">for</span> (LiveStat liveStat : enterStat) &#123;<br>    <span class="hljs-type">Long</span> <span class="hljs-variable">second</span> <span class="hljs-operator">=</span> liveStat.getStartTime();<br><br>    <span class="hljs-comment">// 取当前秒距离开始统计时间的秒数</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">se</span> <span class="hljs-operator">=</span> (second - startTime) / <span class="hljs-number">1000</span>;<br><br>    enterTail = count(se, enterTail, enterHead, liveStat, liveStat.getStartTime());<br><br>&#125;<br><br><span class="hljs-comment">// 处理退出操作</span><br><span class="hljs-keyword">for</span> (LiveStat liveStat : quietStat) &#123;<br>    <span class="hljs-type">Long</span> <span class="hljs-variable">second</span> <span class="hljs-operator">=</span> liveStat.getEndTime();<br><br>    <span class="hljs-comment">// 取当前秒距离开始统计时间的秒数</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">se</span> <span class="hljs-operator">=</span> (second - startTime) / <span class="hljs-number">1000</span>;<br>    quietTail = count(se, quietTail, quietHead, liveStat, liveStat.getEndTime());<br><br>&#125;<br><br><span class="hljs-comment">// 双指针，遍历进入退出</span><br><br><span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>quietHead = quietHead.next;<span class="hljs-comment">// 避免把头结点算进来</span><br>enterHead = enterHead.next;<br><br><span class="hljs-keyword">while</span> (enterHead != <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//不用关心quietHead是否遍历完问题</span><br>    <span class="hljs-keyword">if</span> (enterHead.second &lt; quietHead.second) &#123;<br>        logger.info(<span class="hljs-string">&quot;进入时间=&#123;&#125;&quot;</span>, DateUtils.getAllTime(enterHead.time));<br>        count += enterHead.count;<br>        enterHead = enterHead.next;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (enterHead.second &gt; quietHead.second) &#123;<br>        logger.info(<span class="hljs-string">&quot;退出时间=&#123;&#125;&quot;</span>, DateUtils.getAllTime(enterHead.time));<br>        count -= quietHead.count;<br>        quietHead = quietHead.next;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//同时有人进出的情况</span><br>        logger.info(<span class="hljs-string">&quot;同时时间=&#123;&#125;&quot;</span>, DateUtils.getAllTime(enterHead.time));<br>        count -= quietHead.count;<br>        count += enterHead.count;<br><br>        quietHead = quietHead.next;<br>        enterHead = enterHead.next;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (count &gt;= max) &#123;<br>        max = count;<br>    &#125;<br><br>&#125;<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot线程安全问题</title>
    <link href="/2022/06/29/3D0TZJP.html"/>
    <url>/2022/06/29/3D0TZJP.html</url>
    
    <content type="html"><![CDATA[<p>项目中使用到了ThreadLocal，在某次更新中出了问题，本以为只是把ThreadLocal remove就行了，结果却排查出一个线程安全问题</p><span id="more"></span><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>项目基于 <strong>SpringBoot-2.3.7.RELEASE</strong> 版本构建，其他无关紧要</p><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p>首先介绍一下整体流程。</p><p>项目为了区分各个终端的版本，在<strong>header</strong>头里添加了<strong>x-api</strong>用于存储版本号</p><p>后端为了便于使用，将版本号写成了一个枚举，采用三位版本号。由于前后端版本号不会同步的原因，前端有时候会升级小版本号，为了后端不发版，就把枚举做了处理，将小版本号用<strong>ThraedLocal</strong>存储</p><p>基本代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Version</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span>&lt;Version&gt; &#123;<br><br><br>    DEFAULT(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">true</span>),<br>    _1_4_0(<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">true</span>),<br>    _2_0_0(<span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">true</span>),<br>    ;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">high</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">low</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ThreadLocal&lt;Integer&gt; lowVersion = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;&gt;();<br><br>    Version(<span class="hljs-type">int</span> high, <span class="hljs-type">int</span> mid, <span class="hljs-type">int</span> low, <span class="hljs-type">boolean</span> swagger) &#123;<br>        <span class="hljs-built_in">this</span>.high = high;<br>        <span class="hljs-built_in">this</span>.mid = mid;<br>        <span class="hljs-built_in">this</span>.low = low;<br>        <span class="hljs-built_in">this</span>.swagger = swagger;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">value</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">integer</span> <span class="hljs-operator">=</span> lowVersion.get();<br>        <span class="hljs-keyword">return</span> String.format(<span class="hljs-string">&quot;%d.%d.%d&quot;</span>, high, mid, integer == <span class="hljs-literal">null</span> ? low : integer);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">swagger</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> swagger;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(Version.class);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Version <span class="hljs-title function_">convert</span><span class="hljs-params">(String api)</span> &#123;<br>        <span class="hljs-keyword">if</span> (StringUtils.isBlank(api)) &#123;<br>            <span class="hljs-keyword">return</span> DEFAULT;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (Constants.DEFAULT_VERSION.equals(api)) &#123;<br>            <span class="hljs-keyword">return</span> DEFAULT;<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Version</span> <span class="hljs-variable">version</span> <span class="hljs-operator">=</span> valueOf(<span class="hljs-string">&quot;_&quot;</span> + api.replaceAll(<span class="hljs-string">&quot;\\.&quot;</span>, <span class="hljs-string">&quot;_&quot;</span>));<br>            <span class="hljs-keyword">return</span> version;<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalArgumentException e) &#123;<br><br>            <span class="hljs-comment">// 没有对应的版本号，给一个大中版本都匹配的版本</span><br>            String[] split = api.split(<span class="hljs-string">&quot;\\.&quot;</span>, <span class="hljs-number">3</span>);<br><br>            <span class="hljs-keyword">if</span> (split.length != <span class="hljs-number">3</span>) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedVersionException</span>(api);<br>            &#125;<br>            Version[] values = values();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> values.length - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br><br>                <span class="hljs-keyword">if</span> (split[<span class="hljs-number">0</span>].equals(String.valueOf(values[i].high)) &amp;&amp; split[<span class="hljs-number">1</span>].equals(String.valueOf(values[i].mid))) &#123;<span class="hljs-comment">// 找到一个匹配的中版本，</span><br>                    <span class="hljs-keyword">try</span> &#123;<br>                        lowVersion.set(Integer.valueOf(split[<span class="hljs-number">2</span>]));<br>                        <span class="hljs-keyword">return</span> values[i];<br>                    &#125; <span class="hljs-keyword">catch</span> (NumberFormatException ex) &#123;<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedVersionException</span>(api);<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedVersionException</span>(api);<br>        &#125;<br>    &#125;<br><br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>注意，上面使用到的ThreadLocal项我并没有调用remove，并非我忘了，而且我经过<strong>“谨慎”</strong>考虑，认为可以不清除，下次请求会给覆盖掉</p><p>开发过程中一切正常，后来上线过程中，有个接口需要获取版本号做判断，这时前端有两个版本，分别是2.0.0和2.0.1。</p><p>然后问题出现了，2.0.1的版本号判断正常，但是2.0.0的请求却出现了有时返回了2.0.1的判断逻辑。</p><p>就是说，后端有时候把2.0.0当2.0.0本身处理，有时候又给当成2.0.1给处理。</p><p>涉及的代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><br>    <span class="hljs-meta">@PostMapping(&quot;/audit_model&quot;)</span><br>    <span class="hljs-keyword">public</span> R&lt;Boolean&gt; <span class="hljs-title function_">auditModel</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>        <span class="hljs-keyword">return</span> R.ok(auditModelService.auditModel(getVersion()));<br>    &#125;<br><br><br><span class="hljs-comment">// getVersion() 是其父类中的方法，这里贴出父类的逻辑</span><br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * request对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> HttpServletRequest request;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * response对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> HttpServletResponse response;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取request</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> HttpServletRequest <span class="hljs-title function_">getRequest</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> request;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取response</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> HttpServletResponse <span class="hljs-title function_">getResponse</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> response;<br>    &#125;<br><br>    <span class="hljs-meta">@ModelAttribute</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setReqAndResp</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;<br>        <span class="hljs-built_in">this</span>.request = request;<br>        <span class="hljs-built_in">this</span>.response = response;<br>    &#125;<br><br><br>    <span class="hljs-keyword">protected</span> Version <span class="hljs-title function_">getVersion</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Version.convert(request.getHeader(<span class="hljs-string">&quot;x-api&quot;</span>));<br>    &#125;<br><br></code></pre></td></tr></table></figure><h2 id="临时解决"><a href="#临时解决" class="headerlink" title="临时解决"></a>临时解决</h2><p>出了问题之后，我一看代码就发现了问题所在。</p><p>问题出在 <strong>ThreadLocal</strong> 上，由于小版本号未清除，导致部分线程会保留小版本号，导致将2.0.0识别成2.0.1</p><p>立马上线解决方案，涉及接口不使用枚举类，直接使用字符串，问题解决</p><p>但是这个解决方案不够优雅，只是治标，只解决了这一个接口。其他接口如果有判断，还是会出错。</p><p>另一个治本的方法是增加枚举类，把小版本号写上，但是这就违背了我的初衷。</p><h2 id="摸索治本方案"><a href="#摸索治本方案" class="headerlink" title="摸索治本方案"></a>摸索治本方案</h2><p>首先为了测试bug是否给修复，我使用了一个jmeter脚本，方案是启动多个线程，每个线程内首先以<strong>2.0.1</strong>去多次请求接口，保证把线程的<strong>ThreadLocal</strong>小版本号给覆盖，然后以<strong>2.0.0</strong>去请求接口，确定是否会出现版本识别出错问题。多个线程并发，且都执行多次</p><p>接着回滚临时解决方案，使用上面的脚本做测试，果然bug很轻易的就复现了，证明脚本逻辑正确。</p><p>然后在<strong>Version.convert</strong>开头首先清理掉<strong>ThreadLocal</strong>，为了以防万一，再在拦截器的后置处理器里清理一遍。</p><p>启动脚本，果然，bug很轻易地就解…..嗯？怎么还在？？</p><p>缺了大德了，为什么没解决呢？？？</p><p>算了，先打日志吧。</p><p>我在接口里将获取到的版本号给输出给前端。代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> R&lt;Boolean&gt; <span class="hljs-title function_">auditModel</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>    <span class="hljs-keyword">return</span> R.ok(data, MDC.get(<span class="hljs-string">&quot;traceId&quot;</span>) + <span class="hljs-string">&quot;  &quot;</span> + Thread.currentThread().getName() + <span class="hljs-string">&quot;  &quot;</span> + request.getHeader(<span class="hljs-string">&quot;x-api&quot;</span>) + <span class="hljs-string">&quot; &quot;</span> + version.value() + <span class="hljs-string">&quot; &quot;</span> + version);<br>&#125;<br></code></pre></td></tr></table></figure><p>另外为了确定请求来源，还使用了 <strong>MDC</strong> 来输出一个UUID来标记请求。这里不多赘述</p><p>输出的错误情况就像这样</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;d78d8911-a5d8-4451-84d1-894338b22959  http-nio-6784-exec-4  2.0.0 2.0.1 _latest&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;other&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">200</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>可以看出，获取到的版本号还是不一致，明明已经清理了<strong>ThreadLocal</strong>。</p><p>继续加日志，这次加在<strong>Version.convert</strong>方法里，记录一下传入的字符串类型版本号是多少</p><p>结果出乎意料</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><br>d78d8911-a5d8-<span class="hljs-number">4451</span>-84d1-<span class="hljs-number">894338b22959</span> -<span class="hljs-number">19830284</span>- <span class="hljs-number">2022</span>-<span class="hljs-number">06</span>-<span class="hljs-number">29</span> <span class="hljs-number">10</span>:<span class="hljs-number">14</span>:<span class="hljs-number">44.539</span> [http-nio-<span class="hljs-number">6784</span>-exec-<span class="hljs-number">4</span>] INFO  com.ruoyi.common.core.enums.Version - [<span class="hljs-built_in">convert</span>,<span class="hljs-number">70</span>] - 给的 api=<span class="hljs-number">2.0</span><span class="hljs-number">.0</span>,结果= <span class="hljs-number">2.0</span><span class="hljs-number">.0</span> _2_0_0<br><br>d78d8911-a5d8-<span class="hljs-number">4451</span>-84d1-<span class="hljs-number">894338b22959</span> -<span class="hljs-number">19830284</span>- <span class="hljs-number">2022</span>-<span class="hljs-number">06</span>-<span class="hljs-number">29</span> <span class="hljs-number">10</span>:<span class="hljs-number">14</span>:<span class="hljs-number">44.540</span> [http-nio-<span class="hljs-number">6784</span>-exec-<span class="hljs-number">4</span>] INFO  com.ruoyi.common.core.enums.Version - [<span class="hljs-built_in">convert</span>,<span class="hljs-number">70</span>] - 给的 api=<span class="hljs-number">2.0</span><span class="hljs-number">.0</span>,结果= <span class="hljs-number">2.0</span><span class="hljs-number">.0</span> _2_0_0<br>d78d8911-a5d8-<span class="hljs-number">4451</span>-84d1-<span class="hljs-number">894338b22959</span> -<span class="hljs-number">19830284</span>- <span class="hljs-number">2022</span>-<span class="hljs-number">06</span>-<span class="hljs-number">29</span> <span class="hljs-number">10</span>:<span class="hljs-number">14</span>:<span class="hljs-number">44.548</span> [http-nio-<span class="hljs-number">6784</span>-exec-<span class="hljs-number">4</span>] INFO  com.ruoyi.common.core.enums.Version - [<span class="hljs-built_in">convert</span>,<span class="hljs-number">87</span>] - 给的 api=<span class="hljs-number">2.0</span><span class="hljs-number">.1</span>,结果= <span class="hljs-number">2.0</span><span class="hljs-number">.1</span> _latest<br>d78d8911-a5d8-<span class="hljs-number">4451</span>-84d1-<span class="hljs-number">894338b22959</span> -<span class="hljs-number">19830284</span>- <span class="hljs-number">2022</span>-<span class="hljs-number">06</span>-<span class="hljs-number">29</span> <span class="hljs-number">10</span>:<span class="hljs-number">14</span>:<span class="hljs-number">44.548</span> [http-nio-<span class="hljs-number">6784</span>-exec-<span class="hljs-number">4</span>] DEBUG com.zfjs.app.mapper.AuditModelMapper.auditModel - [debug,<span class="hljs-number">137</span>] - ==&gt;  Preparing: select state from audit_model where version = ?<br>d78d8911-a5d8-<span class="hljs-number">4451</span>-84d1-<span class="hljs-number">894338b22959</span> -<span class="hljs-number">19830284</span>- <span class="hljs-number">2022</span>-<span class="hljs-number">06</span>-<span class="hljs-number">29</span> <span class="hljs-number">10</span>:<span class="hljs-number">14</span>:<span class="hljs-number">44.549</span> [http-nio-<span class="hljs-number">6784</span>-exec-<span class="hljs-number">4</span>] DEBUG com.zfjs.app.mapper.AuditModelMapper.auditModel - [debug,<span class="hljs-number">137</span>] - ==&gt; Parameters: <span class="hljs-number">2.0</span><span class="hljs-number">.1</span>(String)<br>d78d8911-a5d8-<span class="hljs-number">4451</span>-84d1-<span class="hljs-number">894338b22959</span> -<span class="hljs-number">19830284</span>- <span class="hljs-number">2022</span>-<span class="hljs-number">06</span>-<span class="hljs-number">29</span> <span class="hljs-number">10</span>:<span class="hljs-number">14</span>:<span class="hljs-number">44.552</span> [http-nio-<span class="hljs-number">6784</span>-exec-<span class="hljs-number">4</span>] DEBUG com.zfjs.app.mapper.AuditModelMapper.auditModel - [debug,<span class="hljs-number">137</span>] - &lt;==      Total: <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>枚举在同一个线程里接收到了<strong>不同</strong>的版本号，排查所有调用了<strong>convert</strong>方法的地方，最终怀疑是接口调用的<strong>getVersion</strong>方法内有问题</p><p>调整接口如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> R&lt;Boolean&gt; <span class="hljs-title function_">auditModel</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>    logger.info(<span class="hljs-string">&quot;req = &#123;&#125; -&#123;&#125;&quot;</span>,request.getHeader(<span class="hljs-string">&quot;x-api&quot;</span>),getRequest().getHeader(<span class="hljs-string">&quot;x-api&quot;</span>));<br>    <span class="hljs-type">Version</span> <span class="hljs-variable">version</span> <span class="hljs-operator">=</span> (getVersion());<br>    <span class="hljs-type">Boolean</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> auditModelService.auditModel(version);<br>    <span class="hljs-keyword">return</span> R.ok(data, MDC.get(<span class="hljs-string">&quot;traceId&quot;</span>) + <span class="hljs-string">&quot;  &quot;</span> + Thread.currentThread().getName() + <span class="hljs-string">&quot;  &quot;</span> + request.getHeader(<span class="hljs-string">&quot;x-api&quot;</span>) + <span class="hljs-string">&quot; &quot;</span> + version.value() + <span class="hljs-string">&quot; &quot;</span> + version);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>结果出现了关键性日志</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">d78d8911</span>-a5d8-<span class="hljs-number">4451</span>-<span class="hljs-number">84</span>d1-<span class="hljs-number">894338</span>b22959 -<span class="hljs-number">19830284</span>- <span class="hljs-number">2022</span>-<span class="hljs-number">06</span>-<span class="hljs-number">29</span> <span class="hljs-number">10</span>:<span class="hljs-number">14</span>:<span class="hljs-number">44</span>.<span class="hljs-number">546</span><span class="hljs-meta"> [http-nio-6784-exec-4] INFO  com.zfjs.app.controller.app.v1.AppVersionController - [auditModel,49] - req = 2.0.0 -2.0.1</span><br></code></pre></td></tr></table></figure><p>两个地方获取的版本号不一致，从最上面贴出的代码可以发现，<strong>getVersion</strong>里调用的<strong>request</strong>是通过<strong>@ModelAttribute</strong>注入的，是不是这个注解不是线程安全的？</p><p>总之先替换掉<strong>getVersion</strong>方法之后，果然一切正常了。</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>并发</tag>
      
      <tag>多线程</tag>
      
      <tag>线程安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql利用索引排序使用条件</title>
    <link href="/2022/06/24/74B8SN.html"/>
    <url>/2022/06/24/74B8SN.html</url>
    
    <content type="html"><![CDATA[<p>本以为排序使用索引是很简单的事情，直接加上就行了。结果实际测试下来问题还蛮多的</p><span id="more"></span><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>翻阅项目日志的时候，发现某条sql出现了 <strong>Out of sort memory,  consider increasing server sort buffer size</strong>。</p><p>进一步排查发现，是该sql使用了文件排序(user filesort)导致的。</p><p>这就很奇怪，本来给排序字段加了索引的，但是没有使用，先临时给一个 <strong>force</strong></p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>本次实验使用的环境如下</p><p>** mysql  Ver 15.1 Distrib 5.5.68-MariaDB, for Linux (x86_64) using readline 5.1  **</p><p>使用的表结构如下，已去除部分无关字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sql"><br><br><span class="hljs-keyword">CREATE TABLE</span> `advisory` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;id&#x27;</span>,<br>  `column_id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT NULL</span>,<br>  `title` <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">CHARACTER SET</span> utf8mb4 <span class="hljs-keyword">NOT NULL</span> ,<br>  `content` text <span class="hljs-keyword">CHARACTER SET</span> utf8mb4,<br>  `state` tinyint(<span class="hljs-number">4</span>) <span class="hljs-keyword">NOT NULL</span> ,<br>  `serial_number` <span class="hljs-type">varchar</span>(<span class="hljs-number">15</span>) <span class="hljs-keyword">CHARACTER SET</span> utf8mb4 <span class="hljs-keyword">NOT NULL</span> ,<br>  `create_by` <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">CHARACTER SET</span> utf8mb4 <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;&#x27;</span> ,<br>  `create_time` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT ,<br>  `update_time` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT ,<br>  `remark` <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">CHARACTER SET</span> utf8mb4 <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `comment_num` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;0&#x27;</span> ,<br>  `ic_id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT ,<br>  <span class="hljs-keyword">PRIMARY KEY</span> (`id`) <span class="hljs-keyword">USING</span> BTREE,<br>  KEY `idx_column` (`column_id`) <span class="hljs-keyword">USING</span> BTREE,<br>  KEY `idx_ic_id` (`ic_id`) <span class="hljs-keyword">USING</span> BTREE,<br>  KEY `idx_create_time` (`create_time`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">1688151</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span><span class="hljs-operator">=</span>utf8_bin ROW_FORMAT<span class="hljs-operator">=</span><span class="hljs-keyword">DYNAMIC</span> <br><br></code></pre></td></tr></table></figure><p>测试sql如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><br><span class="hljs-keyword">SELECT</span> a.id,<br>       a.author,<br>       a.author_type,<br>       a.ic_id,<br>       a.create_by,<br>       a.create_time,<br>       a.update_time,<br>       a.column_id,<br>       a.content,<br>       a.state<br><span class="hljs-keyword">FROM</span> advisory a<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> create_time<br><br></code></pre></td></tr></table></figure><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>直接 explain 上面sql，extra直接写上<strong>filesort</strong>，同时执行的是全表扫描</p><p>但是如果给加一个limit，例如 limit 10</p><p>filesort就消失不见，同时明确使用了<strong>idx_create_time</strong>索引。</p><hr><p>再改造一下sql，去除其他select字段，只保留id字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><br><span class="hljs-keyword">SELECT</span> a.id<br><span class="hljs-keyword">FROM</span> advisory a<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> create_time<br><br></code></pre></td></tr></table></figure><p>explain 结果如下</p><table><thead><tr><th>id</th><th>select_type</th><th>table</th><th>partitions</th><th>type</th><th>possible_keys</th><th>key</th><th>key_len</th><th>ref</th><th>rows</th><th>filtered</th><th>extra</th></tr></thead><tbody><tr><td>1</td><td>SIMPLE</td><td>a</td><td></td><td>index</td><td></td><td>idx_create_time</td><td></td><td></td><td>25</td><td>10</td><td>Using index</td></tr></tbody></table><p>这回使用了索引。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>这样就能够猜测出一个大致的原因了。</p><p>在查询了多余字段，且没有limit的情况下，mysql需要进行回表操作去获取其他字段的数据，这就导致mysql认为<strong>全表扫描</strong>比使用索引更加直接，全表扫描的副作用就是使用<strong>filesort</strong></p><p>在加上limit之后，由于回表数量大幅度减少，这时候使用索引就有价值了，也就没有filesort</p><p>仅查询 id，也就是主键的情况叫做<strong>覆盖索引</strong>，意思是能够从索引中直接获取到需要的数据，不需要回表操作。</p><p>本例中只能使用<strong>id</strong>字段，如果加上了别的字段，哪怕是有索引的字段，也会导致<strong>filesort</strong></p><p>这是因为在每一个索引中，都包括了主键字段和对应的索引字段。<strong>idx_create_time</strong>包括了<strong>id</strong>和<strong>create_time</strong>，而不包括别的字段</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
      <tag>排序</tag>
      
      <tag>索引</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql优化</title>
    <link href="/2022/06/21/F3R2NS.html"/>
    <url>/2022/06/21/F3R2NS.html</url>
    
    <content type="html"><![CDATA[<p>一个小小的改动，优化掉Using temporary; Using filesort</p><span id="more"></span><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>项目开发过程中，发现某条sql出现了以下错误</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">Out of <span class="hljs-keyword">sort</span> <span class="hljs-keyword">memory</span>,  consider increasing server <span class="hljs-keyword">sort</span> buffer <span class="hljs-keyword">size</span><br></code></pre></td></tr></table></figure><p>错误原因是待排序的内容过大，导致 <strong>buffer</strong> 不够用</p><p>其实以前就出过一次问题，当时给排序的 <strong>create_time</strong> 字段加上索引就解决了</p><p>定位到问题sql如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><br><span class="hljs-keyword">SELECT</span> a.id<br><span class="hljs-keyword">from</span>  a<br>         <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span>  ac <span class="hljs-keyword">on</span> a.column_id <span class="hljs-operator">=</span> ac.id<br>         <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span>  ic <span class="hljs-keyword">ON</span> a.ic_id <span class="hljs-operator">=</span> ic.id<br><span class="hljs-keyword">where</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span>(<span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-keyword">from</span>  gb <span class="hljs-keyword">where</span> gb.type <span class="hljs-operator">=</span> <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> gb.service_id <span class="hljs-operator">=</span> ac.id)<br>  <span class="hljs-keyword">and</span> a.`level` <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>  <span class="hljs-keyword">and</span> a.state <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>  <span class="hljs-keyword">and</span> ac.state <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> a.create_time <span class="hljs-keyword">desc</span><br>limit <span class="hljs-number">1</span>, <span class="hljs-number">15</span>;<br><br></code></pre></td></tr></table></figure><h2 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h2><p>首先对sql进行 <strong>explain</strong>，结果如下</p><table><thead><tr><th>id</th><th>select_type</th><th>table</th><th>partitions</th><th>type</th><th>possible_keys</th><th>key</th><th>key_len</th><th>ref</th><th>rows</th><th>filtered</th><th>extra</th></tr></thead><tbody><tr><td>1</td><td>SIMPLE</td><td>ac</td><td></td><td>ALL</td><td>PRIMARY</td><td></td><td></td><td></td><td>25</td><td>10</td><td>Using where; Using temporary; Using filesort</td></tr><tr><td>1</td><td>SIMPLE</td><td>gb</td><td></td><td>ref</td><td>goods_bind_service_id_type_index</td><td>goods_bind_service_id_type_index</td><td>14</td><td>zfapp_app.ac.id,const</td><td>1</td><td>100</td><td>Using where; Not exists; Using index</td></tr><tr><td>1</td><td>SIMPLE</td><td>a</td><td></td><td>ref</td><td>idx_column</td><td>idx_column</td><td>8</td><td>zfapp_app.ac.id</td><td>355</td><td>1</td><td>Using where</td></tr><tr><td>1</td><td>SIMPLE</td><td>ic</td><td></td><td>eq_ref</td><td>PRIMARY</td><td>PRIMARY</td><td>8</td><td>zfapp_app.a.ic_id</td><td>1</td><td>100</td><td></td></tr></tbody></table><p>里面出现了非常可怕的 <strong>Using temporary; Using filesort</strong></p><p>另外出现的顺序也有点奇怪，我是以<strong>a</strong>表为主表，但是出现在第一项的是<strong>ac</strong>表</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>在一点点的测试之后，终于找到了问题所在。</p><p>将<strong>where</strong>之后的 <strong>and ac.state = 1</strong> 移到 <strong>join</strong>后面，最终sql如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><br><span class="hljs-keyword">SELECT</span> a.id<br><span class="hljs-keyword">from</span>  a<br>         <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span>  ac <span class="hljs-keyword">on</span> a.column_id <span class="hljs-operator">=</span> ac.id  <span class="hljs-keyword">and</span> ac.state <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>         <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span>  ic <span class="hljs-keyword">ON</span> a.ic_id <span class="hljs-operator">=</span> ic.id<br><span class="hljs-keyword">where</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span>(<span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-keyword">from</span>  gb <span class="hljs-keyword">where</span> gb.type <span class="hljs-operator">=</span> <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> gb.service_id <span class="hljs-operator">=</span> ac.id)<br>  <span class="hljs-keyword">and</span> a.`level` <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>  <span class="hljs-keyword">and</span> a.state <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> a.create_time <span class="hljs-keyword">desc</span><br>limit <span class="hljs-number">1</span><span class="hljs-operator">|</span> <span class="hljs-number">15</span>;<br></code></pre></td></tr></table></figure><p>再 explain一下</p><table><thead><tr><th>id</th><th>select_type</th><th>table</th><th>partitions</th><th>type</th><th>possible_keys</th><th>key</th><th>key_len</th><th>ref</th><th>rows</th><th>filtered</th><th>extra</th></tr></thead><tbody><tr><td>1</td><td>SIMPLE</td><td>a</td><td></td><td>ref</td><td>index</td><td>idx_create_time</td><td>8</td><td></td><td>12</td><td>1</td><td>Using where; Backward index scan</td></tr><tr><td>1</td><td>SIMPLE</td><td>ic</td><td></td><td>eq_ref</td><td>PRIMARY</td><td>PRIMARY</td><td>8</td><td>zfapp_app.a.ic_id</td><td>1</td><td>100</td><td></td></tr><tr><td>1</td><td>SIMPLE</td><td>ac</td><td></td><td>eq_ref</td><td>PRIMARY</td><td></td><td>8</td><td>zfapp_app.a.column_id</td><td>25</td><td>10</td><td>Using where</td></tr><tr><td>1</td><td>SIMPLE</td><td>gb</td><td></td><td>ref</td><td>goods_bind_service_id_type_index</td><td>goods_bind_service_id_type_index</td><td>14</td><td>zfapp_app.ac.id,const</td><td>1</td><td>100</td><td>Using where; Not exists; Using index</td></tr></tbody></table><p>结果正常了</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>先随便猜测一下，对表的判断写在join里面，就只是对该表做回表，写在外面就是将两个表合并排序，问题很大</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
      <tag>数据库</tag>
      
      <tag>排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>swagger优雅显示枚举</title>
    <link href="/2021/10/18/H1ZH22.html"/>
    <url>/2021/10/18/H1ZH22.html</url>
    
    <content type="html"><![CDATA[<p>项目中使用到了swagger做文档，对于一些枚举值都是手动写的，比较死板。于是对swagger进行改造，更加友好的显示枚举</p><span id="more"></span><h2 id="改动方向"><a href="#改动方向" class="headerlink" title="改动方向"></a>改动方向</h2><p>首先改动目标在两个地方：</p><ul><li>参数里的枚举</li><li>返回model中的枚举</li></ul><h2 id="swagger原生显示效果"><a href="#swagger原生显示效果" class="headerlink" title="swagger原生显示效果"></a>swagger原生显示效果</h2><p>swagger的<strong>@ApiModelProperty</strong>本身支持枚举，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Limits the acceptable values for this parameter.</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * There are three ways to describe the allowable values:</span><br><span class="hljs-comment"> * &lt;ol&gt;</span><br><span class="hljs-comment"> * &lt;li&gt;To set a list of values, provide a comma-separated list.</span><br><span class="hljs-comment"> * For example: &#123;<span class="hljs-doctag">@code</span> first, second, third&#125;.&lt;/li&gt;</span><br><span class="hljs-comment"> * &lt;li&gt;To set a range of values, start the value with &quot;range&quot;, and surrounding by square</span><br><span class="hljs-comment"> * brackets include the minimum and maximum values, or round brackets for exclusive minimum and maximum values.</span><br><span class="hljs-comment"> * For example: &#123;<span class="hljs-doctag">@code</span> range[1, 5]&#125;, &#123;<span class="hljs-doctag">@code</span> range(1, 5)&#125;, &#123;<span class="hljs-doctag">@code</span> range[1, 5)&#125;.&lt;/li&gt;</span><br><span class="hljs-comment"> * &lt;li&gt;To set a minimum/maximum value, use the same format for range but use &quot;infinity&quot;</span><br><span class="hljs-comment"> * or &quot;-infinity&quot; as the second value. For example, &#123;<span class="hljs-doctag">@code</span> range[1, infinity]&#125; means the</span><br><span class="hljs-comment"> * minimum allowable value of this parameter is 1.&lt;/li&gt;</span><br><span class="hljs-comment"> * &lt;/ol&gt;</span><br><span class="hljs-comment"> */</span><br>String <span class="hljs-title function_">allowableValues</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br></code></pre></td></tr></table></figure><p>但是当我给一个Integer类型加上这个属性时，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ApiModelProperty(value = &quot;测试&quot;, allowableValues = &quot;1执行,2测试,3问题,4但是&quot;)</span><br><span class="hljs-keyword">private</span> Integer demo;<br></code></pre></td></tr></table></figure><p>web界面上并没有出现枚举值，只有去掉非数字字符才会显示枚举值</p><p>很明显，这种效果没多大意义，光有数值没有用</p><h2 id="自定义显示效果"><a href="#自定义显示效果" class="headerlink" title="自定义显示效果"></a>自定义显示效果</h2><h3 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h3><p>swagger中有个非常重要的类——<code>org.springframework.plugin.core.Plugin</code>，在这里接口下扩展出了若干种处理器</p><p>这些处理器总体通过责任链模式调用，在此只需要关注两个类</p><ul><li><code>springfox.documentation.spi.schema.ModelPropertyBuilderPlugin</code><blockquote><p>负责解析 Model 类，其两个子类<code>ApiModelPropertyPropertyBuilder</code>和<code>XmlPropertyPlugin</code>分别处理<code>@ApiModelProperty</code>以及<code>@XmlElement</code>、<code>@XmlAttribute</code></p></blockquote></li><li><code>springfox.documentation.spi.service.ExpandedParameterBuilderPlugin</code><blockquote><p>负责处理参数上的某一个非嵌套类型；同样两个子类，需要处理的是<code>springfox.documentation.spring.web.readers.parameter.ExpandedParameterBuilder</code></p></blockquote></li></ul><p>现在只需要提供两个类，覆盖上述类的逻辑即可。</p><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><p>为了更友好的显示枚举，重点在两个方面：一个是需要自定义枚举代表的值，而不是直接使用其ordinal()或者name；其次是要文字说明枚举代表的意义</p><p>因此，定义一个接口如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 枚举扩展</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">EnumDescription</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 枚举值可能并非使用序号，而是自定义code</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 实际使用的code值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">getCode</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 说明描述</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 描述文本</span><br><span class="hljs-comment">     */</span><br>    String <span class="hljs-title function_">getInfo</span><span class="hljs-params">()</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>每个Enum需要继承该接口，并重写方法，例如以下例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 跳转类容</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">ContentTypeEnum</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EnumDescription</span> &#123;<br>    ADVISORY(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;测试1&quot;</span>),<br>    GRAPHIC_LIVE(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;测试2&quot;</span>),<br>    ;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Integer code;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String info;<br><br>    ContentTypeEnum(Integer code, String info) &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>        <span class="hljs-built_in">this</span>.info = info;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ContentTypeEnum <span class="hljs-title function_">valueOf</span><span class="hljs-params">(Integer code)</span> &#123;<br>        <span class="hljs-keyword">for</span> (ContentTypeEnum result : ContentTypeEnum.values()) &#123;<br>            <span class="hljs-keyword">if</span> (result.code.equals(code)) &#123;<br>                <span class="hljs-keyword">return</span> result;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> code;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> info;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在后续的逻辑中，类型判断就应该使用<code>EnumDescription</code>而非<code>Enum</code>了</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>首先是处理Model的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> com.fasterxml.classmate.ResolvedType;<br><span class="hljs-keyword">import</span> com.google.common.base.Optional;<br><span class="hljs-keyword">import</span> com.ruoyi.common.core.enums.EnumDescription;<br><span class="hljs-keyword">import</span> io.swagger.annotations.ApiModelProperty;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> springfox.documentation.schema.Annotations;<br><span class="hljs-keyword">import</span> springfox.documentation.service.AllowableListValues;<br><span class="hljs-keyword">import</span> springfox.documentation.spi.DocumentationType;<br><span class="hljs-keyword">import</span> springfox.documentation.spi.schema.ModelPropertyBuilderPlugin;<br><span class="hljs-keyword">import</span> springfox.documentation.spi.schema.contexts.ModelPropertyContext;<br><span class="hljs-keyword">import</span> springfox.documentation.swagger.schema.ApiModelProperties;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.stream.Collectors;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EnumPropertyDisplayConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ModelPropertyBuilderPlugin</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">apply</span><span class="hljs-params">(ModelPropertyContext context)</span> &#123;<br>        Optional&lt;ApiModelProperty&gt; annotation = Optional.absent();<br><br>        <span class="hljs-keyword">if</span> (context.getAnnotatedElement().isPresent()) &#123;<br>            annotation = annotation.or(ApiModelProperties.findApiModePropertyAnnotation(context.getAnnotatedElement().get()));<br>        &#125;<br>        <span class="hljs-keyword">if</span> (context.getBeanPropertyDefinition().isPresent()) &#123;<br>            annotation = annotation.or(Annotations.findPropertyAnnotation(<br>                    context.getBeanPropertyDefinition().get(),<br>                    ApiModelProperty.class));<br>        &#125;<br><br>        <span class="hljs-keyword">final</span> Class&lt;?&gt; rawPrimaryType = context.getBeanPropertyDefinition().get().getRawPrimaryType();<br>        <span class="hljs-comment">//过滤得到目标类型</span><br>        <span class="hljs-keyword">if</span> (annotation.isPresent() &amp;&amp; EnumDescription.class.isAssignableFrom(rawPrimaryType)) &#123;<br>            log.info(<span class="hljs-string">&quot;des=&#123;&#125;&quot;</span>, annotation.get().value());<br>            <span class="hljs-comment">//获取CodedEnum的code值</span><br>            EnumDescription[] values = (EnumDescription[]) rawPrimaryType.getEnumConstants();<br>            <span class="hljs-keyword">final</span> List&lt;String&gt; displayValues = Arrays.stream(values).map(codedEnum -&gt; codedEnum.getCode() + codedEnum.getInfo()).collect(Collectors.toList());<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">AllowableListValues</span> <span class="hljs-variable">allowableListValues</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AllowableListValues</span>(displayValues, rawPrimaryType.getTypeName());<br>            <span class="hljs-comment">//固定设置为int类型</span><br>            <span class="hljs-keyword">final</span> <span class="hljs-type">ResolvedType</span> <span class="hljs-variable">resolvedType</span> <span class="hljs-operator">=</span> context.getResolver().resolve(<span class="hljs-type">int</span>.class);<br>            context.getBuilder().description(annotation.get().value() + <span class="hljs-string">&quot;:&quot;</span> + displayValues).type(resolvedType).allowableValues(allowableListValues);<br><span class="hljs-comment">//            context.getBuilder().allowableValues(allowableListValues).type(resolvedType);</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">supports</span><span class="hljs-params">(DocumentationType documentationType)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><hr><p>然后是覆盖参数的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> com.fasterxml.classmate.ResolvedType;<br><span class="hljs-keyword">import</span> com.fasterxml.classmate.TypeResolver;<br><span class="hljs-keyword">import</span> com.google.common.base.Function;<br><span class="hljs-keyword">import</span> com.google.common.base.Optional;<br><span class="hljs-keyword">import</span> com.ruoyi.common.core.enums.EnumDescription;<br><span class="hljs-keyword">import</span> org.springframework.core.annotation.Order;<br><span class="hljs-keyword">import</span> springfox.documentation.schema.Enums;<br><span class="hljs-keyword">import</span> springfox.documentation.schema.ModelRef;<br><span class="hljs-keyword">import</span> springfox.documentation.schema.ModelReference;<br><span class="hljs-keyword">import</span> springfox.documentation.service.AllowableListValues;<br><span class="hljs-keyword">import</span> springfox.documentation.service.AllowableValues;<br><span class="hljs-keyword">import</span> springfox.documentation.spi.DocumentationType;<br><span class="hljs-keyword">import</span> springfox.documentation.spi.schema.EnumTypeDeterminer;<br><span class="hljs-keyword">import</span> springfox.documentation.spi.service.contexts.ParameterExpansionContext;<br><span class="hljs-keyword">import</span> springfox.documentation.spring.web.readers.parameter.ExpandedParameterBuilder;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.stream.Collectors;<br><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> com.google.common.base.Strings.isNullOrEmpty;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> com.google.common.collect.Lists.transform;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> springfox.documentation.schema.Collections.*;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> springfox.documentation.schema.Collections.isContainerType;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> springfox.documentation.schema.Types.typeNameFor;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> springfox.documentation.service.Parameter.DEFAULT_PRECEDENCE;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> springfox.documentation.swagger.common.SwaggerPluginSupport.SWAGGER_PLUGIN_ORDER;<br><br><span class="hljs-meta">@Order(SWAGGER_PLUGIN_ORDER + 1000)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EnumParamBuilderPlugin</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ExpandedParameterBuilder</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> TypeResolver resolver;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> EnumTypeDeterminer enumTypeDeterminer;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">EnumParamBuilderPlugin</span><span class="hljs-params">(TypeResolver resolver, EnumTypeDeterminer enumTypeDeterminer)</span> &#123;<br>        <span class="hljs-built_in">super</span>(resolver, enumTypeDeterminer);<br>        <span class="hljs-built_in">this</span>.resolver = resolver;<br>        <span class="hljs-built_in">this</span>.enumTypeDeterminer = enumTypeDeterminer;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">apply</span><span class="hljs-params">(ParameterExpansionContext context)</span> &#123;<br>        <span class="hljs-type">AllowableValues</span> <span class="hljs-variable">allowable</span> <span class="hljs-operator">=</span> allowableValues(context.getFieldType().getErasedType());<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> isNullOrEmpty(context.getParentName())<br>                ? context.getFieldName()<br>                : String.format(<span class="hljs-string">&quot;%s.%s&quot;</span>, context.getParentName(), context.getFieldName());<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">typeName</span> <span class="hljs-operator">=</span> context.getDataTypeName();<br>        <span class="hljs-type">ModelReference</span> <span class="hljs-variable">itemModel</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">ResolvedType</span> <span class="hljs-variable">resolved</span> <span class="hljs-operator">=</span> resolver.resolve(context.getFieldType());<br>        <span class="hljs-keyword">if</span> (isContainerType(resolved)) &#123;<br>            resolved = fieldType(context).or(resolved);<br>            <span class="hljs-type">ResolvedType</span> <span class="hljs-variable">elementType</span> <span class="hljs-operator">=</span> collectionElementType(resolved);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">itemTypeName</span> <span class="hljs-operator">=</span> typeNameFor(elementType.getErasedType());<br>            <span class="hljs-type">AllowableValues</span> <span class="hljs-variable">itemAllowables</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">if</span> (enumTypeDeterminer.isEnum(elementType.getErasedType())) &#123;<br>                itemAllowables = Enums.allowableValues(elementType.getErasedType());<br>                itemTypeName = <span class="hljs-string">&quot;int&quot;</span>;<br>            &#125;<br>            typeName = containerType(resolved);<br>            itemModel = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelRef</span>(itemTypeName, itemAllowables);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (enumTypeDeterminer.isEnum(resolved.getErasedType())) &#123;<br>            typeName = <span class="hljs-string">&quot;int&quot;</span>;<br>        &#125;<br>        context.getParameterBuilder()<br>                .name(name)<br>                .description(<span class="hljs-literal">null</span>)<br>                .defaultValue(<span class="hljs-literal">null</span>)<br>                .required(Boolean.FALSE)<br>                .allowMultiple(isContainerType(resolved))<br>                .type(resolved)<br>                .modelRef(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelRef</span>(typeName, itemModel))<br>                .allowableValues(allowable)<br>                .parameterType(context.getParameterType())<br>                .order(DEFAULT_PRECEDENCE)<br>                .parameterAccess(<span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Optional&lt;ResolvedType&gt; <span class="hljs-title function_">fieldType</span><span class="hljs-params">(ParameterExpansionContext context)</span> &#123;<br>        <span class="hljs-keyword">return</span> Optional.of(context.getFieldType());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">supports</span><span class="hljs-params">(DocumentationType delimiter)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> AllowableValues <span class="hljs-title function_">allowableValues</span><span class="hljs-params">(Class&lt;?&gt; fieldType)</span> &#123;<br><br>        <span class="hljs-type">AllowableListValues</span> <span class="hljs-variable">allowable</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span> (enumTypeDeterminer.isEnum(fieldType)) &#123;<br>            List&lt;String&gt; enumValues = getEnumValues(fieldType);<br>            allowable = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AllowableListValues</span>(enumValues, <span class="hljs-string">&quot;LIST&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> allowable;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> List&lt;String&gt; <span class="hljs-title function_">getEnumValues</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Class&lt;?&gt; subject)</span> &#123;<br><br>        <span class="hljs-keyword">if</span> (EnumDescription.class.isAssignableFrom(subject)) &#123;<br>            EnumDescription[] enumConstants = (EnumDescription[]) subject.getEnumConstants();<br>            <span class="hljs-keyword">return</span> Arrays.stream(enumConstants).map(f -&gt; f.getCode() + f.getInfo()).collect(Collectors.toList());<br>        &#125;<br>        <span class="hljs-keyword">return</span> transform(Arrays.asList(subject.getEnumConstants()), (Function&lt;Object, String&gt;) input -&gt; input.toString());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><hr><p>然后将两个类注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> EnumPropertyDisplayConfig <span class="hljs-title function_">enumDisplayConfig</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EnumPropertyDisplayConfig</span>();<br>&#125;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> ExpandedParameterBuilder <span class="hljs-title function_">enumParamBuilderPlugin</span><span class="hljs-params">(TypeResolver resolver, EnumTypeDeterminer enumTypeDeterminer)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EnumParamBuilderPlugin</span>(resolver, enumTypeDeterminer);<br>&#125;<br></code></pre></td></tr></table></figure><p>需要注意的是，swagger默认的处理器在容器中依然存在，只是其执行结果被自定义的处理器覆盖了。</p><p>另外，在注入参数处理器时，由于责任链中的处理器顺序问题，可能不会生效，因此需要<code>@Order</code>或者使用<code>Ordered</code>接口指定顺序为最末</p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>最终效果如下：</p><p><img src="https://article.biliimg.com/bfs/article/012b4ddbc13725626653bb7c1d2533dbc31ae1d9.png" alt="效果"></p><p>以后如果有值变动，只需要修改枚举类即可，相关model直接使用Enum，只需要注明参数作用即可</p><h2 id="附"><a href="#附" class="headerlink" title="附"></a>附</h2><p>同时可以对mybatis typehandler和jackson序列化做一下处理，实现代码中完全使用枚举类。因为前两者默认情况下都是使用的name，不一定符合实际情况</p><h2 id="2021-10-28-补充"><a href="#2021-10-28-补充" class="headerlink" title="2021-10-28 补充"></a>2021-10-28 补充</h2><p>原本的参数显示效果很好，但是后来又发现了新的问题</p><ul><li><p>请求调试</p><blockquote><p>直接在availableValues中写说明，会影响后面调试请求<br>这样类型不匹配，请求发不出去</p></blockquote></li><li><p>容器</p><blockquote><p>当使用一个容器存储枚举时，当子项类型为int时，前端无法显示字符串的availableValues；</p></blockquote></li></ul><hr><p>因此，availableValues还是使用int，文字说明改到description里</p><p>解决思路有三种，一是继续在原本的<code>EnumParamBuilderPlugin</code>上修改；二是直接覆盖<code>SwaggerExpandedParameterBuilder</code>的逻辑；三是写一个<code>ExpandedParameterBuilderPlugin</code>只处理description部分</p><p>这里我选择第三种方案</p><p>新版代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> com.fasterxml.classmate.ResolvedType;<br><span class="hljs-keyword">import</span> com.fasterxml.classmate.TypeResolver;<br><span class="hljs-keyword">import</span> com.google.common.base.Function;<br><span class="hljs-keyword">import</span> com.google.common.base.Optional;<br><span class="hljs-keyword">import</span> com.ruoyi.common.core.enums.EnumDescription;<br><span class="hljs-keyword">import</span> io.swagger.annotations.ApiModelProperty;<br><span class="hljs-keyword">import</span> io.swagger.annotations.ApiParam;<br><span class="hljs-keyword">import</span> org.springframework.core.annotation.Order;<br><span class="hljs-keyword">import</span> springfox.documentation.spi.DocumentationType;<br><span class="hljs-keyword">import</span> springfox.documentation.spi.schema.EnumTypeDeterminer;<br><span class="hljs-keyword">import</span> springfox.documentation.spi.service.ExpandedParameterBuilderPlugin;<br><span class="hljs-keyword">import</span> springfox.documentation.spi.service.contexts.ParameterExpansionContext;<br><span class="hljs-keyword">import</span> springfox.documentation.spring.web.DescriptionResolver;<br><span class="hljs-keyword">import</span> springfox.documentation.swagger.common.SwaggerPluginSupport;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.stream.Collectors;<br><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> com.google.common.collect.Lists.transform;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> springfox.documentation.schema.Collections.*;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> springfox.documentation.swagger.common.SwaggerPluginSupport.SWAGGER_PLUGIN_ORDER;<br><br><span class="hljs-meta">@Order(SWAGGER_PLUGIN_ORDER + 1001)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EnumDescriptionExpandedParameterBuilder</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ExpandedParameterBuilderPlugin</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> DescriptionResolver descriptions;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> EnumTypeDeterminer enumTypeDeterminer;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> TypeResolver resolver;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">EnumDescriptionExpandedParameterBuilder</span><span class="hljs-params">(</span><br><span class="hljs-params">            DescriptionResolver descriptions,</span><br><span class="hljs-params">            TypeResolver typeResolver,</span><br><span class="hljs-params">            EnumTypeDeterminer enumTypeDeterminer)</span> &#123;<br>        <span class="hljs-built_in">this</span>.resolver = typeResolver;<br>        <span class="hljs-built_in">this</span>.descriptions = descriptions;<br>        <span class="hljs-built_in">this</span>.enumTypeDeterminer = enumTypeDeterminer;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">apply</span><span class="hljs-params">(ParameterExpansionContext context)</span> &#123;<br>        Optional&lt;ApiModelProperty&gt; apiModelPropertyOptional = context.findAnnotation(ApiModelProperty.class);<br>        <span class="hljs-keyword">if</span> (apiModelPropertyOptional.isPresent()) &#123;<br>            fromApiModelProperty(context, apiModelPropertyOptional.get());<br>        &#125;<br>        Optional&lt;ApiParam&gt; apiParamOptional = context.findAnnotation(ApiParam.class);<br>        <span class="hljs-keyword">if</span> (apiParamOptional.isPresent()) &#123;<br>            fromApiParam(context, apiParamOptional.get());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">supports</span><span class="hljs-params">(DocumentationType delimiter)</span> &#123;<br>        <span class="hljs-keyword">return</span> SwaggerPluginSupport.pluginDoesApply(delimiter);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fromApiParam</span><span class="hljs-params">(ParameterExpansionContext context, ApiParam apiParam)</span> &#123;<br>        context.getParameterBuilder()<br>                .description(description(context, apiParam.value()));<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fromApiModelProperty</span><span class="hljs-params">(ParameterExpansionContext context, ApiModelProperty apiModelProperty)</span> &#123;<br>        context.getParameterBuilder()<br>                .description(description(context, apiModelProperty.value()));<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">description</span><span class="hljs-params">(ParameterExpansionContext context, String value)</span> &#123;<br>        value = descriptions.resolve(value);<br><br>        <span class="hljs-comment">//判断是否是枚举</span><br>        <span class="hljs-type">ResolvedType</span> <span class="hljs-variable">resolved</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.resolver.resolve(context.getFieldType());<br>        <span class="hljs-keyword">if</span> (isContainerType(resolved)) &#123;<br>            resolved = fieldType(context).or(resolved);<br>            <span class="hljs-type">ResolvedType</span> <span class="hljs-variable">elementType</span> <span class="hljs-operator">=</span> collectionElementType(resolved);<br>            <span class="hljs-keyword">if</span> (enumTypeDeterminer.isEnum(elementType.getErasedType())) &#123;<br>                <span class="hljs-keyword">return</span> value + <span class="hljs-string">&quot;:&quot;</span> + enumValues(elementType.getErasedType());<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (enumTypeDeterminer.isEnum(resolved.getErasedType())) &#123;<br>            <span class="hljs-keyword">return</span> value + <span class="hljs-string">&quot;:&quot;</span> + enumValues(resolved.getErasedType());<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> value;<br><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Optional&lt;ResolvedType&gt; <span class="hljs-title function_">fieldType</span><span class="hljs-params">(ParameterExpansionContext context)</span> &#123;<br>        <span class="hljs-keyword">return</span> Optional.of(context.getFieldType());<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> List&lt;String&gt; <span class="hljs-title function_">enumValues</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Class&lt;?&gt; subject)</span> &#123;<br><br>        <span class="hljs-keyword">if</span> (EnumDescription.class.isAssignableFrom(subject)) &#123;<br>            EnumDescription[] enumConstants = (EnumDescription[]) subject.getEnumConstants();<br>            <span class="hljs-keyword">return</span> Arrays.stream(enumConstants).map(f -&gt; f.getCode() + f.getInfo()).collect(Collectors.toList());<br>        &#125;<br>        <span class="hljs-keyword">return</span> transform(Arrays.asList(subject.getEnumConstants()), (Function&lt;Object, String&gt;) Object::toString);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>文档</tag>
      
      <tag>swagger</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>有限状态机解析json</title>
    <link href="/2021/09/23/AS44AY.html"/>
    <url>/2021/09/23/AS44AY.html</url>
    
    <content type="html"><![CDATA[<p>前段时间看了篇博客，了解了有限状态机这么个概念。于是有了个想法想实验一下</p><span id="more"></span><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><p>首先一些基础概念可以参见<a href="https://zhuanlan.zhihu.com/p/46347732">这篇博文</a>。</p><p>状态机就是接收一个输入，根据输入决定下一个状态应该是什么，然后继续接收输入，判断状态是否正确。</p><p>继续抽象输入为一个Token，状态机有一个初始状态。状态机每接收一个token，就判断是否符合期望，符合则转换到下一个状态。</p><p>伪代码如下：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><br>expect_status <span class="hljs-operator">=</span> init_status<span class="hljs-comment">;</span><br><br>while (hasToken())&#123;<br><br>    if(token()<span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-number">1</span>)&#123;<br>        if( expect_status <span class="hljs-operator">=</span><span class="hljs-operator">=</span> token_status)&#123;<br>            expect_status <span class="hljs-operator">=</span> new_except_status<span class="hljs-comment">;</span><br>        &#125;<br>    &#125;<br><br><br>&#125;<br><br></code></pre></td></tr></table></figure><hr><p>回到json解析。</p><p>首先我参考了<a href="https://www.liaoxuefeng.com/article/994977272296736">这篇博客</a></p><p>文章中对于细节没有过多描述，我再做一些补充。</p><h3 id="Token"><a href="#Token" class="headerlink" title="Token"></a>Token</h3><p>token代表一种输入，是对字符或者字节的抽象。token和状态并非一种固定的对应关系。</p><p>json中可以定义token如下：</p><ul><li>DOCUMENT_START,</li><li>DOCUMENT_END,</li><li>OBJECT_START,</li><li>OBJECT_END,</li><li>ARRAY_START,</li><li>ARRAY_END,</li><li>BOOLEAN,</li><li>SEP_COLON,</li><li>SEP_COMMA,</li><li>TEXT,</li><li>NUMBER,</li><li>NULL,</li><li>ILL, //非法</li></ul><h3 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h3><p>为了编码方便，状态实际上是在指代期望的下一个状态。例如读取到一个 <strong>“</strong> ，那期望就是一个字符串，当然这个字符串可能用在不同的位置，例如OBJECT-KEY，ARRAY-VALUE之类的</p><p>可以定义状态如下</p><ul><li>EXPECT_DOCUMENT_START</li><li>EXPECT_DOCUMENT_END</li><li>EXPECT_OBJECT_START</li><li>EXPECT_OBJECT_END</li><li>EXPECT_ARRAY_START</li><li>EXPECT_ARRAY_END</li><li>EXPECT_OBJECT_KEY</li><li>EXPECT_OBJECT_VALUE</li><li>EXPECT_ARRAY_VALUE</li><li>EXPECT_COMMA</li></ul><p>要注意，状态可能处于复合状态，同时期待多个状态，所以使用二的幂指数和位运算来处理状态</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>最终实现位于<a href="https://github.com/inkroom/json">https://github.com/inkroom/json</a></p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>json</tag>
      
      <tag>状态机</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>工具类设计的反面教材</title>
    <link href="/2021/08/05/ZSZZ9T.html"/>
    <url>/2021/08/05/ZSZZ9T.html</url>
    
    <content type="html"><![CDATA[<p>在维护公司交由外包团队开发的项目时，发现了一个redis操作类。里面的方法每一个都充满了不可思议，完全想不到的写法</p><span id="more"></span><p>话不多说，直接贴代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: spring boot 的redis工具类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisUtil</span> &#123;<br>    <span class="hljs-comment">// 引入了两个template完全多余</span><br>    <span class="hljs-meta">@SuppressWarnings(&quot;rawtypes&quot;)</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 批量删除对应的value</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> keys</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String... keys)</span> &#123;<br>        <span class="hljs-keyword">for</span> (String key : keys) &#123;<br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">            template完全支持批量删除，底下的方法就用到了，这里偏要一个一个删</span><br><span class="hljs-comment">             */</span><br>            remove(key);<br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 批量删除key</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pattern</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removePattern</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String pattern)</span> &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        暂且不提keys命令大量数据下不可用，ide都提示了可能存在空指针</span><br><span class="hljs-comment">         */</span><br>        Set&lt;Serializable&gt; keys = redisTemplate.keys(pattern);<br>        <span class="hljs-keyword">if</span> (keys.size() &gt; <span class="hljs-number">0</span>)<br>            redisTemplate.delete(keys);<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除对应的value</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String key)</span> &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 这里就完全想不通了，删除命令是有返回值的，删除一个不存在的key没有任何问题</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">if</span> (exists(key)) &#123;<br>            redisTemplate.delete(key);<br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断缓存中是否有对应的value</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">exists</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String key)</span> &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * hasKey返回的是包装类，这里唯一能想到的是给方法一个别名</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">return</span> redisTemplate.hasKey(key);<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 读取缓存</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String key)</span> &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 啊。。。这。。。。上面的StringRedisTemplate是拿来干嘛的？？而且怎么可能每次都new一个</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        redisTemplate.setValueSerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>());<br>        ValueOperations&lt;Serializable, Object&gt; operations = redisTemplate.opsForValue();<br>        result = operations.get(key);<br>        <span class="hljs-keyword">if</span> (result == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result.toString();<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 写入缓存</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">set</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String key, Object value)</span> &#123;<br>        <span class="hljs-comment">// 这里只是写得啰嗦了一点，倒不是什么大问题</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            ValueOperations&lt;Serializable, Object&gt; operations = redisTemplate.opsForValue();<br>            operations.set(key, value);<br>            result = <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 写入缓存</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">set</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String key, Object value, Long expireTime)</span> &#123;<br>        <span class="hljs-comment">// 但凡多按一个逗号，就知道一个命令就能搞定</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            ValueOperations&lt;Serializable, Object&gt; operations = redisTemplate.opsForValue();<br>            operations.set(key, value);<br>            redisTemplate.expire(key, expireTime, TimeUnit.SECONDS);<br>            result = <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hmset</span><span class="hljs-params">(String key, Map&lt;String, String&gt; value)</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            redisTemplate.opsForHash().putAll(key, value);<br>            result = <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> Map&lt;String, String&gt; <span class="hljs-title function_">hmget</span><span class="hljs-params">(String key)</span> &#123;<br>        Map&lt;String, String&gt; result = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            result = redisTemplate.opsForHash().entries(key);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setStr</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String key, <span class="hljs-keyword">final</span> String value, <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> expireTime)</span> &#123;<br>        <span class="hljs-comment">// 恭喜啊，又学到了新知识，学习速度不可想象啊。就是问一句工资是按代码行数算的嘛？</span><br>        stringRedisTemplate.opsForValue().set(key, value, expireTime, TimeUnit.SECONDS);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getStr</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String key)</span>&#123;<br>        <span class="hljs-keyword">return</span> stringRedisTemplate.opsForValue().get(key);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delStr</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String key)</span>&#123;<br>        <span class="hljs-comment">// 对不起，我已经没话说了,只是希望早日治好失忆症</span><br>        <span class="hljs-keyword">if</span>(redisTemplate.hasKey(key))&#123;<br>            redisTemplate.delete(key);<br>        &#125;<br>    &#125;<br><br>&#125;<br> <br></code></pre></td></tr></table></figure><p>上面的代码充满了不可思议，写这代码的人一定有着多重人格。</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
      <tag>设计</tag>
      
      <tag>反面教材</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实现actuator访问安全</title>
    <link href="/2021/07/23/2TE8ATE.html"/>
    <url>/2021/07/23/2TE8ATE.html</url>
    
    <content type="html"><![CDATA[<p>actuator被用于实现程序的监控，但是直接暴露相关接口非常危险，此处就需要探讨一下如何保证安全</p><span id="more"></span><h2 id="危险来源"><a href="#危险来源" class="headerlink" title="危险来源"></a>危险来源</h2><p>在SpringCloud的常规架构中，使用Gateway对外暴露服务，其他服务由Gateway代为转发。再搭建Admin用于GUI展示，利用注册中心获取实例地址端口。</p><p>一般情况下，只有Gateway会提供外网访问，其他微服务仅在内网访问，而Admin访问的时候也是获取的内网地址，比较安全。</p><p>所以最危险的就是Gateway。</p><p>最简单直接的安全方案，就是给Gateway加上Security，Admin访问的时候带上认证信息。</p><p>但是该方案过于繁琐，不是很和我心意。</p><p>经过一番搜索后，找到另一种方案，actuator支持使用别的端口。</p><h2 id="更换端口"><a href="#更换端口" class="headerlink" title="更换端口"></a>更换端口</h2><p>只需要如下配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">management.server.port</span>=<span class="hljs-string">2999</span><br></code></pre></td></tr></table></figure><p>这样程序会使用两个端口，一个普通的请求端口，一个actuator使用的端口。</p><p>但是，经过我的测试，实际上两个端口都能访问actuator，意思就是不管哪个端口，都可以访问<strong><a href="http://ip:port/actuator/health">http://ip:port/actuator/health</a></strong>等url。</p><h2 id="关闭普通端口访问"><a href="#关闭普通端口访问" class="headerlink" title="关闭普通端口访问"></a>关闭普通端口访问</h2><p>既然新端口可以访问，那就把原本端口的相关路由给关闭了即可，给Gateway加入以下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> RouteLocator <span class="hljs-title function_">locatorProd</span><span class="hljs-params">(RouteLocatorBuilder builder)</span> &#123;<br>    <span class="hljs-comment">//屏蔽监控端点</span><br>    contract.route(<span class="hljs-string">&quot;actuator&quot;</span>, f -&gt; f.path(<span class="hljs-string">&quot;/actuator/**&quot;</span>).filters(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>&lt;GatewayFilterSpec, UriSpec&gt;() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> UriSpec <span class="hljs-title function_">apply</span><span class="hljs-params">(GatewayFilterSpec gatewayFilterSpec)</span> &#123;<br>            <span class="hljs-keyword">return</span> gatewayFilterSpec.filter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">GatewayFilter</span>() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> Mono&lt;Void&gt; <span class="hljs-title function_">filter</span><span class="hljs-params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;<br>                    <span class="hljs-comment">// 直接404</span><br>                    <span class="hljs-type">ServerHttpResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> exchange.getResponse();<br>                    response.setStatusCode(HttpStatus.NOT_FOUND);<br>                    <span class="hljs-keyword">return</span> response.writeWith(Mono.just(response.bufferFactory().wrap(<span class="hljs-string">&quot;404了&quot;</span>.getBytes(StandardCharsets.UTF_8))));<br>                &#125;<br>            &#125;);<br>        &#125;<br>    &#125;).uri(<span class="hljs-string">&quot;lb://404&quot;</span>));<span class="hljs-comment">//反正不会到后面，地址随便填一个就行</span><br>    <span class="hljs-keyword">return</span> contract.build();<br>&#125;<br></code></pre></td></tr></table></figure><p>这里使用了一个过滤器，直接返回404状态。</p><h2 id="admin访问"><a href="#admin访问" class="headerlink" title="admin访问"></a>admin访问</h2><p>关闭的普通端口的访问，同时Admin那边也不能访问了，因为Admin还在访问原端口。</p><p>在翻阅<a href="https://codecentric.github.io/spring-boot-admin/2.1.6/#_converting_serviceinstances">admin文档</a>后，只要在注册中心中把使用的新端口带上即可。于是增加以下配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">eureka.instance.metadata-map.management.port</span>=<span class="hljs-string">$&#123;management.server.port&#125;</span><br></code></pre></td></tr></table></figure><p>现在基本就可以正常访问了。但是我还想将这个新端口随机化，将来如果网关如果要更新，也能少设置一个端口，减少端口冲突的风险</p><h2 id="随机端口"><a href="#随机端口" class="headerlink" title="随机端口"></a>随机端口</h2><p>只需要<strong>port=0</strong>就是随机端口了。</p><p>但是这又有一个新问题，由于配置文件将端口设置为0，那么注册中心记录的端口也还是0，admin就无法访问了。</p><hr><p>解决思路是将端口的获取由代码完成，并且将端口写入配置项中。</p><p>这里可以采用<a href="https://github.com/ulisesbocchio/jasypt-spring-boot">jasypt</a>，这是一套主要用于配置项加密的库，但是两项功能没有本质区别。只需要实现一个自定义的解密器用来获取随机端口，后续的写入配置项操作就由库负责处理。</p><hr><p>正如我之前不愿意引入security一样，引入<a href="https://github.com/ulisesbocchio/jasypt-spring-boot">jasypt</a>也不和我心意。</p><p>于是我自己琢磨出了一套方案，使用<code>EnvironmentPostProcessor</code>，实现方法如下：</p><ul><li><p>创建一个<code>EnvironmentPostProcessor</code>实现类，基本代码如下</p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PortEnvironmentPostProcessor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EnvironmentPostProcessor</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postProcessEnvironment</span><span class="hljs-params">(ConfigurableEnvironment environment, S&gt; pringApplication application)</span> &#123;<br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">availableTcpPort</span> <span class="hljs-operator">=</span> SocketUtils.findAvailableTcpPort(<span class="hljs-number">6001</span>, <span class="hljs-number">12999</span>);<br><br>        properties.put(<span class="hljs-string">&quot;management.server.port&quot;</span>,availableTcpPort);<br>        properties.put(<span class="hljs-string">&quot;eureka.instance.metadata-map.management.port&quot;</span>,availableTcpPort);<br>        <span class="hljs-type">PropertiesPropertySource</span> <span class="hljs-variable">source</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PropertiesPropertySource</span>(<span class="hljs-string">&quot;CONSUME&quot;</span>, properties);<br>        environment.getPropertySources().addFirst(source);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></blockquote></li><li><p>创建<strong>META-INF/spring.factories</strong>文件，内容如下</p><blockquote><p>org.springframework.boot.env.EnvironmentPostProcessor=cn.inkroom.study.cloud.gateway.PortEnvironmentPostProcessor</p></blockquote></li></ul><p>需要特别注明几点：</p><ul><li>是否覆盖原本配置文件中的某个配置项是有调用<strong>addFirst</strong>还是<strong>addLast</strong>方法决定的，越在前面的优先级越高</li><li>默认情况下，自定义的<code>PortEnvironmentPostProcessor</code>总是在第一个被调用，因此无法获取其他配置项，意思是不能用于加解密，但是可以用于提供一些来自别的途径，较为动态的配置项</li></ul><hr><p>除了更换端口外，还可以更换context-path，但是我就没有再做测试了。</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
      <category>SpringCloud</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>SpringCloud</tag>
      
      <tag>安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Gateway中RouteDefinition如何创建</title>
    <link href="/2021/07/21/2BR4GYX.html"/>
    <url>/2021/07/21/2BR4GYX.html</url>
    
    <content type="html"><![CDATA[<p>在Gateway中实现动态路由需要使用到一个RouteDefinition类，本文将探讨这个类该如何填充数据</p><span id="more"></span><h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p><strong>RouteDefinition</strong>是Gateway中用于存储路由元数据的类，其内可分为三部分：</p><ul><li>路由本身</li><li>断言</li><li>过滤器</li></ul><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p>路由本身有三个数据：</p><ul><li><code>String id</code> 路由id，gateway中没有要求id唯一，只是一个便于定位和查看的标志</li><li><code>URI uri</code> 要代理的url，支持服务发现就写成<strong>lb://appName</strong></li><li><code>int order</code> 顺序</li></ul><h2 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h2><p>断言是存放在<code>ist&lt;PredicateDefinition&gt;</code>中，再查看<code>PredicateDefinition</code>的属性</p><ul><li><code>String name</code> 断言的名称，在内置的断言中，例如<code>HostRoutePredicate</code>，其name就<strong>Host</strong></li><li><code>Map&lt;String, String&gt; args</code> 这里是断言可能存在的参数，这里较为复杂，后续和过滤器一并解释</li></ul><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><p>过滤器存放在<code>List&lt;FilterDefinition&gt; filters</code>中，再查看<code>FilterDefinition</code>的属性</p><ul><li><code>String name</code> 过滤器的名称，在内置的过滤器中，例如<code>RemoveCachedBodyFilter</code>，其name就<strong>RemoveCachedBody</strong></li><li><code>Map&lt;String, String&gt; args</code> 这里是断言可能存在的参数，这里较为复杂，后续和过滤器一并解释</li></ul><p>注意，这里没有<strong>order</strong>属性，可见不支持排序</p><h2 id="参数注入"><a href="#参数注入" class="headerlink" title="参数注入"></a>参数注入</h2><p>在断言和过滤器中传递的参数解析涉及一个<code>org.springframework.cloud.gateway.support.ShortcutConfigurable.ShortcutType</code>的枚举类，其不同的枚举值代表不同的解析方式。</p><p>比如<code>ShortcutType.GATHER_LIST</code>，其源码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">GATHER_LIST &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title function_">normalize</span><span class="hljs-params">(Map&lt;String, String&gt; args,</span><br><span class="hljs-params">            ShortcutConfigurable shortcutConf, SpelExpressionParser parser,</span><br><span class="hljs-params">            BeanFactory beanFactory)</span> &#123;<br>        Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-comment">// field order should be of size 1</span><br>        List&lt;String&gt; fieldOrder = shortcutConf.shortcutFieldOrder();<br>        Assert.isTrue(fieldOrder != <span class="hljs-literal">null</span> &amp;&amp; fieldOrder.size() == <span class="hljs-number">1</span>,<br>                <span class="hljs-string">&quot;Shortcut Configuration Type GATHER_LIST must have shortcutFieldOrder of size 1&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">fieldName</span> <span class="hljs-operator">=</span> fieldOrder.get(<span class="hljs-number">0</span>);<br>        map.put(fieldName,<br>                args.values().stream()<br>                        .map(value -&gt; getValue(parser, beanFactory, value))<br>                        .collect(Collectors.toList()));<br>        <span class="hljs-keyword">return</span> map;<br>    &#125;<br>&#125;,<br></code></pre></td></tr></table></figure><p>可以看出这里不关心map中的key值，只把value值给转成一个list。</p><p>gateway中断言和过滤器基本都是通过工程模式创建的，所以假设我需要找<code>HostRoutePredicate</code>的参数解析方式，那么就需要去看<code>HostRoutePredicateFactory</code>中的<code>public ShortcutType shortcutType()</code>方法</p><p>除了查看枚举类以外，工厂类里面都有一个<code>Config</code>内部类，里面存放的就是解析完成的参数。此处以<code>RewritePathFilter</code>为例，查看复合参数应该怎么写。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">REGEXP_KEY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;regexp&quot;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">REPLACEMENT_KEY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;replacement&quot;</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">RewritePathGatewayFilterFactory</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">super</span>(Config.class);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">shortcutFieldOrder</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> Arrays.asList(REGEXP_KEY, REPLACEMENT_KEY);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Config</span> &#123;<br>    <span class="hljs-keyword">private</span> String regexp;<br>    <span class="hljs-keyword">private</span> String replacement;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>注意<code>shortcutFieldOrder()</code>方法返回了一个包含参数key的list，我本以为这里代表args里的key，实际上只表示了将<code>FilterDefinition.arg</code>中的value对应key给替换掉，实际效果就是</p><blockquote><p>_genkey_0=regex 替换后 regex=regex<br>_genkey_0=replacement 替换后 replacement=replacement</p></blockquote><p>所以我们只需要关心key的顺序就可以了。</p><p>简单理解一下，虽然args是一个map，但是在实际用于构造前都是在当成一个List使用。</p><hr><p>以下再提供一个样例</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs json"><br><span class="hljs-punctuation">[</span><br><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;admin-server&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;predicates&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Path&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;patterns&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/admin-server/**&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Host&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;1&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;yapi.bcyunqian.com&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;2&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;yq.pre.bcyunqian.com&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;3&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;www.bcyunqian.com&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;filters&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;PreserveHostHeader&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;StripPrefix&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;1&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;uri&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;lb://admin-server&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;order&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">]</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
      <category>SpringCloud</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>SpringCloud</tag>
      
      <tag>Gateway</tag>
      
      <tag>动态路由</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网络小说的语法错误</title>
    <link href="/novel-error.html"/>
    <url>/novel-error.html</url>
    
    <content type="html"><![CDATA[<p>网络小说门槛低了，同时水平也直线下降，像是文笔幼稚、行文底下、人物单薄、情节矛盾等问题层出不穷。在此我不讨论某本小说的问题，而是列举一些比较常见的语法错误。</p><span id="more"></span><h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>网络小说门槛低了，同时水平也直线下降，像是文笔幼稚、行文底下、人物单薄、情节矛盾等问题层出不穷。在此我不讨论某本小说的问题，而是列举一些比较常见的语法错误。</p><h2 id="标点符号"><a href="#标点符号" class="headerlink" title="标点符号"></a>标点符号</h2><h3 id="冒号和双引号"><a href="#冒号和双引号" class="headerlink" title="冒号和双引号"></a>冒号和双引号</h3><p>两个标点一般搭配起来用于人物说话、标志标语等情况。</p><p>一般用法如下</p><blockquote><p>他说：“这事没法解决。”</p></blockquote><p>这点用法大家都懂，常见的错误是下面这种</p><blockquote><p>“这事没法解决。”他伸出双手：“但是我可以给你想办法。”</p></blockquote><p>这里的问题出在冒号上。当一段话中间插入一段描写时，后面的引用不能以冒号开头，简言之，正确用法把冒号换成<strong>逗号</strong></p><blockquote><p>“这事没法解决。”他伸出双手，“但是我可以给你想办法。”</p></blockquote><p>另外还有一点就是，一般来说后引号前面一般使用句号、感叹号、问号这类表示一句话结束的标点，但是如果是上面这种情况，前半句话可以使用<strong>逗号</strong>结尾。</p><h2 id="词性"><a href="#词性" class="headerlink" title="词性"></a>词性</h2><p>多数形容词、名词都有褒义贬义中性区分。而网络小说就经常滥用词语，例如不区分人物立场，一律使用<strong>诡计多端</strong>来形容，反派没问题，但是正派就显得有问题了，一般情况就应该使用<strong>足智多谋</strong>。就算想要表示人物立场多变，正邪难定，也应该用中性词语。</p><p>除了形容词外，名词也是一样的。就比如人物称谓。</p><p>小品《主角与配角》里，扮演反派配角的陈佩斯有句台词“皇军托我给您带句话”，后面同样扮演反派配角的朱时茂台词却变成了“鬼子让我给你说”。</p><p>看出问题了吧，人物立场决定了人物称谓，一般情况下没人会用蔑称称呼自己人。网络小说中一个错误就类似于所有侵华日军都管自己叫“鬼子”。</p><p>这类词语很多，我这里简单列举一些</p><blockquote><p>下场 - 结局<br>团伙 - 团体<br>叛军 - 义军</p></blockquote><h2 id="造词"><a href="#造词" class="headerlink" title="造词"></a>造词</h2><p>造词本身挺正常的，虽然我很不喜欢目前网络上的造词，缺乏生命力，都是活不了几天的垃圾词，但是造词是一门语言演化不可或缺的组成部分。然而网络小说中有种造词却是硬造词，例如<strong>唯一</strong>，不少小说都爱搞什么<strong>唯二</strong>、<strong>唯三</strong>，怎么不给唯一百啊，<strong>仅有</strong>这个词不会用嘛，还能帮你水字数呢</p>]]></content>
    
    
    <categories>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>note</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ClassLoader和双亲委派模型</title>
    <link href="/2021/06/18/3V6FC1C.html"/>
    <url>/2021/06/18/3V6FC1C.html</url>
    
    <content type="html"><![CDATA[<p>这篇博客还是有些问题，一些逻辑还是没有理顺</p><span id="more"></span><h2 id="jdk中的ClassLoader"><a href="#jdk中的ClassLoader" class="headerlink" title="jdk中的ClassLoader"></a>jdk中的ClassLoader</h2><p>在jdk9以前，jdk中有以下加载器</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6544570c19724b618d0f72c5c2f8824d~tplv-k3u1fbpfcp-watermark.image" alt="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6544570c19724b618d0f72c5c2f8824d~tplv-k3u1fbpfcp-watermark.image"></p><ul><li><p>BootstrapClassLoader，又名根加载器，该加载器是由jvm实现，在jdk中不存在该类，负责加载存放在<br><JAVA_HOME>\lib目录，或者被-Xbootclasspath参数所指定的路径中的class。同时，该加载器无法获取实例，所有该加载器加载的类的<code>getClassLoader()</code>方法都将返回<strong>null</strong></p></li><li><p>ExtClassLoader，又名扩展加载器，负责加载<JAVA_HOME>\lib\ext以及java.ext.dirs内的类。该类存在于jdk中</p></li><li><p>AppClassLoader，负责加载由用户编写、不属于jdk的类，自定义加载器应该继承该类，并覆盖<code>findClass</code>方法</p></li></ul><h2 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h2><p>jdk使用<strong>双亲委派模型</strong>来处理类加载流程。</p><p>以用户编写的<strong>Entry.class</strong>为例，该类将会由<strong>AppClassLoader</strong>来负责加载。当其收到加载请求后，会先将请求交给其父类，也就是<strong>ExtClassLoader</strong>；扩展加载器再递交给根加载器，根加载尝试加载类，发现在其负责查找范围内没有该类，遂将请求返回给扩展加载器；扩展加载器同样无法加载，再返给应用加载器，最终由<strong>AppClassLoader</strong>完成加载</p><hr><p>采用该模型主要是为了避免在内存中存在同一个类的不同实例，导致<strong>instance</strong>等语法出错。</p><p>在这一模型下，类的访问范围被限制在当前加载器及其父加载器。由扩展加载器加载的类，可以访问其他由扩展加载的类以及由根加载器加载的类，但是不能访问应用加载器及其子加载器加载的类</p><h2 id="jdk9以后的类加载器"><a href="#jdk9以后的类加载器" class="headerlink" title="jdk9以后的类加载器"></a>jdk9以后的类加载器</h2><p>jdk9以后采用了模块化方案，三级类加载器也有所变动</p><p><img src="https://i.loli.net/2021/06/18/j7hfFy94C3RVALD.png" alt="jdk9的类加载器"></p><p>由于模块化设计，jdk目录也有所变化，不再有<strong>ext</strong>目录</p><p>三个加载分别负责加载不同的模块，虽然仍然维持着三层类加载器和双亲委派的架构，但类加载的委派关系也发生了<br>变动。当平台及应用程序类加载器收到类加载请求，在委派给父加载器加载前，要先判断该类是否能<br>够归属到某一个系统模块中，如果可以找到这样的归属关系，就要优先委派给负责那个模块的加载器<br>完成加载。</p><p>顺便一提，BootstrapClassLoader也出现在了jdk中，但是依然无法获取实例</p><h2 id="类的隔离性"><a href="#类的隔离性" class="headerlink" title="类的隔离性"></a>类的隔离性</h2><p><strong>运行时包</strong></p><p>每一个类都有一个运行时包的概念。和类所在包不同，运行时包包括了类加载器，基本结构如下</p><blockquote><p>BootstrapClassLoader.ExtClassLoader.AppClassLoader.com.mysql.jdbc.Driver</p></blockquote><p><strong>初始类加载器</strong></p><p>jvm规范规定，在类的加载过程中，所有参与的类加载器，即使没有直接加载该类，都属于该类的初始类加载器</p><hr><p>那么隔离性就由以下规则保证</p><ul><li>不同运行时包中的类不能互相访问</li><li>有相同初始化类就行</li></ul><h2 id="破坏双亲委派模型"><a href="#破坏双亲委派模型" class="headerlink" title="破坏双亲委派模型"></a>破坏双亲委派模型</h2><p>双亲委派模型是非强制性规范，同时受限于本身的设计，部分情况下得破坏模型。</p><p>其中一种情况是<strong>spi</strong>，例如jdbc，接口以及接口的调用者为jdk中的类，但是实现由用户提供，二者处于不同的加载器中，按照双亲委派模型就无法运行。</p><p>jdk提供了<strong>线程上下文类加载器（Thread Context ClassLoader）</strong>。这个类加载器可以通过java.lang.Thread类的setContext-ClassLoader()方<br>法进行设置，如果创建线程时还未设置，它将会从父线程中继承一个，如果在应用程序的全局范围内<br>都没有设置过的话，那这个类加载器默认就是应用程序类加载器。</p><p>在<strong>SPI</strong>机制中，需要由接口提供方自动发现注册接口实现。在jdbc中，最重要的<strong>DriverManger</strong>使用<strong>PlatformClassLoader</strong>加载的，在其内部去加载某个实现类，如果不提供别的途径的话，<strong>DriverManger</strong>只能使用<strong>PlatformClassLoader</strong>，那就无法加载实现方了。</p><p>因此提供一个线程上下文类加载器，<strong>DriverManger</strong>就能拿到可以加载实现方的类加载器了，这一过程也破坏了双亲委派模型</p><p>jdk主要是因为核心库和用户代码加载器不同，才需要一个线程上下文类加载器。假设我们需要一个spi机制，反倒不需要这么麻烦。</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>ClassLoader</tag>
      
      <tag>editing</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式</title>
    <link href="/2021/06/13/V4XA6C.html"/>
    <url>/2021/06/13/V4XA6C.html</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h3 id="三种工厂模式"><a href="#三种工厂模式" class="headerlink" title="三种工厂模式"></a>三种工厂模式</h3><ul><li>简单工厂<blockquote><p>一般基于static方式实现，扩展性不足</p></blockquote></li><li>工厂<blockquote><p>抽象了工厂和产品，但是一个工厂只能生产一种产品</p></blockquote></li><li>抽象工厂<blockquote><p>和普通工厂不同在于抽象工厂有多个生产方法，可以生产多种产品，实现更复杂的组合</p></blockquote></li></ul><h3 id="建造者模式（Bulider模式）"><a href="#建造者模式（Bulider模式）" class="headerlink" title="建造者模式（Bulider模式）"></a>建造者模式（Bulider模式）</h3><p>和普通的new方法相比，在对象的创建上更为灵活，可以根据不同情况跳过步骤，组合不同的参数。</p><p>例如某个类有三个成员变量，根据需要的成员不同，提供了不同参数的方法重载。</p><p>使用的时候可能会出现根据不同条件提供不同的参数，在new方式下就是许多的new，且参数可能反复填写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(条件<span class="hljs-number">1</span>)&#123;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>(参数<span class="hljs-number">1</span>,参数<span class="hljs-number">2</span>)<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(条件<span class="hljs-number">2</span>)&#123;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>(参数<span class="hljs-number">1</span>,参数<span class="hljs-number">3</span>)<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(条件<span class="hljs-number">3</span>)&#123;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>(参数<span class="hljs-number">1</span>,参数<span class="hljs-number">2</span>,参数<span class="hljs-number">3</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>建造者模式下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">builder.参数<span class="hljs-number">1</span>();<br><span class="hljs-keyword">if</span>(条件<span class="hljs-number">2</span>)&#123;<br>    builder.参数<span class="hljs-number">2</span>();<br>&#125;<br><span class="hljs-keyword">if</span>(条件<span class="hljs-number">3</span>)&#123;<br>    builder.参数<span class="hljs-number">3</span>();<br>&#125;<br>builder.build();<br><br></code></pre></td></tr></table></figure><p>可以看出步骤的省略更为明显</p><h3 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h3><p>将原本具体的逻辑抽象成一个个命令，用命令对象隔离调用和实现。例如之前的博客<a href="">解析yml</a> 中就有<strong>Event</strong>类，可以看作是命令模式的一种实现</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CAS与VarHandle</title>
    <link href="/2021/06/13/1ST875F.html"/>
    <url>/2021/06/13/1ST875F.html</url>
    
    <content type="html"><![CDATA[<p>现在java中多使用cas来实现无锁化</p><span id="more"></span><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>CAS(Compare and Swap)，如果原始值和给定值相同，则修改为新值，否则失败</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>借助java9推出的<strong>VarHandle</strong>实现cas操作</p><p><code>VarHandle</code>通过以下方法获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">MethodHandles.lookup().findVarHandle(CASExample.class, <span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-type">int</span>.class)<br></code></pre></td></tr></table></figure><p>三个参数依次代表:</p><ul><li>CASExample.class 需要操作的变量所在的类</li><li>x 变量的名字，在此处就是变量在CASExample中的名字</li><li>int.class 变量的类型</li></ul><p>调用如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Varhandle.compareAndSet(example, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>第一个参数是<code>CASEXample</code>的实例，第二次参数是期望值，第三个参数就想要设置的新值</p><p>样例如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CASExample</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">VarHandle</span> <span class="hljs-variable">xVarhandle</span> <span class="hljs-operator">=</span> MethodHandles.lookup().findVarHandle(CASExample.class, <span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-type">int</span>.class);<br><br>            <span class="hljs-type">CyclicBarrier</span> <span class="hljs-variable">barrier</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CyclicBarrier</span>(<span class="hljs-number">2</span>);<br><br>            <span class="hljs-type">CASExample</span> <span class="hljs-variable">example</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CASExample</span>();<br><br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                        <span class="hljs-keyword">try</span> &#123;<br>                            barrier.await();<br>                            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                                <span class="hljs-keyword">if</span> (xVarhandle.compareAndSet(example, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>)) &#123;<br>                                    <span class="hljs-keyword">break</span>;<br>                                &#125;<br>                            &#125;<br>                            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;设置完成&quot;</span> + example.x);<br>                        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                            e.printStackTrace();<br>                        &#125; <span class="hljs-keyword">catch</span> (BrokenBarrierException e) &#123;<br>                            e.printStackTrace();<br>                        &#125;<br><br><br>                    &#125;<br>                &#125;).start();<br>            &#125;<br><br><br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>输出一个1,同时cpu占有率开始上升，很明显是另一个线程死循环导致的</p><hr><p>注意，我用的是<strong>openjdk11</strong>，jdk中存在两个Unsafe，分别是<strong>sun.misc.Unsafe</strong>和<strong>jdk.internal.misc.Unsafe</strong>，这里使用第二个</p><h3 id="原子类"><a href="#原子类" class="headerlink" title="原子类"></a>原子类</h3><p>写一个原子类试一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AtomicInt</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> value;<br>    <span class="hljs-keyword">private</span> VarHandle handle;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AtomicInt</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            value = <span class="hljs-number">0</span>;<br>            handle = MethodHandles.lookup().findVarHandle(AtomicInt.class, <span class="hljs-string">&quot;value&quot;</span>, <span class="hljs-type">int</span>.class);<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">v</span> <span class="hljs-operator">=</span> value;<br>            <span class="hljs-keyword">if</span> (handle.compareAndSet(<span class="hljs-built_in">this</span>, v, v + <span class="hljs-number">1</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">threadCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>;<br>        <span class="hljs-type">CountDownLatch</span> <span class="hljs-variable">latch</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CountDownLatch</span>(threadCount);<br><br>        <span class="hljs-type">AtomicInt</span> <span class="hljs-variable">atomicInt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInt</span>();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; threadCount; i++) &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; count; j++) &#123;<br>                        atomicInt.add();<br>                    &#125;<br>                    latch.countDown();<br>                &#125;<br>            &#125;).start();<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            latch.await();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        System.out.println(atomicInt.value);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>结果是100000，正确</p><h3 id="ABA问题"><a href="#ABA问题" class="headerlink" title="ABA问题"></a>ABA问题</h3><p>ABA是指数据由A-&gt;B-&gt;A的转换，CAS会误以为没有变化。JDK提供了<code>AtomicStampedReference</code>和<code>AtomicMarkableReference</code>来解决。</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
      <category>concurrent</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>并发</tag>
      
      <tag>多线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HashMap和ConcurrentHashMap</title>
    <link href="/2021/06/11/1YWY0TA.html"/>
    <url>/2021/06/11/1YWY0TA.html</url>
    
    <content type="html"><![CDATA[<p>关于HashMap和ConcurrentHashMap的一些记录</p><span id="more"></span><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><p><code>HashMap</code>基本结构是数组+单向链表/红黑树。</p><p>map有几个比较重要的变量</p><ul><li>DEFAULT_INITIAL_CAPACITY 默认初始容量，16</li><li>DEFAULT_LOAD_FACTOR 默认负载因子0.75，用在扩容上</li><li>TREEIFY_THRESHOLD 转换成红黑树的链表长度 8</li><li>UNTREEIFY_THRESHOLD 由树转换成链表的长度，6</li><li>MIN_TREEIFY_CAPACITY 转换成红黑树的数组的最小长度 64，如果某链表长度大于8，但是此时数组长度不够，则只会扩容，不会转换</li></ul><p>贴出openjdk11里的put方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> V <span class="hljs-title function_">putVal</span><span class="hljs-params">(<span class="hljs-type">int</span> hash, K key, V value, <span class="hljs-type">boolean</span> onlyIfAbsent,</span><br><span class="hljs-params">                 <span class="hljs-type">boolean</span> evict)</span> &#123;<br>      Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="hljs-type">int</span> n, i;<br>      <span class="hljs-keyword">if</span> ((tab = table) == <span class="hljs-literal">null</span> || (n = tab.length) == <span class="hljs-number">0</span>)<span class="hljs-comment">//当前数组未创建</span><br>          n = (tab = resize()).length;<br>      <span class="hljs-keyword">if</span> ((p = tab[i = (n - <span class="hljs-number">1</span>) &amp; hash]) == <span class="hljs-literal">null</span>)<span class="hljs-comment">//对应的节点不存在</span><br>          tab[i] = newNode(hash, key, value, <span class="hljs-literal">null</span>);<br>      <span class="hljs-keyword">else</span> &#123;<br>          Node&lt;K,V&gt; e; K k;<br>          <span class="hljs-keyword">if</span> (p.hash == hash &amp;&amp;<br>              ((k = p.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))<span class="hljs-comment">//hash碰撞，且当前的key和数组对应位置相同</span><br>              e = p;<br>          <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p <span class="hljs-keyword">instanceof</span> TreeNode)<span class="hljs-comment">//当前节点是一颗树</span><br>              e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="hljs-built_in">this</span>, tab, hash, key, value);<br>          <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//链表结构，则遍历到尾结点</span><br>              <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">binCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; ; ++binCount) &#123;<br>                  <span class="hljs-keyword">if</span> ((e = p.next) == <span class="hljs-literal">null</span>) &#123;<br>                      p.next = newNode(hash, key, value, <span class="hljs-literal">null</span>);<br>                      <span class="hljs-keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="hljs-number">1</span>) <span class="hljs-comment">// -1 for 1st</span><br>                          treeifyBin(tab, hash);<span class="hljs-comment">//节点过长，转换成红黑树，注意，方法内部还判断了当前数组长度要大于MIN_TREEIFY_CAPACITY</span><br>                      <span class="hljs-keyword">break</span>;<br>                  &#125;<br>                  <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp;<br>                      ((k = e.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))<br>                      <span class="hljs-keyword">break</span>;<br>                  p = e;<br>              &#125;<br>          &#125;<br>          <span class="hljs-keyword">if</span> (e != <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// existing mapping for key</span><br>              <span class="hljs-type">V</span> <span class="hljs-variable">oldValue</span> <span class="hljs-operator">=</span> e.value;<br>              <span class="hljs-keyword">if</span> (!onlyIfAbsent || oldValue == <span class="hljs-literal">null</span>)<br>                  e.value = value;<br>              afterNodeAccess(e);<br>              <span class="hljs-keyword">return</span> oldValue;<br>          &#125;<br>      &#125;<br>      ++modCount;<br>      <span class="hljs-keyword">if</span> (++size &gt; threshold)<span class="hljs-comment">//扩容</span><br>          resize();<br>      afterNodeInsertion(evict);<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>  &#125;<br></code></pre></td></tr></table></figure><hr><p>再看扩容算法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;<br>        Node&lt;K,V&gt;[] oldTab = table;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">oldCap</span> <span class="hljs-operator">=</span> (oldTab == <span class="hljs-literal">null</span>) ? <span class="hljs-number">0</span> : oldTab.length;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">oldThr</span> <span class="hljs-operator">=</span> threshold;<br>        <span class="hljs-type">int</span> newCap, newThr = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (oldCap &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;<br>                threshold = Integer.MAX_VALUE;<br>                <span class="hljs-keyword">return</span> oldTab;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="hljs-number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;<br>                     oldCap &gt;= DEFAULT_INITIAL_CAPACITY)<br>                     <span class="hljs-comment">// 直接扩充一倍，为原有容量的两倍，同时阈值也变成两倍</span><br>                newThr = oldThr &lt;&lt; <span class="hljs-number">1</span>; <span class="hljs-comment">// double threshold</span><br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (oldThr &gt; <span class="hljs-number">0</span>) <span class="hljs-comment">// initial capacity was placed in threshold</span><br>            newCap = oldThr;<br>        <span class="hljs-keyword">else</span> &#123;               <span class="hljs-comment">// zero initial threshold signifies using defaults</span><br>            newCap = DEFAULT_INITIAL_CAPACITY;<br>            newThr = (<span class="hljs-type">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (newThr == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-type">float</span> <span class="hljs-variable">ft</span> <span class="hljs-operator">=</span> (<span class="hljs-type">float</span>)newCap * loadFactor;<br>            newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="hljs-type">float</span>)MAXIMUM_CAPACITY ?<br>                      (<span class="hljs-type">int</span>)ft : Integer.MAX_VALUE);<br>        &#125;<br>        threshold = newThr;<br>        <span class="hljs-meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span><br>        Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>[newCap];<br>        table = newTab;<br>        <span class="hljs-keyword">if</span> (oldTab != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; oldCap; ++j) &#123;<br>                Node&lt;K,V&gt; e;<br>                <span class="hljs-keyword">if</span> ((e = oldTab[j]) != <span class="hljs-literal">null</span>) &#123;<br>                    oldTab[j] = <span class="hljs-literal">null</span>;<br>                    <span class="hljs-keyword">if</span> (e.next == <span class="hljs-literal">null</span>)<span class="hljs-comment">//没有链表或者树结构.尽量保持索引不变</span><br>                        newTab[e.hash &amp; (newCap - <span class="hljs-number">1</span>)] = e;<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> TreeNode)<br>                        ((TreeNode&lt;K,V&gt;)e).split(<span class="hljs-built_in">this</span>, newTab, j, oldCap);<br>                    <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// preserve order 把链表中的元素给重新散列到数组里</span><br>                        Node&lt;K,V&gt; loHead = <span class="hljs-literal">null</span>, loTail = <span class="hljs-literal">null</span>;<br>                        Node&lt;K,V&gt; hiHead = <span class="hljs-literal">null</span>, hiTail = <span class="hljs-literal">null</span>;<br>                        Node&lt;K,V&gt; next;<br>                        <span class="hljs-keyword">do</span> &#123;<br>                            next = e.next;<br>                            <span class="hljs-keyword">if</span> ((e.hash &amp; oldCap) == <span class="hljs-number">0</span>) &#123;<span class="hljs-comment">//新的坐标不变</span><br>                                <span class="hljs-keyword">if</span> (loTail == <span class="hljs-literal">null</span>)<br>                                    loHead = e;<br>                                <span class="hljs-keyword">else</span><br>                                    loTail.next = e;<br>                                loTail = e;<br>                            &#125;<br>                            <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//新的坐标为原有坐标+原table长度</span><br>                                <span class="hljs-keyword">if</span> (hiTail == <span class="hljs-literal">null</span>)<br>                                    hiHead = e;<br>                                <span class="hljs-keyword">else</span><br>                                    hiTail.next = e;<br>                                hiTail = e;<br>                            &#125;<br>                        &#125; <span class="hljs-keyword">while</span> ((e = next) != <span class="hljs-literal">null</span>);<br>                        <span class="hljs-keyword">if</span> (loTail != <span class="hljs-literal">null</span>) &#123;<br>                            loTail.next = <span class="hljs-literal">null</span>;<br>                            newTab[j] = loHead;<br>                        &#125;<br>                        <span class="hljs-keyword">if</span> (hiTail != <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//将原本的尾结点给散列到新的数组中去，不再作为链表中的节点</span><br>                            hiTail.next = <span class="hljs-literal">null</span>;<br>                            newTab[j + oldCap] = hiHead;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> newTab;<br>    &#125;<br></code></pre></td></tr></table></figure><hr><p>此外还有一些细节</p><ul><li><p>初始容量不为2的n次幂的，会向上调整为最近的2次幂，同时由于扩容都是翻两倍，所以容量始终的2的n次幂</p></li><li><p>扩容的阈值=容量<em>负载因子。只要当前数据量大于这个值就会触发扩容。假设现在有1000个数据，容量应该是2048，因为1024</em>0.75=768触发扩容，但是这样会浪费很多空间，可以通过吧负载因子设置为1来避免，</p></li><li><p>HashMap线程不安全体现在会造成死循环、数据丢失、数据覆盖这些问题。其中死循环和数据丢失是在JDK1.7中出现的问题，在JDK1.8中已经得到解决，然而1.8中仍会有数据覆盖这样的问题</p><blockquote><p>在扩容时，先将数组设置为两倍大小的空数组，这时线程挂起，同时其他线程插入数据，再回来继续散列，数据可能就被覆盖了</p></blockquote></li></ul><h3 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h3><p>1.7 的并发安全是通过<strong>Segment</strong>分段加锁实现的。1.8则使用了CAS+synchronized来实现</p><p>以下是openjdk11里的代码</p><p>直接看put方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> V <span class="hljs-title function_">putVal</span><span class="hljs-params">(K key, V value, <span class="hljs-type">boolean</span> onlyIfAbsent)</span> &#123;<br>    <span class="hljs-keyword">if</span> (key == <span class="hljs-literal">null</span> || value == <span class="hljs-literal">null</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">hash</span> <span class="hljs-operator">=</span> spread(key.hashCode());<br>    <span class="hljs-type">int</span> <span class="hljs-variable">binCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123;<br>        Node&lt;K,V&gt; f; <span class="hljs-type">int</span> n, i, fh; K fk; V fv;<br>        <span class="hljs-keyword">if</span> (tab == <span class="hljs-literal">null</span> || (n = tab.length) == <span class="hljs-number">0</span>)<br>            tab = initTable();<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((f = tabAt(tab, i = (n - <span class="hljs-number">1</span>) &amp; hash)) == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (casTabAt(tab, i, <span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;K,V&gt;(hash, key, value)))<br>                <span class="hljs-keyword">break</span>;                   <span class="hljs-comment">// no lock when adding to empty bin</span><br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((fh = f.hash) == MOVED)<br>            tab = helpTransfer(tab, f);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (onlyIfAbsent <span class="hljs-comment">// check first node without acquiring lock</span><br>                 &amp;&amp; fh == hash<br>                 &amp;&amp; ((fk = f.key) == key || (fk != <span class="hljs-literal">null</span> &amp;&amp; key.equals(fk)))<br>                 &amp;&amp; (fv = f.val) != <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">return</span> fv;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">V</span> <span class="hljs-variable">oldVal</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">synchronized</span> (f) &#123;<br>                <span class="hljs-keyword">if</span> (tabAt(tab, i) == f) &#123;<br>                    <span class="hljs-keyword">if</span> (fh &gt;= <span class="hljs-number">0</span>) &#123;<br>                        binCount = <span class="hljs-number">1</span>;<br>                        <span class="hljs-keyword">for</span> (Node&lt;K,V&gt; e = f;; ++binCount) &#123;<br>                            K ek;<br>                            <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp;<br>                                ((ek = e.key) == key ||<br>                                 (ek != <span class="hljs-literal">null</span> &amp;&amp; key.equals(ek)))) &#123;<br>                                oldVal = e.val;<br>                                <span class="hljs-keyword">if</span> (!onlyIfAbsent)<br>                                    e.val = value;<br>                                <span class="hljs-keyword">break</span>;<br>                            &#125;<br>                            Node&lt;K,V&gt; pred = e;<br>                            <span class="hljs-keyword">if</span> ((e = e.next) == <span class="hljs-literal">null</span>) &#123;<br>                                pred.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;K,V&gt;(hash, key, value);<br>                                <span class="hljs-keyword">break</span>;<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (f <span class="hljs-keyword">instanceof</span> TreeBin) &#123;<br>                        Node&lt;K,V&gt; p;<br>                        binCount = <span class="hljs-number">2</span>;<br>                        <span class="hljs-keyword">if</span> ((p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key,<br>                                                       value)) != <span class="hljs-literal">null</span>) &#123;<br>                            oldVal = p.val;<br>                            <span class="hljs-keyword">if</span> (!onlyIfAbsent)<br>                                p.val = value;<br>                        &#125;<br>                    &#125;<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (f <span class="hljs-keyword">instanceof</span> ReservationNode)<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<span class="hljs-string">&quot;Recursive update&quot;</span>);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (binCount != <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD)<br>                    treeifyBin(tab, i);<br>                <span class="hljs-keyword">if</span> (oldVal != <span class="hljs-literal">null</span>)<br>                    <span class="hljs-keyword">return</span> oldVal;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    addCount(<span class="hljs-number">1L</span>, binCount);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>基本遵循以下逻辑</p><ul><li>计算hash，开始循环</li><li>如果现在没有数据，则初始化一个table</li><li>如果此时对应位置上没有数据，那么就尝试cas设置新值。设置不成功则开始自旋设置，直到当前线程设置成功，或者别的线程设置成功，则当前线程判断有值，不再进行cas</li><li>有个<strong>onlyIfAbsent</strong>暂时不知道干嘛的，但是一般这个参数都为false，相应分支不会执行</li><li>当当前位置有值，则开始追加数据，此时对这个节点加锁。这样加锁粒度比<strong>HashTable</strong>加在整个对象上要更小</li><li>循环结束后，增加总数。这边也是CAS+自旋逻辑</li></ul><hr><p>ConcurrentHashMap中有个非常重要的变量<code>sizeCtl</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> sizeCtl;<br></code></pre></td></tr></table></figure><p>当这个值为负数时，代表正在进行初始化或者扩容操作。-1代表初始化，-(1+参与扩容的线程数)代表正在扩容</p><p>初始化</p><p>初始化操作仅允许一个线程进行。在方法<code>initTable</code>中，如果发现<code>sizeCtl</code>是-1，则使用<code>Thread.yield()</code>让出cpu时间。注意：这种让渡是提示性的，而非强制，所以此处可能也会进行自旋等待初始化线程结束初始化，当前线程直接判断table不为null</p><hr><p>总结：如果节点位置没有值，就用cas设置；有值，就对节点加锁。抛弃了Segment，但是相关的类还保留在源代码里，不知道为什么不删</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
      <category>concurrent</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>并发</tag>
      
      <tag>HashMap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis过期和内存淘汰策略</title>
    <link href="/2021/06/10/SJBJBC.html"/>
    <url>/2021/06/10/SJBJBC.html</url>
    
    <content type="html"><![CDATA[<p>关于redis的过期和内存淘汰策略的笔记。集合了官方文档，网络资源和实体书里的内容</p><span id="more"></span><h2 id="内存淘汰策略"><a href="#内存淘汰策略" class="headerlink" title="内存淘汰策略"></a>内存淘汰策略</h2><p>内存淘汰是用于内存不足时淘汰数据使用</p><h3 id="可以使用多大内存"><a href="#可以使用多大内存" class="headerlink" title="可以使用多大内存"></a>可以使用多大内存</h3><p>redis通过以下配置决定内存使用量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs redis">maxmemory 100mb<br></code></pre></td></tr></table></figure><p>可以在配置文件中注明，也可以在运行时通过<code>config</code>命令指定</p><p>如果设置为<strong>0</strong>，在64位系统上是无限制，就是可以使用所有的物理内存，在32位系统上最多使用3GB</p><h3 id="什么时候淘汰内存"><a href="#什么时候淘汰内存" class="headerlink" title="什么时候淘汰内存"></a>什么时候淘汰内存</h3><p>redis遵循以下逻辑</p><ul><li>客户端发送一个命令，该命令会导致内存占用增加</li><li>redis检查当前剩余内存是否够执行该命令，如果不够，则执行淘汰策略</li><li>redis执行命令，返回结果</li></ul><h3 id="有哪些淘汰策略"><a href="#有哪些淘汰策略" class="headerlink" title="有哪些淘汰策略"></a>有哪些淘汰策略</h3><p>在4.0以后的版本中，有以下策略</p><ul><li><strong>noeviction</strong>: 可能导致内存增加的命令直接返回错误，所以不包括<strong>del</strong>和一些其他命令</li><li><strong>allkeys-lru</strong>: 按照最近最少使用算法淘汰，淘汰范围为所有的key</li><li><strong>volatile-lru</strong>: 按照最近最少使用算法淘汰，淘汰范围为设置了过期时间的key</li><li><strong>allkeys-random</strong>: 随机淘汰，淘汰范围为所有的key</li><li><strong>volatile-random</strong>: 随机淘汰，淘汰范围为设置了过期时间的key</li><li><strong>volatile-ttl</strong>: 淘汰ttl最短的key</li><li><strong>volatile-lfu</strong>: 按照最少访问频率淘汰，淘汰范围为设置了过期时间的key</li><li><strong>allkeys-lfu</strong>: 按照最少访问频率淘汰，淘汰范围为所有的key</li></ul><p>可以按照以下方式记忆：</p><p>redis淘汰策略有：<strong>不淘汰</strong>、<strong>最近最少使用(lru)</strong>、<strong>随机淘汰</strong>、<strong>最短过期时间(ttl)</strong>、<strong>最少访问频率(lfu)</strong>。</p><p>除了<strong>不淘汰</strong>和<strong>ttl</strong>，剩下的又有两种分类，<strong>所有的key</strong>(allkeys)、<strong>有过期时间的key</strong>(volatile)</p><hr><p>其中<strong>noeviction</strong>是默认的淘汰策略，同时如果其他淘汰策略无法淘汰合适的内存大小，也会进入该模式</p><h3 id="如何选择淘汰策略"><a href="#如何选择淘汰策略" class="headerlink" title="如何选择淘汰策略"></a>如何选择淘汰策略</h3><ul><li><p>如果你不知道怎么选，直接使用<strong>allkeys-lru</strong>。这是官方推荐的策略（This is a good pick if you are unsure）。</p></li><li><p>如果所有的key都会被持续地、周期性地被访问，或者你希望分布是均匀的（所有的节点都有相同的访问概率）。这里应该是想说数据没有热点，那就使用<strong>allkeys-random</strong></p></li><li><p>当你创建缓存对象的时候，你可以通过不同的ttl告诉redis哪些数据更应该被淘汰，这时使用<strong>volatile-ttl</strong></p></li></ul><h3 id="LRU如何工作"><a href="#LRU如何工作" class="headerlink" title="LRU如何工作"></a>LRU如何工作</h3><p>redis的LRU不是标准的lru，而是一种近似算法。</p><p>基本原理是，在每个key中记录最后一次访问时间，然后每次随机选出<strong>N</strong>个key，把<strong>N</strong>个key中访问时间最小的淘汰。</p><p>其中取样个数<strong>N</strong>可通过<code>CONFIG SET maxmemory-samples &lt;count&gt;</code>或者配置文件中配置。</p><p>官网的例子是如果取样是<strong>10</strong>，那么就非常接近标准LRU算法了</p><h3 id="LFU如何工作"><a href="#LFU如何工作" class="headerlink" title="LFU如何工作"></a>LFU如何工作</h3><p><strong>LRU</strong>仅按照最后一次访问时间作为判断标准，对于部分情况是不够准确的。</p><blockquote><p>假设有个key实际上很少使用，但就在淘汰开始前突然被访问了一次，那么LRU不会淘汰这个key。这里潜藏的风险就是很可能删除了一个当时暂时未被访问，但是以后可能会被高频访问的数据。</p></blockquote><p>以上是对官方文档的不标准翻译</p><hr><p><strong>LFU</strong>使用<strong>8位</strong>来记录访问频率。为了实现如此少的位保存足够高的频率，redis使用了一种叫做<strong>Morris counter</strong>的算法，具体原理暂时不去深究。</p><p>redis提供了两个配置项来调整LFU算法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs redis">lfu-log-factor 10<br>lfu-decay-time 1<br></code></pre></td></tr></table></figure><p><strong>decay-time</strong> 意为衰退时间，如果不做衰退处理，频率记录只会越来越高，直到上限。文档特别指出不要把这个值设置为0</p><p><strong>log-factor</strong> 这个值用来限定能够记录的最高频率。redis只用了8位记录频率，那么最高就是255，当访问频率高到一定程度后，频率记录就始终是255,分辨不出高低了。这个值越高，<strong>一定程度</strong>就会越高。官方给了一个表</p><table><thead><tr><th>factor</th><th>100 hits</th><th>1000 hits</th><th>100K hits</th><th>1M hits</th><th>10M hits</th></tr></thead><tbody><tr><td>0</td><td>104</td><td>255</td><td>255</td><td>255</td><td>255</td></tr><tr><td>1</td><td>18</td><td>49</td><td>255</td><td>255</td><td>255</td></tr><tr><td>10</td><td>10</td><td>18</td><td>142</td><td>255</td><td>255</td></tr><tr><td>100</td><td>8</td><td>11</td><td>49</td><td>143</td><td>255</td></tr></tbody></table><h2 id="过期策略"><a href="#过期策略" class="headerlink" title="过期策略"></a>过期策略</h2><p>redis过期策略有两种：懒删除和定时扫描。官方称其为<strong>passive way</strong>、<strong>active way</strong></p><h3 id="懒删除"><a href="#懒删除" class="headerlink" title="懒删除"></a>懒删除</h3><p>每次访问key时，判断key是否已经过期，过期了就删除</p><h3 id="定时扫描"><a href="#定时扫描" class="headerlink" title="定时扫描"></a>定时扫描</h3><p>redis将会每秒进行10次扫描，每次扫描按照以下流程</p><ul><li>从过期字典(记录了所有设置了过期时间的key)中随机挑选20个key</li><li>删除其中过期的key</li><li>如果过期的数据占据了25%，那么重复步骤1</li></ul><hr><p>除了官网内容外，书中还提及redis为了防止过度扫描，规定了一次扫描不能超过25毫秒，这25毫秒内是停止服务的。此外扫描还可能由于内存回收导致卡死。</p><p>因此如果发生了<strong>缓存雪崩</strong>，除了请求击穿到数据库外，redis本身也可能出现一定程度的卡顿</p><h3 id="从节点和AOF"><a href="#从节点和AOF" class="headerlink" title="从节点和AOF"></a>从节点和AOF</h3><p>当有key过期时，redis会写入一条<strong>DEL</strong>命令，这个命令会被写入AOF文件以及发送给从节点。所以从节点不会主动进行过期处理，全部依赖主节点的同步</p><h2 id="参考文件"><a href="#参考文件" class="headerlink" title="参考文件"></a>参考文件</h2><ul><li><a href="https://redis.io/topics/lru-cache">官方文档</a></li><li><a href="https://www.jianshu.com/p/c8aeb3eee6bc">https://www.jianshu.com/p/c8aeb3eee6bc</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后端</tag>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>bean的创建流程</title>
    <link href="/2021/06/09/16VTBQC.html"/>
    <url>/2021/06/09/16VTBQC.html</url>
    
    <content type="html"><![CDATA[<p>bean在spring中的生命周期</p><span id="more"></span><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>以下为一个bean的获取并使用流程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-type">DefaultListableBeanFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XmlBeanFactory</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathResource</span>(<span class="hljs-string">&quot;bean.xml&quot;</span>));<br><span class="hljs-type">Object</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> factory.getBean(<span class="hljs-string">&quot;bean&quot;</span>);<br>bean.toString();<br></code></pre></td></tr></table></figure><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><ul><li><p>首先是加载配置信息，这一步在<code>XmlBeanFactory</code>创建出来之后就完成了。在其中保存了bean的相关信息，比如id、name、类型、构造方法参数等等</p></li><li><p>getBean方法中去真正创建bean</p></li><li><p>如果是单例模式，且缓存中有这个bean，就直接返回。没有则进行下一步</p></li><li><p>对<strong>Prototypre</strong>模式的做循环依赖检查</p></li><li><p>如果有父<strong>Factory</strong>，且当前工厂没有这个bean的配置信息，则交给父类工厂创建。在ssm模式中一般存在两个容器：Spring和SpringMVC，应该就是这种关系，确保MVC容器可以访问父类容器的bean</p></li><li><p>查找依赖，这一步也会进行循环依赖检查。有依赖的情况下，就开始递归创建依赖bean</p></li><li><p>根据不同的<strong>scope</strong>开始创建流程，在此暂时只讨论<strong>singleton</strong>类型的bean，也就是<code>getSingleton(String beanName, ObjectFactory&lt;?&gt; singletonFactory)</code></p><ul><li>首先会将当前beanName添加到<code>singletonsCurrentlyInCreation</code></li><li>调用<code>AbstractAutowireCapableBeanFactory#createBean</code>方法</li><li><strong>BeanPostProcessors</strong>会被调用，可以用来创建代理，然后直接返回</li><li>如果没有代理，则进入Spring的创建方法<strong>doCreateBean</strong></li><li>再然后就是根据配置信息，决定用哪种实例化方案</li><li>当实例创建后，就会根据条件决定放不放入<code>singletonObjects</code>，同时从<code>earlySingletonObjects</code>中清除</li><li>再然后的方法<code>getEarlyBeanReference</code>说是可以注入aop，但是暂时没有找到相关代码</li></ul></li><li><p>接着开始注入属性，，一般来说就是通过name、type注入；如果有循环依赖的话，就去缓存里获取半成品bean</p></li><li><p>初始化bean，一般就是调用一些相关方法，比如<code>init-method</code>，继承的接口，以及一些<code>BeanPostProcessor</code></p></li><li><p>注册销毁处理器，销毁时调用相关方法</p></li><li><p>最后通过一个<code>getObjectForBeanInstance</code>来处理一些诸如<strong>factory-bean</strong>类型，获取真正的bean</p></li></ul><h2 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h2><p>实际开发中，基本不会用<code>BeanFactory</code>的方式，都是使用<code>ApplicationContext</code>。这里已<code>ClassPathXmlApplicationContext</code>为例</p><ul><li>检查当前环境，例如判断是否有环境变量未设置</li><li>创建beanFactory</li><li>注册激活BeanFactory处理器，例如注入后置处理器，事件监听器</li><li>初始化所有单例bean</li><li>事件通知</li></ul><hr><p>再配上一张SpringMVC流程图</p><p><img src="https://images2018.cnblogs.com/blog/733213/201804/733213-20180401021502228-788157259.jpg" alt="SpringMVC流程"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.jianshu.com/p/1dec08d290c1">请别再问Spring Bean的生命周期了！</a></p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ThreadLocal</title>
    <link href="/2021/06/05/AHYH5E.html"/>
    <url>/2021/06/05/AHYH5E.html</url>
    
    <content type="html"><![CDATA[<p>本文将解释ThreadLocal的原理</p><span id="more"></span><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p><strong>ThreadLocal</strong> 本质是给每一个线程绑定一个map，以线程名为key</p><p>线程和ThreadLocal的关系如下：</p><p><img src="https://i.loli.net/2021/06/05/wLzsQg6xHGDk21R.png" alt=""></p><p>每一个线程都有一个<strong>ThreadLocalMap</strong>属性，该属性存有<strong>Entry</strong>数组，通过对<strong>threadLocalHashCode</strong>取模，得到下标索引。</p><h2 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h2><p><strong>ThreadLocalMap</strong>是通过Thread访问的，同时还是<strong>default</strong>权限，如果Thread结束了，那么这一部分数据将用于无法被访问。如果Thread的实例还被保存着，那么这一部分数据就有泄漏的风险。</p><hr><p>为了解决这一问题，jdk采取了以下办法</p><h3 id="WeakReference"><a href="#WeakReference" class="headerlink" title="WeakReference"></a>WeakReference</h3><p><strong>Entry</strong>类使用 <strong>WeakReference</strong>。jvm在任何一次GC中，总会尝试去回收被WeakReference引用的对象。<strong>ThreadLocalMap</strong>会在get、set操作中去清理被回收的entry</p><p>但是以上只是回收了Entry，对应的Value不会回收。想要回收，还是得等到Thread被回收</p><p>可通过以下程序验证，以下代码就无法回收value内存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ThreadLocal</span> <span class="hljs-variable">threadLocal</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>();<br><span class="hljs-keyword">try</span> &#123;<br>    TimeUnit.SECONDS.sleep(<span class="hljs-number">20</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>    e.printStackTrace();<br>&#125;<br>threadLocal.set(<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">100</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>]);<br><br>threadLocal = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>    Thread.currentThread().join();<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>    e.printStackTrace();<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
      <category>concurrent</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>多线程</tag>
      
      <tag>ThreadLocal</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis哨兵模式配置项</title>
    <link href="/2021/06/03/73EEMX.html"/>
    <url>/2021/06/03/73EEMX.html</url>
    
    <content type="html"><![CDATA[<p>之前搭建了一个哨兵模式，发现主从切换相当的慢，于是找一些关于哨兵的配置项，但是网上没有中文的说明，只好去翻redis官方文档</p><span id="more"></span><p>redis在<a href="https://redis.io/topics/sentinel">高可用</a>这篇文章中详细介绍了哨兵模式</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs smali">sentinel<span class="hljs-built_in"> monitor </span>mymaster 127.0.0.1 6379 2<br>sentinel down-after-milliseconds mymaster 5000<br>sentinel failover-timeout mymaster 60000<br>sentinel parallel-syncs mymaster 1<br></code></pre></td></tr></table></figure><h3 id="down-after-milliseconds"><a href="#down-after-milliseconds" class="headerlink" title="down-after-milliseconds"></a>down-after-milliseconds</h3><p>这里配置的 <strong>5000</strong>,代表哨兵在<strong>5秒</strong>内没有收到master响应则视为master下线。注意这里应该是主观下线，后面应该还有客观下线的交互过程，将这个参数写小一点，能更快的响应下线。</p><h3 id="failover-timeout"><a href="#failover-timeout" class="headerlink" title="failover-timeout"></a>failover-timeout</h3><p>这个参数应该是指主从切换的超时，可能和哨兵之间的通信有关系</p><h3 id="parallel-syncs"><a href="#parallel-syncs" class="headerlink" title="parallel-syncs"></a>parallel-syncs</h3><p>设置复本的数量。后面的话我实在翻译不了，网上也没有人翻译。只看明白一句 值越低，切换花的时间越长。设置成1可以保证在指定时刻只有一份复本不可用</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
      <tag>sentinel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>偏向锁和轻量级锁</title>
    <link href="/2021/06/03/3YX47QX.html"/>
    <url>/2021/06/03/3YX47QX.html</url>
    
    <content type="html"><![CDATA[<p>关于java的偏向锁和轻量级锁</p><span id="more"></span><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><p>java中锁有四种级别，分别是</p><ul><li>无锁</li><li>偏向锁</li><li>轻量级锁</li><li>重量级锁</li></ul><p>其中 <strong>偏向锁</strong> 是锁仅获取一次，后续加锁只需要判断对象头里记录的线程是不是当前线程，如果是就直接进入同步。这样可以免去频繁的加锁</p><p>而如果有别的线程来竞争这个锁，那么这个锁就会升级成轻量级锁，线程通过自旋去竞争锁。</p><p>锁升级过程是<strong>不可逆</strong>的</p><h3 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h3><p>在开启偏向锁（默认开启）的情况下，一个锁将由第一个获取锁的线程偏向，对象头里将会记录对应的线程信息。以后这个线程只需要对比记录的线程是否一致，如果一致则不需要加锁解锁操作</p><p>要注意的是，即使线程已经结束了，偏向锁状态也不会消失。而是等到另一个线程来获取这个锁，因为和记录不一致，将升级成轻量级锁</p><h3 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h3><p>轻量级锁是通过cas+自旋来尝试获取锁，首先利用CAS尝试把对象原本的Mark Word 更新为Lock Record的指针，成功就说明加锁成功，然后执行相关同步操作。如果不成功，则开始自旋，不断去CAS。如果指定自旋次数内无法获取锁，则升级为重量级锁，这一过程代表着有过多的线程在竞争锁，才会导致某个线程无法获取锁</p><h3 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h3><p>根据上述知识，设计一个演示程序。基本逻辑如下</p><ul><li>首先有一个线程每隔1秒去获取锁，此时锁应该为偏向锁</li><li>程序运行5.5秒后，另外起线程去获取锁，0.5秒是为了错开竞争，保证之前那个线程不会在此时来获取锁。由于线程不一致，锁升级为轻量级锁</li><li>再次间隔5.5秒后，再起线程每隔1秒去获取锁，此时会和第一个线程竞争，锁应该升级为重量级锁</li></ul><p>以下为一个两个线程竞争锁的程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Object</span> <span class="hljs-variable">sync</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>    <span class="hljs-type">VirtualMachine</span> <span class="hljs-variable">vm</span> <span class="hljs-operator">=</span> VM.current();<br>    <span class="hljs-type">long</span> <span class="hljs-variable">mark</span> <span class="hljs-operator">=</span> vm.getLong(sync, <span class="hljs-number">0</span>);<br>    System.out.println(lockDes(mark));<br><br>    <span class="hljs-comment">// 测试偏向锁升级成轻量级锁</span><br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<span class="hljs-comment">//怀疑是这里使用了</span><br>                <span class="hljs-type">long</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> System.nanoTime();<br>                <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>                <span class="hljs-comment">//如果没有线程竞争锁，这里就是偏向锁，有竞争升级成轻量级锁，自旋以获取锁，理论上获取锁的时间会更长</span><br>                <span class="hljs-keyword">synchronized</span> (sync) &#123;<br>                    <span class="hljs-type">long</span> <span class="hljs-variable">mark</span> <span class="hljs-operator">=</span> vm.getLong(sync, <span class="hljs-number">0</span>);<br>                    System.out.printf(<span class="hljs-string">&quot;%s获取了锁 %d %d %s %n&quot;</span>, Thread.currentThread().getName(), System.nanoTime() - l, (System.currentTimeMillis() - start) / <span class="hljs-number">1000</span>, lockDes(mark));<br>                &#125;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    TimeUnit.SECONDS.sleep(<span class="hljs-number">1</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br><br>            &#125;<br>        &#125;<br>    &#125;).start();<br><br><br>    <span class="hljs-keyword">try</span> &#123;<br>        TimeUnit.SECONDS.sleep(<span class="hljs-number">5</span>);<br>        TimeUnit.MILLISECONDS.sleep(<span class="hljs-number">500</span>);<span class="hljs-comment">//把获取锁间隔开</span><br>    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> System.nanoTime();<br>    <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>    System.out.println(<span class="hljs-string">&quot;开始竞争&quot;</span>);<br>    <span class="hljs-keyword">synchronized</span> (sync) &#123;<br>        mark = vm.getLong(sync, <span class="hljs-number">0</span>);<br>        System.out.printf(<span class="hljs-string">&quot;只竞争一次的%s获取了锁 %d %d %s %n&quot;</span>, Thread.currentThread().getName(), System.nanoTime() - l, (System.currentTimeMillis() - start) / <span class="hljs-number">1000</span>, lockDes(mark));<br>    &#125;<br>    <span class="hljs-keyword">try</span> &#123;<br>        TimeUnit.SECONDS.sleep(<span class="hljs-number">5</span>);<br>        TimeUnit.MILLISECONDS.sleep(<span class="hljs-number">500</span>);<span class="hljs-comment">//把获取锁间隔开</span><br>    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><br><br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-type">long</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> System.nanoTime();<br>                <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>                <span class="hljs-comment">//如果没有线程竞争锁，这里就是偏向锁，有竞争升级成轻量级锁，自旋以获取锁，理论上获取锁的时间会更长</span><br>                <span class="hljs-keyword">synchronized</span> (sync) &#123;<br>                    <span class="hljs-type">long</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> vm.getLong(sync, <span class="hljs-number">0</span>);<br>                    System.out.printf(<span class="hljs-string">&quot;第三个线程%s获取了锁 %d %d %s  %n&quot;</span>, Thread.currentThread().getName(), System.nanoTime() - l, (System.currentTimeMillis() - start) / <span class="hljs-number">1000</span>, lockDes(m));<br><br>                    <span class="hljs-keyword">try</span> &#123;<br>                        TimeUnit.SECONDS.sleep(<span class="hljs-number">1</span>);<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br>                &#125;<br><br>            &#125;<br>        &#125;<br>    &#125;).start();<br><br>&#125;<br><br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">lockDes</span><span class="hljs-params">(<span class="hljs-type">long</span> mark)</span> &#123;<br><br>    <span class="hljs-type">long</span> <span class="hljs-variable">bits</span> <span class="hljs-operator">=</span> mark &amp; <span class="hljs-number">0b11</span>;<br>    <span class="hljs-keyword">switch</span> ((<span class="hljs-type">int</span>) bits) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0b11</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;(marked: GC)&quot;</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0b00</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;(thin lock: 轻量级锁)&quot;</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0b10</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;(fat lock: 重量级锁)&quot;</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0b01</span>:<br>            <span class="hljs-type">int</span> <span class="hljs-variable">tribits</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) (mark &amp; <span class="hljs-number">0b111</span>);<br>            <span class="hljs-keyword">switch</span> (tribits) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">0b001</span>:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;(non-biasable)&quot;</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">0b101</span>:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;(biased: 偏向锁)&quot;</span>;<br>            &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;错误数据&quot;</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>输出如下：</p><blockquote><p>Thread-0获取了锁 82570 0 (biased: 偏向锁)<br>Thread-0获取了锁 28500 0 (biased: 偏向锁)<br>Thread-0获取了锁 26974 0 (biased: 偏向锁)<br>Thread-0获取了锁 29410 0 (biased: 偏向锁)<br>Thread-0获取了锁 25658 0 (biased: 偏向锁)<br>Thread-0获取了锁 19214 0 (biased: 偏向锁)<br>开始竞争<br>只竞争一次的main获取了锁 2132418 0 (thin lock: 轻量级锁)<br>Thread-0获取了锁 19542 0 (thin lock: 轻量级锁)<br>Thread-0获取了锁 24973 0 (thin lock: 轻量级锁)<br>Thread-0获取了锁 28656 0 (thin lock: 轻量级锁)<br>Thread-0获取了锁 29874 0 (thin lock: 轻量级锁)<br>Thread-0获取了锁 30851 0 (thin lock: 轻量级锁)<br>第三个线程Thread-1获取了锁 46264 0 (thin lock: 轻量级锁)<br>Thread-0获取了锁 943671726 0 (fat lock: 重量级锁)<br>第三个线程Thread-1获取了锁 1384640 0 (fat lock: 重量级锁)<br>Thread-0获取了锁 77250 0 (fat lock: 重量级锁)<br>第三个线程Thread-1获取了锁 574245 0 (fat lock: 重量级锁)<br>第三个线程Thread-1获取了锁 21957 0 (fat lock: 重量级锁)<br>第三个线程Thread-1获取了锁 26252 0 (fat lock: 重量级锁)<br>Thread-0获取了锁 2004668640 2 (fat lock: 重量级锁)<br>第三个线程Thread-1获取了锁 1563713 0 (fat lock: 重量级锁)<br>第三个线程Thread-1获取了锁 34069 0 (fat lock: 重量级锁)  </p></blockquote><hr><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p>借助网上的一篇<a href="https://www.cnblogs.com/tiancai/p/9382542.html">博客</a>，来梳理一下过程</p><p>1、主线程来竞争锁<br>2、判断锁为偏向锁，且指向的线程0依旧存活<br>3、暂停线程0<br>4、将锁升级为轻量级锁<br>5、继续执行线程0<br>6、主线程开始自旋<br>7、主线程执行<br>8、主线程释放锁<br>9、线程0获取锁，此时应该为轻量级锁</p><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><p>首先上面代码中用了<strong>jol</strong>来获取锁状态</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.openjdk.jol/jol-core --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.openjdk.jol<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jol-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.16<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-comment">&lt;!--&lt;scope&gt;provided&lt;/scope&gt;--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>主要是获取对象头低3位</p><p><img src="https://i.loli.net/2021/06/03/mPc21TQCZybaLDS.png" alt="java对象头结构"><br><img src="https://i.loli.net/2021/06/03/xuUvdZXnoDOfgCQ.png" alt="无锁和偏向锁"></p><hr><p>锁的升级过程基本可以理解了，但是有一个问题就是：一个对象初始状态怎么就是偏向锁了？</p><p>查阅jdk源码（markOop.hpp，从jdk6到jdk11，这部分都没有改动），关于<strong>markWord</strong>部分注释如下:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br><span class="hljs-comment">//  unused:25 hash:31 --&gt;| unused:1   age:4    biased_lock:1 lock:2 (normal object)</span><br><br><span class="hljs-comment">//  JavaThread*:54 epoch:2 unused:1   age:4    biased_lock:1 lock:2 (biased object)</span><br><br><span class="hljs-comment">//  PromotedObject*:61 ---------------------&gt;| promo_bits:3 -----&gt;| (CMS promoted object)</span><br><br><span class="hljs-comment">//  size:64 -----------------------------------------------------&gt;| (CMS free block)</span><br><br><span class="hljs-comment">//</span><br><br><span class="hljs-comment">//  unused:25 hash:31 --&gt;| cms_free:1 age:4    biased_lock:1 lock:2 (COOPs &amp;&amp; normal object)</span><br><br><span class="hljs-comment">//  JavaThread*:54 epoch:2 cms_free:1 age:4    biased_lock:1 lock:2 (COOPs &amp;&amp; biased object)</span><br><br><span class="hljs-comment">//  narrowOop:32 unused:24 cms_free:1 unused:4 promo_bits:3 -----&gt;| (COOPs &amp;&amp; CMS promoted object)</span><br><br><span class="hljs-comment">//  unused:21 size:35 --&gt;| cms_free:1 unused:7 ------------------&gt;| (COOPs &amp;&amp; CMS free block)</span><br><br><span class="hljs-comment">//</span><br><br><span class="hljs-comment">//  - hash contains the identity hash value: largest value is</span><br><br><span class="hljs-comment">//    31 bits, see os::random().  Also, 64-bit vm&#x27;s require</span><br><br><span class="hljs-comment">//    a hash value no bigger than 32 bits because they will not</span><br><br><span class="hljs-comment">//    properly generate a mask larger than that: see library_call.cpp</span><br><br><span class="hljs-comment">//    and c1_CodePatterns_sparc.cpp.</span><br><br><span class="hljs-comment">//</span><br><br><span class="hljs-comment">//  - the biased lock pattern is used to bias a lock toward a given</span><br><br><span class="hljs-comment">//    thread. When this pattern is set in the low three bits, the lock</span><br><br><span class="hljs-comment">//    is either biased toward a given thread or &quot;anonymously&quot; biased,</span><br><br><span class="hljs-comment">//    indicating that it is possible for it to be biased. When the</span><br><br><span class="hljs-comment">//    lock is biased toward a given thread, locking and unlocking can</span><br><br><span class="hljs-comment">//    be performed by that thread without using atomic operations.</span><br><br><span class="hljs-comment">//    When a lock&#x27;s bias is revoked, it reverts back to the normal</span><br><br><span class="hljs-comment">//    locking scheme described below.</span><br><br><span class="hljs-comment">//</span><br><br><span class="hljs-comment">//    Note that we are overloading the meaning of the &quot;unlocked&quot; state</span><br><br><span class="hljs-comment">//    of the header. Because we steal a bit from the age we can</span><br><br><span class="hljs-comment">//    guarantee that the bias pattern will never be seen for a truly</span><br><br><span class="hljs-comment">//    unlocked object.</span><br><br><span class="hljs-comment">//</span><br><br><span class="hljs-comment">//    Note also that the biased state contains the age bits normally</span><br><br><span class="hljs-comment">//    contained in the object header. Large increases in scavenge</span><br><br><span class="hljs-comment">//    times were seen when these bits were absent and an arbitrary age</span><br><br><span class="hljs-comment">//    assigned to all biased objects, because they tended to consume a</span><br><br><span class="hljs-comment">//    significant fraction of the eden semispaces and were not</span><br><br><span class="hljs-comment">//    promoted promptly, causing an increase in the amount of copying</span><br><br><span class="hljs-comment">//    performed. The runtime system aligns all JavaThread* pointers to</span><br><br><span class="hljs-comment">//    a very large value (currently 128 bytes (32bVM) or 256 bytes (64bVM))</span><br><br><span class="hljs-comment">//    to make room for the age bits &amp; the epoch bits (used in support of</span><br><br><span class="hljs-comment">//    biased locking), and for the CMS &quot;freeness&quot; bit in the 64bVM (+COOPs).</span><br><br><span class="hljs-comment">//</span><br><br><span class="hljs-comment">//    [JavaThread* | epoch | age | 1 | 01]       lock is biased toward given thread</span><br><br><span class="hljs-comment">//    [0           | epoch | age | 1 | 01]       lock is anonymously biased</span><br><br><span class="hljs-comment">//</span><br><br><span class="hljs-comment">//  - the two lock bits are used to describe three states: locked/unlocked and monitor.</span><br><br><span class="hljs-comment">//</span><br><br><span class="hljs-comment">//    [ptr             | 00]  locked             ptr points to real header on stack</span><br><br><span class="hljs-comment">//    [header      | 0 | 01]  unlocked           regular object header</span><br><br><span class="hljs-comment">//    [ptr             | 10]  monitor            inflated lock (header is wapped out)</span><br><br><span class="hljs-comment">//    [ptr             | 11]  marked             used by markSweep to mark an object</span><br><br><span class="hljs-comment">//                                               not valid at any other time</span><br></code></pre></td></tr></table></figure><p>另外还有<strong>jol</strong>中的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">parseMarkWord</span><span class="hljs-params">(<span class="hljs-type">long</span> mark)</span> &#123;<br>    <span class="hljs-comment">//  64 bits:</span><br>    <span class="hljs-comment">//  unused:25 hash:31 --&gt;| unused_gap:1   age:4    biased_lock:1 lock:2 (normal object)</span><br>    <span class="hljs-comment">//  JavaThread*:54 epoch:2 unused_gap:1   age:4    biased_lock:1 lock:2 (biased object)</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">bits</span> <span class="hljs-operator">=</span> mark &amp; <span class="hljs-number">0b11</span>;<br>    <span class="hljs-keyword">switch</span> ((<span class="hljs-type">int</span>) bits) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0b11</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;(marked: &quot;</span> + toHex(mark) + <span class="hljs-string">&quot;)&quot;</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0b00</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;(thin lock: &quot;</span> + toHex(mark) + <span class="hljs-string">&quot;)&quot;</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0b10</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;(fat lock: &quot;</span> + toHex(mark) + <span class="hljs-string">&quot;)&quot;</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0b01</span>:<br>            <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;; age: &quot;</span> + ((mark &gt;&gt; <span class="hljs-number">3</span>) &amp; <span class="hljs-number">0xF</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">tribits</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) (mark &amp; <span class="hljs-number">0b111</span>);<br>            <span class="hljs-keyword">switch</span> (tribits) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">0b001</span>:<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">hash</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>)(mark &gt;&gt;&gt; <span class="hljs-number">8</span>);<br>                    <span class="hljs-keyword">if</span> (hash != <span class="hljs-number">0</span>) &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;(hash: &quot;</span> + toHex(hash) + s + <span class="hljs-string">&quot;)&quot;</span>;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;(non-biasable&quot;</span> + s + <span class="hljs-string">&quot;)&quot;</span>;<br>                    &#125;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">0b101</span>:<br>                    <span class="hljs-type">long</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> mark &gt;&gt;&gt; <span class="hljs-number">10</span>;<br>                    <span class="hljs-keyword">if</span> (thread == <span class="hljs-number">0</span>) &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;(biasable&quot;</span> + s + <span class="hljs-string">&quot;)&quot;</span>;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;(biased: &quot;</span> + toHex(thread) + <span class="hljs-string">&quot;; epoch: &quot;</span> + ((mark &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0x2</span>) + s + <span class="hljs-string">&quot;)&quot;</span>;<br>                    &#125;<br>            &#125;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;(parse error)&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>关于偏向锁部分，重点在于倒数第三位的<strong>baised_lock</strong>。<br>虽然名字叫偏向锁标记，但是我看下来结果更像是<strong>baiseable_lock</strong>——是否可以偏向的标志；如果是1，代表这个对象可以拥有偏向锁；区分是否已经获取了偏向锁，则靠高54位是否为0，获取了偏向锁的情况下，这54bit应该是对应的threadId。</p><p>在使用了 <strong>-XX:-UseBiasedLocking</strong> 关闭偏向锁后，这一位就都变成0了。</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
      <category>concurrent</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>并发</tag>
      
      <tag>锁</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>限流算法</title>
    <link href="/2021/06/02/S6175R.html"/>
    <url>/2021/06/02/S6175R.html</url>
    
    <content type="html"><![CDATA[<p>学习《Redis深度历险：核心原理和应用实践》一书中，提及了两种限流算法</p><span id="more"></span><h3 id="漏水算法"><a href="#漏水算法" class="headerlink" title="漏水算法"></a>漏水算法</h3><p>以下是算法实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">package</span> cn.inkroom.study.redis;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 漏水算法</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> inkbox</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FunnelRateLimiter</span> &#123;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Funnel</span> &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 容器的容量</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">int</span> capacity;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 流水速率，单位是 个/秒</span><br><span class="hljs-comment">         * 以毫秒为单位，流水速率会比较小</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">float</span> leakingRate;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 容器内的剩余容量</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">int</span> leftQuota;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 上次漏水时间，实际代表的是上次请求时间</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">long</span> lastLeakTime;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 初始化限流器</span><br><span class="hljs-comment">         * &lt;p&gt;</span><br><span class="hljs-comment">         * 假设某个行为需要100秒内最多50次(2秒一次)，最多连续操作15次</span><br><span class="hljs-comment">         * 那么容器应该是15，流水速率为 50 / 100 = 0.5</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         * 容器会在第30秒装满，然后维持两秒一次请求通过</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@param</span> capacity    容器数量</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@param</span> leakingRate 流水速率</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Funnel</span><span class="hljs-params">(<span class="hljs-type">int</span> capacity, <span class="hljs-type">float</span> leakingRate)</span> &#123;<br>            <span class="hljs-built_in">this</span>.capacity = capacity;<br>            <span class="hljs-built_in">this</span>.leakingRate = leakingRate;<br>            <span class="hljs-built_in">this</span>.leftQuota = capacity;<br>            <span class="hljs-built_in">this</span>.lastLeakTime = System.currentTimeMillis();<br>        &#125;<br><br><br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">makeSpace</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">nowTs</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>            <span class="hljs-comment">// 距离上次漏水差了多少时间</span><br>            <span class="hljs-type">long</span> <span class="hljs-variable">deltaTs</span> <span class="hljs-operator">=</span> nowTs - lastLeakTime;<br>            <span class="hljs-comment">// 计算应该流走多少数据</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">deltaQuota</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) (deltaTs / <span class="hljs-number">1000</span> * leakingRate);<br><br><br>            <span class="hljs-keyword">if</span> (deltaQuota &lt; <span class="hljs-number">0</span>) &#123;<span class="hljs-comment">// 书中注释，间隔时间太长，整数数字过大溢出</span><br>                <span class="hljs-built_in">this</span>.leftQuota = capacity;<br>                <span class="hljs-built_in">this</span>.lastLeakTime = nowTs;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-comment">// 腾出空间太小，最小单位为1</span><br>            <span class="hljs-keyword">if</span> (deltaQuota &lt; <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-comment">// 修改剩余容量</span><br>            <span class="hljs-built_in">this</span>.leftQuota += deltaQuota;<br>            <span class="hljs-built_in">this</span>.lastLeakTime = nowTs;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.leftQuota &gt; <span class="hljs-built_in">this</span>.capacity) &#123;<br>                <span class="hljs-built_in">this</span>.leftQuota = <span class="hljs-built_in">this</span>.capacity;<br>            &#125;<br><br>        &#125;<br><br>        <span class="hljs-type">boolean</span> <span class="hljs-title function_">watering</span><span class="hljs-params">(<span class="hljs-type">int</span> quota)</span> &#123;<br>            makeSpace();<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.leftQuota &gt;= quota) &#123;<br>                <span class="hljs-comment">// 剩余容量减小</span><br>                <span class="hljs-built_in">this</span>.leftQuota -= quota;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Funnel</span> <span class="hljs-variable">funnel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Funnel</span>(<span class="hljs-number">15</span>, <span class="hljs-number">0.5f</span>);<br>        <span class="hljs-type">long</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;当前：&quot;</span> + ((System.currentTimeMillis() - now) / <span class="hljs-number">1000</span>) + <span class="hljs-string">&quot; &quot;</span> + funnel.watering(<span class="hljs-number">1</span>));<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        Thread.sleep(<span class="hljs-number">1000</span>);<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br>                &#125;<br><br><br>            &#125;<br>        &#125;).start();<br>    &#125;<br><br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="滑动窗口算法"><a href="#滑动窗口算法" class="headerlink" title="滑动窗口算法"></a>滑动窗口算法</h3><p>书中还提及了另一种简单的滑动窗口限流算法，但是给出的实现有一个小问题，会导致请求永远无法通过</p><p>以下是我自己的代码，除了书中的代码，还使用lua脚本替换原本的管道事务的方案</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.inkroom.study.redis;<br><br><span class="hljs-keyword">import</span> redis.clients.jedis.Jedis;<br><span class="hljs-keyword">import</span> redis.clients.jedis.Pipeline;<br><span class="hljs-keyword">import</span> redis.clients.jedis.Response;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 简单限流器</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> inkbox</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TimeLimit</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Jedis jedis;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TimeLimit</span><span class="hljs-params">()</span> &#123;<br>        jedis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jedis</span>(<span class="hljs-string">&quot;192.168.3.64&quot;</span>, <span class="hljs-number">6379</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 操作是否允许被执行。用户userId的action操作在period时间段内，只允许最多执行maxCount次</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userId   用户</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> action   操作类型，比如 like:123 可以代表给id为123的文章点赞</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> period   从现在往前的时间段，单位秒。例如过去一分钟内，60</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> maxCount 指定时间段内的最大次数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">allowExecute</span><span class="hljs-params">(String userId, String action, <span class="hljs-type">int</span> period, <span class="hljs-type">int</span> maxCount)</span> &#123;<br><br><span class="hljs-comment">// 以下是书中的实现，里面有一个小问题</span><br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> String.format(<span class="hljs-string">&quot;limit:%s:%s&quot;</span>, userId, action);<br>        <span class="hljs-type">long</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-type">Pipeline</span> <span class="hljs-variable">pipelined</span> <span class="hljs-operator">=</span> jedis.pipelined();<br>        pipelined.multi();<br>        <span class="hljs-comment">// 这里有个问题，假设在边界时间里不断重试，将会导致永远无法执行</span><br>        <span class="hljs-comment">// 假设 5秒内最多执行2次，但是每秒都在重试</span><br>        <span class="hljs-comment">// 那么除了最开始的两次，之后不管过了多少时间都无法执行</span><br>        <span class="hljs-comment">// 解决方法就是把 add 放到 zremrange 后面，不计数无效尝试</span><br><br>        pipelined.zadd(key, now, now + <span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-comment">// 移除当前时间-period时间前的所有数据</span><br>        pipelined.zremrangeByScore(key, <span class="hljs-number">0</span>, now - period * <span class="hljs-number">1000L</span>);<br>        Response&lt;Long&gt; zcard = pipelined.zcard(key);<br>        <span class="hljs-comment">//设置过期时间</span><br>        pipelined.expire(key, (period) + <span class="hljs-number">1</span>);<br>        pipelined.exec();<br>        pipelined.close();<br><br>        <span class="hljs-keyword">return</span> zcard.get() &lt;= maxCount;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 操作是否允许被执行。用户userId的action操作在period时间段内，只允许最多执行maxCount次</span><br><span class="hljs-comment">     * &lt;p&gt;</span><br><span class="hljs-comment">     * 和 &#123;<span class="hljs-doctag">@link</span> TimeLimit#allowExecute(String, String, int, int)&#125; 的区别在于，该方法不会统计不被允许的执行次数</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userId   用户</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> action   操作类型，比如 like:123 可以代表给id为123的文章点赞</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> period   从现在往前的时间段，单位秒。例如过去一分钟内，60</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> maxCount 指定时间段内的最大次数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">allowExecuteIgnoreFail</span><span class="hljs-params">(String userId, String action, <span class="hljs-type">int</span> period, <span class="hljs-type">int</span> maxCount)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> String.format(<span class="hljs-string">&quot;limit:%s:%s&quot;</span>, userId, action);<br>        <span class="hljs-type">long</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> ((Long) jedis.eval(<br>                <span class="hljs-string">&quot;redis.call(&#x27;zremrangeByScore&#x27;,KEYS[1],0,ARGV[1]);&quot;</span><br>                        + <span class="hljs-string">&quot;local size=redis.call(&#x27;zcard&#x27;,KEYS[1]);&quot;</span><br>                        + <span class="hljs-string">&quot;if (size &lt; tonumber(ARGV[2])) then&quot;</span><br>                        + <span class="hljs-string">&quot;  redis.call(&#x27;zadd&#x27;,KEYS[1],tonumber(ARGV[3]),ARGV[3]);&quot;</span><br>                        + <span class="hljs-string">&quot;end;&quot;</span><br>                        + <span class="hljs-string">&quot;redis.call(&#x27;expire&#x27;,KEYS[1],tonumber(ARGV[4]));&quot;</span><br>                        + <span class="hljs-string">&quot;return size&quot;</span><br>                ,<br>                <span class="hljs-number">1</span>, key, (now - period * <span class="hljs-number">1000L</span>) + <span class="hljs-string">&quot;&quot;</span>, maxCount + <span class="hljs-string">&quot;&quot;</span>, now + <span class="hljs-string">&quot;&quot;</span>, (period + <span class="hljs-number">1</span>) + <span class="hljs-string">&quot;&quot;</span>));<br>        <span class="hljs-keyword">return</span> size &lt; maxCount;<br>        <span class="hljs-comment">// 等同以下代码，只是具有原子性</span><br><span class="hljs-comment">//        jedis.zremrangeByScore(key, 0, now - period * 1000L);</span><br><span class="hljs-comment">//        Long size = jedis.zcard(key);</span><br><span class="hljs-comment">//        if (size &lt; maxCount) &#123;</span><br><span class="hljs-comment">//            //合法操作</span><br><span class="hljs-comment">//            jedis.zadd(key, now, now + &quot;&quot;);</span><br><span class="hljs-comment">//            return true;</span><br><span class="hljs-comment">//        &#125;</span><br><span class="hljs-comment">//        jedis.expire(key, period + 1);</span><br><span class="hljs-comment">//        return false;</span><br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">TimeLimit</span> <span class="hljs-variable">timeLimit</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TimeLimit</span>();<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            System.out.println(timeLimit.allowExecuteIgnoreFail(<span class="hljs-string">&quot;userId-&quot;</span>, <span class="hljs-string">&quot;action&quot;</span>, <span class="hljs-number">5</span>, count));<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="令牌算法"><a href="#令牌算法" class="headerlink" title="令牌算法"></a>令牌算法</h3><p>令牌算法和漏水算法大同小异，只是把一些名词做了替换，令牌就相当于剩余容量，另外允许不经过限流处理，直接通过</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>redis</tag>
      
      <tag>限流</tag>
      
      <tag>漏水算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis管道和事务</title>
    <link href="/2021/06/02/2SE8EY3.html"/>
    <url>/2021/06/02/2SE8EY3.html</url>
    
    <content type="html"><![CDATA[<p>关于管道和事务的使用时机</p><span id="more"></span><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>有这样一段代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">pipe = redis.pipeline();<br>pipe.multi();<br>pipe.incr(<span class="hljs-string">&quot;books&quot;</span>);<br>pipe.excute();<br>pipe.close();<br><br></code></pre></td></tr></table></figure><p>这里同时应用了<strong>管道</strong>和<strong>事务</strong>，但是我认为有些多余。</p><h3 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h3><p>管道的作用是在于把多个命令合并成一次网络请求，交给redis执行，可以有效减少请求时间。</p><blockquote><p>我做过测试，同样次数的请求，一条一条发送，需要35秒左右。5条合并发送一次，就只需要1.5秒左右。</p></blockquote><p>由于redis响应请求是单线程的，所以管道内的请求不会被其他请求插队，可以保证其<strong>原子性</strong></p><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>redis事务很简单，使用<strong>multi</strong>开启，使用<strong>exec</strong> 提交，同时<strong>不会</strong>阻塞请求。按照书中的说法，其保证了当前执行的事务有着不被其他事务打断的权利。</p><p>关于redis事务是否具有原子性的问题上，我看到各个地方说法不太一致</p><ul><li>《redis深度历险：核心原理和应用实践》中通过一个例子证明事务没有原子性</li><li>《redis使用手册》直接说redis具有ACID，没有佐证</li><li>菜鸟教程的说法又体现了其没有原子性</li></ul><p>我使用docker的<strong>redis:6.2.3-alpine</strong> 测试以下脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs redis">multi<br>set key1 22<br>incr notExistKey<br>exec<br><br></code></pre></td></tr></table></figure><p>结果是</p><blockquote><p>(error) EXECABORT Transaction discarded because of previous errors.</p></blockquote><p>再执行</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">get</span> key1<br></code></pre></td></tr></table></figure><p>没有对应的值，说明至少<strong>6.2.3</strong>这个版本的事务是有原子性的</p><p>在<strong>4.0.14-alpine</strong>中执行以下脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs redis">set key1 1<br>multi<br>set key2 2<br>hgetall key1<br>exec<br><br>get key2<br><br></code></pre></td></tr></table></figure><p><strong>exec</strong>结果如下</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-number">1</span>) OK<br><span class="hljs-number">2</span>) (<span class="hljs-keyword">error</span>) WRONGTYPE Operation <span class="hljs-keyword">against</span> a key holding <span class="hljs-keyword">the</span> wrong kind <span class="hljs-keyword">of</span> value<br></code></pre></td></tr></table></figure><p><strong>get</strong> 能够拿到值，可见这个版本不具有原子性</p><hr><p>为了控制变量，我又把这个命令在<strong>6.2.3</strong>上执行了一下，结果两个结果居然一样，key2 同样是有值的</p><p>这。。。我就不知道该说什么了。</p><p>只好求助网络了。</p><hr><p>网上给了一个体现原子性的例子，就是在事务中执行一个不存在的命令（随便输入点什么）。</p><p>这样exec就是报错，而不执行。</p><p>这和我的理解不太一样，我原本理解是，redis事务命令入队时会检测命令是否合法，合法则入队，也就是返回<strong>QUEUED</strong></p><p>现在看可能是命令不合法，会将事务置为出错，入不入队都不重要了，exec时会直接提示错误。</p><p>而我在4.x中执行的错误是一种使用错误，必须执行才能得知的。redis认为这种错误是程序员的错，不会为此大费周章，去做回滚之类的操作。这就是一些人说redis没有原子性的原因</p><hr><p>再测试一下其他特性，按以下流程执行命令</p><table><thead><tr><th>clientA</th><th>clientB</th></tr></thead><tbody><tr><td>set key1 1</td><td></td></tr><tr><td></td><td>multi</td></tr><tr><td></td><td>get key1</td></tr><tr><td>set key1 2</td><td></td></tr><tr><td></td><td>get key1</td></tr><tr><td></td><td>set key1 3</td></tr><tr><td>get key1</td><td></td></tr><tr><td></td><td>exec</td></tr><tr><td>get key1</td><td></td></tr></tbody></table><p>结果如下</p><p><img src="https://i.loli.net/2021/06/02/YskpUOmEnHo47bN.png" alt="C6288E27-C711-4DDD-A494-0D84267F9CA5.png"></p><p>可以看出，事务的隔离级别类似于未提交读，</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>如果按照以上说法，管道同样拥有不会被别的请求打断的功能，那事务还有必要吗？</p><h3 id="回答"><a href="#回答" class="headerlink" title="回答"></a>回答</h3><p>后来我在实现限流时，尝试在管道close之前，获取某条命令的执行结果作判断，结果报了异常。</p><p>细想一下，管道只会在close之后才发送请求，那么肯定是无法获取命令结果的。这就是管道的局限性</p><p>所以后来我使用脚本实现，就能保证操作的原子性，同时不过分浪费网络请求</p><p>当然也可以使用事务实现</p><p>还是没看出来事务有多大意义</p><hr><p>顺便提一句，网上好多关于redis的博客其实就是把官方文档给翻译了一遍，还搞得跟自己研究出来的一样</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>redis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>redis哨兵模式</title>
    <link href="/2021/06/01/5K01J8.html"/>
    <url>/2021/06/01/5K01J8.html</url>
    
    <content type="html"><![CDATA[<p>学习redis哨兵模式中发现的一些问题</p><span id="more"></span><p>我基于docker搭建了三个redis实例，其中一个master，两个slave。</p><p>同时搭建一个sentinel 监视 master</p><p>然后开始测试下线</p><h2 id="master下线"><a href="#master下线" class="headerlink" title="master下线"></a>master下线</h2><p><code>docker stop master</code> 之后，sentinel切换了master，同时修改的配置文件里的 sentinel monitor 对应的ip地址</p><h2 id="测试全部下线"><a href="#测试全部下线" class="headerlink" title="测试全部下线"></a>测试全部下线</h2><p>将所有实例全部下线，sentinel 需要花很长时间才能确定实例<strong>odown</strong></p><p>再将实例全部启动，三台实例之间很容易就构成了最开始的主从结构。</p><p>此时sentinel在经过非常多的时间后，终于发现了现在的主从结构。</p><p>同时执行<code>sentinel slaves</code> 发现发现的实例数量在逐渐增多，由3个变4个，再变5个，多出来的两个处在 <code>s_down,slave,disconnected</code>状态</p><p>初步猜测问题可能出在docker的网络模式上，我在最早的配置中写的是物理机的ip，但是在通信过程中，redis获取到的都是容器在虚拟网卡里的ip地址</p><h2 id="更换网络模式"><a href="#更换网络模式" class="headerlink" title="更换网络模式"></a>更换网络模式</h2><p>把docker网络模式换成<strong>host</strong>之后，实例数量正常了。 同时检查更新的频率为五分钟，相当漫长</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后端</tag>
      
      <tag>redis</tag>
      
      <tag>哨兵</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>并发学习笔记</title>
    <link href="/2021/05/29/212W51W.html"/>
    <url>/2021/05/29/212W51W.html</url>
    
    <content type="html"><![CDATA[<p>并发学习笔记</p><span id="more"></span><h3 id="线程不安全的原因"><a href="#线程不安全的原因" class="headerlink" title="线程不安全的原因"></a>线程不安全的原因</h3><h4 id="共享变量"><a href="#共享变量" class="headerlink" title="共享变量"></a>共享变量</h4><p>线程对数据的操作是以一种类似数据缓存的方式来操作。内存模型中有主内存和本地内存的概念，注意，是概念，并不是一个固定的数据区域。线程操作变量只会操作本地内存里的数据，而从主内存读取和刷新到主内存是比较随机的，导致看似线程在访问同一个变量，实际是各玩各的。这一块叫做线程的可见性</p><h4 id="指令重排"><a href="#指令重排" class="headerlink" title="指令重排"></a>指令重排</h4><p>在程序的各个层面，比如编译器、jvm、操作系统、处理器都可能会对将要运行的执行进行一定的重排序，这种重排序主要是出于效率考虑。</p><p>重排序就是，你写的代码是执行方法A之后，执行方法B。实际运行过程中却非如此。在这一层面，比较看重的是<strong>原子性</strong>，任何非原子性操作就有可能发生指令重排，java中绝大多数操作都是非原子性的，包括但不限于<strong>new</strong>，<strong>++</strong>、<strong>+=</strong>，原子性操作有 <strong>=</strong>、<strong>CAS</strong>。</p><h3 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h3><p>CAS全称比较并交换(compare and swap)，需要三个操作数。第一个变量的地址，第二个期望中变量的值，第三个新值，当且仅当变量当前值等于期望值时，将变量赋予新值，否则什么都不做。这是一个<strong>原子操作</strong>。</p><p>JDK9以前需要通过<strong>UnSafe</strong>类实现CAS操作，9以后使用<strong>VarHandler</strong>实现</p><h3 id="Volatile"><a href="#Volatile" class="headerlink" title="Volatile"></a>Volatile</h3><p>两种功能：</p><ul><li>禁止volatile变量本身的读写 和前后的操作之间的重排序</li><li>保证写入volatile会更新线程共享变量到主内存中（类似于缓存落库）；保证读取volatile之前会从主内存获取共享变量（类似与缓存更新）。也就是保证变量在线程间的可见性</li></ul><hr><p>有以下程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-keyword">static</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>    <br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Threan</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runable</span>()&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>            <span class="hljs-keyword">while</span>(r)&#123;&#125;<br>            System.out.println(<span class="hljs-string">&#x27;结束循环&#x27;</span>);<br>        &#125;<br>    &#125;).start();<br>     <span class="hljs-keyword">try</span> &#123;<br>         Thread.sleep(<span class="hljs-number">1000</span>);<br>     &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>         e.printStackTrace();<br>     &#125;<br>    s = <span class="hljs-literal">false</span>;<br>    <br>&#125;<br><br></code></pre></td></tr></table></figure><p>由于<strong>jmm</strong>不保证 <strong>f</strong> 的内存可见性，死循环将永远无法结束</p><p>想要结束有以下方法</p><ul><li>给<strong>f</strong> 加上<strong>volatile</strong> 关键字</li><li>此外 <strong>f</strong> 不变，额外加上一个 <strong>volatile</strong> 的变量 <strong>a</strong>，在循环体内读变量<strong>a</strong>进行读或者写操作，也能结束循环</li><li>循环体内执行一个有<strong>synchronized</strong>关键字的方法</li></ul><hr><p>以上方法的原理是强制线程从主内存里获取共享变量最新的值</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
      <category>concurrent</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>并发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mariadb数据库索引失效情况</title>
    <link href="/2021/05/27/2Z9HJBH.html"/>
    <url>/2021/05/27/2Z9HJBH.html</url>
    
    <content type="html"><![CDATA[<p>最近看了一篇<a href="https://www.cnblogs.com/wdss/p/11186411.html">博客</a>，研究索引失效情况，但是实际测试有一些不太一样的地方</p><span id="more"></span><h2 id="数据库版本"><a href="#数据库版本" class="headerlink" title="数据库版本"></a>数据库版本</h2><p>我使用的是mariadb，mysql的一个分支版本，具体版本为<strong>mysql  Ver 15.1 Distrib 10.5.10-MariaDB, for debian-linux-gnu (x86_64) using readline 5.2</strong></p><h2 id="建库脚本"><a href="#建库脚本" class="headerlink" title="建库脚本"></a>建库脚本</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><br><span class="hljs-keyword">CREATE TABLE</span> `f` (<br>  `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT NULL</span> AUTO_INCREMENT,<br>  `name` <span class="hljs-type">varchar</span>(<span class="hljs-number">120</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `c_id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `phone` <span class="hljs-type">char</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `qq` <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `gender` <span class="hljs-type">varchar</span>(<span class="hljs-number">12</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY KEY</span> (`id`),<br>  KEY `name_c_id_phone` (`name`,`c_id`,`phone`),<br>  KEY `c_id` (`c_id`),<br>  KEY `gender` (`gender`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">5</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8<br><br></code></pre></td></tr></table></figure><h2 id="操作符"><a href="#操作符" class="headerlink" title="!= 操作符"></a>!= 操作符</h2><p>博客 <strong>第6点</strong> 写到 <strong>!=</strong> 操作符永远不会使用到索引</p><p>然而实际测试之后并非如此</p><p><img src="https://i.loli.net/2021/05/27/u4wXWQSz5vOLFgC.png" alt="C9FA60E8-21F7-460C-B63C-28B77CAB199C.png"></p><h3 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h3><p>再使用mysql做测试，版本<strong>mysql  Ver 14.14 Distrib 5.7.34, for Linux (x86_64) using  EditLine wrapper</strong></p><p><img src="https://i.loli.net/2021/05/27/fsOAdw8aLDbt5i7.png" alt="7ED4BF54-89D6-42C6-86A9-8DB8052D0DD4.png"></p><p>这次就和文章说法一致了</p><h2 id="组合索引，不使用第一列，索引失效"><a href="#组合索引，不使用第一列，索引失效" class="headerlink" title="组合索引，不使用第一列，索引失效"></a>组合索引，不使用第一列，索引失效</h2><p>文章中使用了以下sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> f <span class="hljs-keyword">where</span> c_id<span class="hljs-operator">=</span><span class="hljs-number">1</span><br><br></code></pre></td></tr></table></figure><p>explain 之后的结果确实和文章中所说相同，但是如果对查询列表做下修改</p><p><img src="https://i.loli.net/2021/06/06/hs74QybFJKUaupj.png" alt=""></p><p>可以看出，尽管违背了最左匹配原则，但是还是使用了索引。</p><p>原因就在于查询列表的列都在这个索引里存着，没有相应的回表操作，相比起数据量大的全表扫描，还是索引代价更低。所以还是会使用索引</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
      <tag>数据库</tag>
      
      <tag>索引</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot是如何解析yaml文件的</title>
    <link href="/2021/05/12/3Y7W6EK.html"/>
    <url>/2021/05/12/3Y7W6EK.html</url>
    
    <content type="html"><![CDATA[<p>本文旨在探寻SpringBoot解析<strong>yaml</strong>文件类库原理，而非SpringBoot本身的逻辑，掌握这一知识可以用于设计自己的配置文件格式</p><span id="more"></span><h2 id="类库"><a href="#类库" class="headerlink" title="类库"></a>类库</h2><p>首先，SpringBoot是通过<strong>PropertySourceLoader</strong>来实现各种配置文件的加载，针对<strong>yaml</strong>则是<strong>YamlPropertySourceLoader</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;PropertySource&lt;?&gt;&gt; load(String name, Resource resource) <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-keyword">if</span> (!ClassUtils.isPresent(<span class="hljs-string">&quot;org.yaml.snakeyaml.Yaml&quot;</span>, <span class="hljs-literal">null</span>)) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<br><span class="hljs-string">&quot;Attempted to load &quot;</span> + name + <span class="hljs-string">&quot; but snakeyaml was not found on the classpath&quot;</span>);<br>&#125;<br>List&lt;Map&lt;String, Object&gt;&gt; loaded = <span class="hljs-keyword">new</span> <span class="hljs-title class_">OriginTrackedYamlLoader</span>(resource).load();<br><span class="hljs-keyword">if</span> (loaded.isEmpty()) &#123;<br><span class="hljs-keyword">return</span> Collections.emptyList();<br>&#125;<br>List&lt;PropertySource&lt;?&gt;&gt; propertySources = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(loaded.size());<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; loaded.size(); i++) &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">documentNumber</span> <span class="hljs-operator">=</span> (loaded.size() != <span class="hljs-number">1</span>) ? <span class="hljs-string">&quot; (document #&quot;</span> + i + <span class="hljs-string">&quot;)&quot;</span> : <span class="hljs-string">&quot;&quot;</span>;<br>propertySources.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OriginTrackedMapPropertySource</span>(name + documentNumber, loaded.get(i)));<br>&#125;<br><span class="hljs-keyword">return</span> propertySources;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>跟着路径一路追踪，来到<code>org.yaml.snakeyaml.Yaml</code>第536行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> Iterable&lt;Object&gt; <span class="hljs-title function_">loadAll</span><span class="hljs-params">(Reader yaml)</span> &#123;<br>       <span class="hljs-type">Composer</span> <span class="hljs-variable">composer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Composer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ParserImpl</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StreamReader</span>(yaml)), resolver);<br>       constructor.setComposer(composer);<br>       Iterator&lt;Object&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Iterator</span>&lt;Object&gt;() &#123;<br>           <span class="hljs-meta">@Override</span><br>           <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span> &#123;<br>               <span class="hljs-keyword">return</span> constructor.checkData();<br>           &#125;<br><br>           <span class="hljs-meta">@Override</span><br>           <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">next</span><span class="hljs-params">()</span> &#123;<br>               <span class="hljs-keyword">return</span> constructor.getData();<br>           &#125;<br><br>           <span class="hljs-meta">@Override</span><br>           <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">()</span> &#123;<br>               <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>();<br>           &#125;<br>       &#125;;<br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">YamlIterable</span>(result);<br>   &#125;<br>   <br></code></pre></td></tr></table></figure><p>这里出现了几个类，其中</p><ul><li>StreamReader  负责数据读取</li><li>ParserImpl  负责数据转换</li><li>Composer 有点类似于一个对外的封装，负责触发读取事件</li><li>ScannerImpl 应该是负责数据扫描，将读取到的数据，按照规则组成有意义的单位</li></ul><h3 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h3><p>来看数据读取这一部分，就是<code>StreamReader</code></p><p>首先是初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">StreamReader</span><span class="hljs-params">(Reader reader)</span> &#123;<br>    <span class="hljs-built_in">this</span>.name = <span class="hljs-string">&quot;&#x27;reader&#x27;&quot;</span>;<br>    <span class="hljs-built_in">this</span>.dataWindow = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">0</span>];<span class="hljs-comment">//数据窗口，应该一次读取一定的数据</span><br>    <span class="hljs-built_in">this</span>.dataLength = <span class="hljs-number">0</span>;<span class="hljs-comment">//已经读取到的数据长度</span><br>    <span class="hljs-built_in">this</span>.stream = reader;<span class="hljs-comment">// 数据流</span><br>    <span class="hljs-built_in">this</span>.eof = <span class="hljs-literal">false</span>;<span class="hljs-comment">// 文件是否读取完标志</span><br>    <span class="hljs-built_in">this</span>.buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[BUFFER_SIZE];<span class="hljs-comment">// 缓冲</span><br>&#125;<br></code></pre></td></tr></table></figure><p>初始化完成后，就应该要读取文件了</p><p>文件读取是对流的操作，那么只要一路跟踪<strong>this.stream</strong>的调用就行了。但是这只适用于简单的类</p><p>可以看出，这里只有<code>private void update()</code> 才有流的操作，那么在这里打断点</p><p>这是刚开始的情况</p><p>–插入图片</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">read</span> <span class="hljs-operator">=</span> stream.read(buffer, <span class="hljs-number">0</span>, BUFFER_SIZE - <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span> (read &gt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">cpIndex</span> <span class="hljs-operator">=</span> (dataLength - pointer);<span class="hljs-comment">//这里是获取本次读取在dataWindow中的起始点，从这以后的数据，就是本次读取到的数据</span><br>                dataWindow = Arrays.copyOfRange(dataWindow, pointer, dataLength + read);<span class="hljs-comment">//重新构建一个数组，其他目的待定</span><br><br>                <span class="hljs-keyword">if</span> (Character.isHighSurrogate(buffer[read - <span class="hljs-number">1</span>])) &#123;<span class="hljs-comment">//判断最后一个字符是否是HighSurrogate，这是unicode编码中的概念，此时需要再多读取一个字符。这里不太明白，可能需要再去学习编码知识才行</span><br>                    <span class="hljs-keyword">if</span> (stream.read(buffer, read, <span class="hljs-number">1</span>) == -<span class="hljs-number">1</span>) &#123;<br>                        eof = <span class="hljs-literal">true</span>;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        read++;<br>                    &#125;<br>                &#125;<br><br>                <span class="hljs-type">int</span> <span class="hljs-variable">nonPrintable</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27; &#x27;</span>;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; read; cpIndex++) &#123;<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">codePoint</span> <span class="hljs-operator">=</span> Character.codePointAt(buffer, i);<br>                    dataWindow[cpIndex] = codePoint;<span class="hljs-comment">//赋值</span><br>                    <span class="hljs-keyword">if</span> (isPrintable(codePoint)) &#123;<span class="hljs-comment">//判断这个字符是否可打印，或者说可见，如果可见则继续读取</span><br>                        i += Character.charCount(codePoint);<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//不可见则读写结束，避免有不可见字符导致出bug</span><br>                        nonPrintable = codePoint;<br>                        i = read;<br>                    &#125;<br>                &#125;<br><br>                dataLength = cpIndex;<br>                pointer = <span class="hljs-number">0</span>;<span class="hljs-comment">//当前数据指针归零</span><br>                <span class="hljs-keyword">if</span> (nonPrintable != <span class="hljs-string">&#x27; &#x27;</span>) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReaderException</span>(name, cpIndex - <span class="hljs-number">1</span>, nonPrintable,<br>                            <span class="hljs-string">&quot;special characters are not allowed&quot;</span>);<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                eof = <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException ioe) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">YAMLException</span>(ioe);<br>        &#125;<br>    &#125;<br><br></code></pre></td></tr></table></figure><p>第一次读写结束，跟着debug发现，这是被<code>private boolean ensureEnoughData(int size)</code>调用</p><p>数据读取没有什么特别的地方，总体结果就是读取了一定长度的数据</p><h3 id="扫描"><a href="#扫描" class="headerlink" title="扫描"></a>扫描</h3><p>数据读取后，需要在组织成有意义的数据单位，这就是由 <code>ScannerImpl</code> 负责的内容</p><p>上面的数据读取是由<code>ScannerImpl</code>的<code>private void scanToNextToken()</code>方法调用的。</p><p>这个方法的作用在于，定位到有实际意义的字符开头，跳过一些特殊字符和注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">scanToNextToken</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// If there is a byte order mark (BOM) at the beginning of the stream,</span><br>        <span class="hljs-comment">// forward past it.</span><br>        <span class="hljs-keyword">if</span> (reader.getIndex() == <span class="hljs-number">0</span> &amp;&amp; reader.peek() == <span class="hljs-number">0xFEFF</span>) &#123;<span class="hljs-comment">//跳过文件开头可能存在的bom头</span><br>            reader.forward();<br>        &#125;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">found</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">while</span> (!found) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">ff</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-comment">// Peek ahead until we find the first non-space character, then</span><br>            <span class="hljs-comment">// move forward directly to that character.</span><br>            <span class="hljs-keyword">while</span> (reader.peek(ff) == <span class="hljs-string">&#x27; &#x27;</span>) &#123;<br>                ff++;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (ff &gt; <span class="hljs-number">0</span>) &#123;<br>                reader.forward(ff);<br>            &#125;<br>            <span class="hljs-comment">// If the character we have skipped forward to is a comment (#),</span><br>            <span class="hljs-comment">// then peek ahead until we find the next end of line. YAML</span><br>            <span class="hljs-comment">// comments are from a # to the next new-line. We then forward</span><br>            <span class="hljs-comment">// past the comment.</span><br>            <span class="hljs-keyword">if</span> (reader.peek() == <span class="hljs-string">&#x27;#&#x27;</span>) &#123;<span class="hljs-comment">//这一行被注释，直接跳过</span><br>                ff = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">while</span> (Constant.NULL_OR_LINEBR.hasNo(reader.peek(ff))) &#123;<span class="hljs-comment">//跳过一些字符，具体为什么还没弄明白</span><br>                    ff++;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (ff &gt; <span class="hljs-number">0</span>) &#123;<br>                    reader.forward(ff);<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// If we scanned a line break, then (depending on flow level),</span><br>            <span class="hljs-comment">// simple keys may be allowed.</span><br>            <span class="hljs-keyword">if</span> (scanLineBreak().length() != <span class="hljs-number">0</span>) &#123;<span class="hljs-comment">// found a line-break 处理各种情况的换行符，这里涉及到\u2029之类的特殊字符编码，需要去学习</span><br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.flowLevel == <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-comment">// Simple keys are allowed at flow-level 0 after a line</span><br>                    <span class="hljs-comment">// break</span><br>                    <span class="hljs-built_in">this</span>.allowSimpleKey = <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                found = <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br></code></pre></td></tr></table></figure><hr><p>回到上级调用——<code>private void fetchMoreTokens()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fetchMoreTokens</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// Eat whitespaces and comments until we reach the next token.</span><br>        scanToNextToken();<br>        <span class="hljs-comment">// Remove obsolete possible simple keys. 删除一些不再使用的 simple keys，不能理解这个simple keys是什么，在debug中，这个方法实际没有具体执行内容</span><br>        stalePossibleSimpleKeys();<br>        <span class="hljs-comment">// Compare the current indentation and column. It may add some tokens</span><br>        <span class="hljs-comment">// and decrease the current indentation level.  根据当前数据指针所在列，确定缩进级别；这里有个flowLevel决定要不要处理缩进；这个方法里有一些细节，建议先看下文解析；只处理缩进减小是因为如果缩进会增大，那么在下面的判断第一个字符获取token的时候就会重新定位缩进</span><br>         unwindIndent(reader.getColumn());<br>        <span class="hljs-comment">// Peek the next code point, to decide what the next group of tokens</span><br>        <span class="hljs-comment">// will look like.</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> reader.peek();<span class="hljs-comment">//此时拿到的应该是一行数据第一个有意义的字符</span><br>        <span class="hljs-keyword">switch</span> (c) &#123; <span class="hljs-comment">//接下来首先要判断是不是一些关键字</span><br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;\0&#x27;</span><br>            <span class="hljs-comment">// Is it the end of stream? 可能读取到了一行回车，或者只有空白字符的数据</span><br>            fetchStreamEnd();<br>            <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;%&#x27;</span>:<br>            <span class="hljs-comment">// Is it a directive? 指令</span><br>            <span class="hljs-keyword">if</span> (checkDirective()) &#123;<br>                fetchDirective();<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;-&#x27;</span>:<br>            <span class="hljs-comment">// Is it the document start?</span><br>            <span class="hljs-keyword">if</span> (checkDocumentStart()) &#123;<br>                fetchDocumentStart();<br>                <span class="hljs-keyword">return</span>;<br>                <span class="hljs-comment">// Is it the block entry indicator?</span><br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (checkBlockEntry()) &#123;<br>                fetchBlockEntry();<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;.&#x27;</span>:<br>            <span class="hljs-comment">// Is it the document end?</span><br>            <span class="hljs-keyword">if</span> (checkDocumentEnd()) &#123;<br>                fetchDocumentEnd();<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-comment">// TODO support for BOM within a stream. (not implemented in PyYAML)</span><br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;[&#x27;</span>:<br>            <span class="hljs-comment">// Is it the flow sequence start indicator?</span><br>            fetchFlowSequenceStart();<br>            <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;&#123;&#x27;</span>:<br>            <span class="hljs-comment">// Is it the flow mapping start indicator?</span><br>            fetchFlowMappingStart();<br>            <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;]&#x27;</span>:<br>            <span class="hljs-comment">// Is it the flow sequence end indicator?</span><br>            fetchFlowSequenceEnd();<br>            <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;&#125;&#x27;</span>:<br>            <span class="hljs-comment">// Is it the flow mapping end indicator?</span><br>            fetchFlowMappingEnd();<br>            <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;,&#x27;</span>:<br>            <span class="hljs-comment">// Is it the flow entry indicator?</span><br>            fetchFlowEntry();<br>            <span class="hljs-keyword">return</span>;<br>            <span class="hljs-comment">// see block entry indicator above</span><br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;?&#x27;</span>:<br>            <span class="hljs-comment">// Is it the key indicator?</span><br>            <span class="hljs-keyword">if</span> (checkKey()) &#123;<br>                fetchKey();<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;:&#x27;</span>:<br>            <span class="hljs-comment">// Is it the value indicator?</span><br>            <span class="hljs-keyword">if</span> (checkValue()) &#123;<br>                fetchValue();<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;*&#x27;</span>:<br>            <span class="hljs-comment">// Is it an alias?</span><br>            fetchAlias();<br>            <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;&amp;&#x27;</span>:<br>            <span class="hljs-comment">// Is it an anchor?</span><br>            fetchAnchor();<br>            <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;!&#x27;</span>:<br>            <span class="hljs-comment">// Is it a tag?</span><br>            fetchTag();<br>            <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;|&#x27;</span>:<br>            <span class="hljs-comment">// Is it a literal scalar?</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.flowLevel == <span class="hljs-number">0</span>) &#123;<br>                fetchLiteral();<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;&gt;&#x27;</span>:<br>            <span class="hljs-comment">// Is it a folded scalar?</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.flowLevel == <span class="hljs-number">0</span>) &#123;<br>                fetchFolded();<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;\&#x27;&#x27;</span>:<br>            <span class="hljs-comment">// Is it a single quoted scalar?</span><br>            fetchSingle();<br>            <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;&quot;&#x27;</span>:<br>            <span class="hljs-comment">// Is it a double quoted scalar?</span><br>            fetchDouble();<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">// It must be a plain scalar then. 此时是一个普通字符</span><br>        <span class="hljs-keyword">if</span> (checkPlain()) &#123;<br>            fetchPlain();<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">// No? It&#x27;s an error. Let&#x27;s produce a nice error message.We do this by</span><br>        <span class="hljs-comment">// converting escaped characters into their escape sequences. This is a</span><br>        <span class="hljs-comment">// backwards use of the ESCAPE_REPLACEMENTS map.</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">chRepresentation</span> <span class="hljs-operator">=</span> String.valueOf(Character.toChars(c));<br>        <span class="hljs-keyword">for</span> (Character s : ESCAPE_REPLACEMENTS.keySet()) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">v</span> <span class="hljs-operator">=</span> ESCAPE_REPLACEMENTS.get(s);<br>            <span class="hljs-keyword">if</span> (v.equals(chRepresentation)) &#123;<br>                chRepresentation = <span class="hljs-string">&quot;\\&quot;</span> + s;<span class="hljs-comment">// &#x27; &#x27; -&gt; &#x27;\t&#x27;</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;\t&#x27;</span>)<br>            chRepresentation += <span class="hljs-string">&quot;(TAB)&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">text</span> <span class="hljs-operator">=</span> String<br>                .format(<span class="hljs-string">&quot;found character &#x27;%s&#x27; that cannot start any token. (Do not use %s for indentation)&quot;</span>,<br>                        chRepresentation, chRepresentation);<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ScannerException</span>(<span class="hljs-string">&quot;while scanning for the next token&quot;</span>, <span class="hljs-literal">null</span>, text,<br>                reader.getMark());<br>    &#125;<br><br>    <span class="hljs-comment">// Simple keys treatment.</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Return the number of the nearest possible simple key. Actually we don&#x27;t</span><br><span class="hljs-comment">     * need to loop through the whole dictionary.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">nextPossibleSimpleKey</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * the implementation is not as in PyYAML. Because</span><br><span class="hljs-comment">         * this.possibleSimpleKeys is ordered we can simply take the first key</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.possibleSimpleKeys.isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.possibleSimpleKeys.values().iterator().next().getTokenNumber();<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="看一下如何决定缩进级别的"><a href="#看一下如何决定缩进级别的" class="headerlink" title="看一下如何决定缩进级别的"></a>看一下如何决定缩进级别的</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unwindIndent</span><span class="hljs-params">(<span class="hljs-type">int</span> col)</span> &#123;<br>       <span class="hljs-comment">// In the flow context, indentation is ignored. We make the scanner less</span><br>       <span class="hljs-comment">// restrictive then specification requires.</span><br>       <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.flowLevel != <span class="hljs-number">0</span>) &#123;<br>           <span class="hljs-keyword">return</span>;<br>       &#125;<br><br>       <span class="hljs-comment">// In block context, we may need to issue the BLOCK-END tokens.</span><br>       <span class="hljs-keyword">while</span> (<span class="hljs-built_in">this</span>.indent &gt; col) &#123;<span class="hljs-comment">//确定当前有没有必要减小缩进；一个缩进减小代表结束了一个block(代码块)</span><br>           <span class="hljs-type">Mark</span> <span class="hljs-variable">mark</span> <span class="hljs-operator">=</span> reader.getMark();<span class="hljs-comment">//这里mark相当于对当前数据状态的一个快照</span><br>           <span class="hljs-built_in">this</span>.indent = <span class="hljs-built_in">this</span>.indents.pop();<span class="hljs-comment">//这里使用了一个栈来记录经历的缩进级别变化，此处出栈来确定当前应该有的缩进级别</span><br>           <span class="hljs-built_in">this</span>.tokens.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BlockEndToken</span>(mark, mark));<span class="hljs-comment">//代码块结束，而且可能不止结束一个</span><br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><hr><p><code>fetchMoreToken</code>执行完成后，此时应该增加了一个Token</p><h3 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h3><p>此时调用来到了<code>PraseImpl</code>的第195行，此时处在一个内部类中<code>private class ParseImplicitDocumentStart implements Production</code></p><p>这里有个接口<code>Production</code>，注释说明这个接口用于语法转换。我的理解就是用来处理Token的，处理完成后返回Event，同时注册下一个<code>Production</code></p><p>此外还有一个<code>Event</code>，这个类就是一个基本单元，表明现在处于读写的什么状态上，这里面会存放数据快照</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ParseImplicitDocumentStart</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Production</span> &#123;<br>       <span class="hljs-keyword">public</span> Event <span class="hljs-title function_">produce</span><span class="hljs-params">()</span> &#123;<br>           <span class="hljs-comment">// Parse an implicit document.</span><br>           <span class="hljs-keyword">if</span> (!scanner.checkToken(Token.ID.Directive, Token.ID.DocumentStart, Token.ID.StreamEnd)) &#123;<span class="hljs-comment">//只要不是这三种Token，那么代表文件是有数据的</span><br>               directives = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VersionTagsTuple</span>(<span class="hljs-literal">null</span>, DEFAULT_TAGS);<br>               <span class="hljs-type">Token</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> scanner.peekToken();<br>               <span class="hljs-type">Mark</span> <span class="hljs-variable">startMark</span> <span class="hljs-operator">=</span> token.getStartMark();<br>               <span class="hljs-type">Mark</span> <span class="hljs-variable">endMark</span> <span class="hljs-operator">=</span> startMark;<br>               <span class="hljs-type">Event</span> <span class="hljs-variable">event</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DocumentStartEvent</span>(startMark, endMark, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>               <span class="hljs-comment">// Prepare the next state.</span><br>               states.push(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ParseDocumentEnd</span>());<span class="hljs-comment">//保底操作</span><br>               state = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ParseBlockNode</span>();<br>               <span class="hljs-keyword">return</span> event;<br>           &#125; <span class="hljs-keyword">else</span> &#123;<br>               <span class="hljs-type">Production</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ParseDocumentStart</span>();<br>               <span class="hljs-keyword">return</span> p.produce();<br>           &#125;<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><p>要注意一下方法命名规则，<strong>peek</strong>是获取当前Event，如果没有就根据实际情况去扫描文件转换一个Event出来，<strong>get</strong>是获取当前Event，同时清除Event，之后调用<strong>peek</strong>就会一定去扫描文件了</p><hr><p>继续回退之后，这些还只是在 <code>checkData</code>，还没有去获取数据</p><h3 id="数据封装"><a href="#数据封装" class="headerlink" title="数据封装"></a>数据封装</h3><p>在<code>getData</code>方法中去获取数据，并封装</p><p>入口定位为<code>Compose.getNode()</code> 方法，这里又有一个新的类<code>Node</code>。这个可以看作一颗树，但是根据每个节点的类型不同，子树结构会有一些变化。</p><p>那么对于树结构来说，递归就是常规用法了。</p><p>主要方法就是<code>Node composeNode(Node parent)</code>。这个方法相当于一个总的递归入口，里面还会根据不同情况继续分发方法，比如<code>Node composeScalarNode(String anchor)</code>、<code>Node composeSequenceNode(String anchor)</code>、<code>Node composeMappingNode(String anchor)</code></p><p>拿最常见的mapping来说明，假设现在有下面这样一个配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">logging:</span><br><span class="hljs-attr">com:</span> <span class="hljs-string">debug</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//此时node应该就是logging，childdren代表node底下还可能有的数据存储</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">composeMappingChildren</span><span class="hljs-params">(List&lt;NodeTuple&gt; children, MappingNode node)</span> &#123;<br>    <span class="hljs-type">Node</span> <span class="hljs-variable">itemKey</span> <span class="hljs-operator">=</span> composeKeyNode(node);<span class="hljs-comment">//这里获取key，此处就应该是com</span><br>        <span class="hljs-keyword">if</span> (itemKey.getTag().equals(Tag.MERGE)) &#123;<br>            node.setMerged(<span class="hljs-literal">true</span>);<br>        &#125;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">itemValue</span> <span class="hljs-operator">=</span> composeValueNode(node);<span class="hljs-comment">//这里获取value，此处就应该是debug，同时这些方法都是递归调用，也就允许一直往下</span><br>        children.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">NodeTuple</span>(itemKey, itemValue));<span class="hljs-comment">//这里就是把com: debug 作为children存入</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><p>最终读取到的结果就是一个树结构，但是spring中实际使用是都是普通的kv结构，所以还需要进行一个转换。</p><p>这一过程交给了<code>YamlProcessor</code>的<code>boolean process(Map&lt;String, Object&gt; map, MatchCallback callback)</code>方法，这里就属于spring的内容了，不在研究范围内</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><strong>snake</strong>一次读取若干字节，从里面剔除非法字符、注释</li><li>逐字扫描，确定字符类型和接下来的操作</li><li>将扫描出来的字符封装成Token，交给<code>Parse</code>转换成Event</li><li>再将Event做封装成Node，将Node组成一棵树交给Spring</li><li>Spring再把树做扁平化处理，用于后续流程</li></ul><p>虽然在这里是自下向顶的，但是实际流程是<strong>自顶向下</strong>执行的。本文只为探究基本原理，因此源码中大量的细节未曾涉及，感兴趣的可以自行研究</p><h2 id="2021-09-23-补充"><a href="#2021-09-23-补充" class="headerlink" title="2021-09-23 补充"></a>2021-09-23 补充</h2><p>实际上这就是一种状态机思想，我也使用这种思想实现了一个json库，具体参见<a href="http://blog.inkroom.cn/2021/09/23/AS44AY.html">博客</a></p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>yaml</tag>
      
      <tag>SpringBoot</tag>
      
      <tag>snakeyaml</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dubbo踩坑</title>
    <link href="/2021/04/04/045R8S.html"/>
    <url>/2021/04/04/045R8S.html</url>
    
    <content type="html"><![CDATA[<p>记录一下学习dubbo中踩的坑</p><span id="more"></span><h3 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h3><p>版本务必要匹配，否则总会出一些问题，目前使用的版本如下：</p><ul><li><p>openjdk version 11.0.10</p></li><li><p>SpringBoot: 2.1.6.RELEASE</p></li><li><p>dubbo: 2.7.7</p></li><li><p>dubbo-spring-boot-starter: 2.7.7</p></li><li><p>nacos-client: 1.4.1</p></li><li><p>dubbo-serialization-kryo: 2.7.9</p></li><li><p>com.github.briandilley.jsonrpc4j:jsonrpc4j:1.2.0 </p><blockquote><p>仅在使用http协议时引用。高版本上<strong>HttpException</strong>访问权限为default</p></blockquote></li><li><p>org.eclipse.jetty:jetty-servlet</p><blockquote><p>注意，官网标定版本是6.1.26，但是此版本的groupdId和包名是<a href="https://mvnrepository.com/artifact/org.mortbay.jetty">org.mortbay.jetty</a></p></blockquote></li></ul><p>整体基于<strong>spring.properties</strong>配置</p><p>ps: 在此必须骂一下dubbo的文档，dubbo高版本上已经在源码上集成了若干注册中心的代码，但是文档里居然还在要求引入相关的依赖，而且demo的版本还在0.0.2</p><h3 id="多协议"><a href="#多协议" class="headerlink" title="多协议"></a>多协议</h3><p>官网上只列出了xml下的多协议</p><p>经过测试，服务提供者spring配置应该如下</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">## 多出的协议写在这里</span><br><span class="hljs-attr">dubbo.protocols.dubbo.port</span>=<span class="hljs-string">20081</span><br><span class="hljs-attr">dubbo.protocols.http.port</span>=<span class="hljs-string">7845</span><br><span class="hljs-comment">## 以下配置必须写，否则会报错</span><br><span class="hljs-attr">dubbo.protocol.name</span>=<span class="hljs-string">dubbo</span><br><span class="hljs-attr">dubbo.protocol.port</span>=<span class="hljs-string">10022</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">## 以上配置会启动三个协议，分别是dubbo[10022]、http[7845]、dubbo[20081]</span><br></code></pre></td></tr></table></figure><hr><p>某项服务如果提供了多协议，那么消费者默认都是dubbo协议，暂时没有找到切换的方法</p><h4 id="http协议踩坑"><a href="#http协议踩坑" class="headerlink" title="http协议踩坑"></a>http协议踩坑</h4><p>在使用http协议时，消费者忘记引入<strong>jsonrpc</strong>，结果出现找不到服务提供者错误<strong>No provider available for the service</strong>，</p><p>经过<strong>一天</strong> 的排查，问题出现在<code>org.apache.dubbo.registry.integration.RegistryDirectory:429</code>。由于<code>org.apache.dubbo.rpc.protocol.http.HttpProtocol</code>引入了<strong>jsonrpc4j</strong>的依赖</p><hr><p>dubbo里的http协议意思是rpc过程通过http协议传输，对应的接口并不能对web提供，<strong>哪怕</strong>官网确实写了可以。想要实现需要使用<strong>REST</strong>协议，但是需要对代码作改动</p><hr><p>dubbo-admin 测试不支持http协议，一旦只提供http协议的，测试就会出现服务找不到错误，但是消费者实际使用时没有问题</p><h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><p>配置项中务必加上</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">dubbo.application.logger</span>=<span class="hljs-string">slf4j</span><br></code></pre></td></tr></table></figure><p>否则 dubbo 不会输出日志</p><h3 id="多实现"><a href="#多实现" class="headerlink" title="多实现"></a>多实现</h3><p>假设一个接口有多个实现，那么之间必须进行分组，否则只会注册一个实现。</p><p>现在我有两个<strong>FileStorage</strong>的实现类</p><p>分别注解如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@DubboService( protocol = &quot;http&quot;, tag = &quot;minio&quot;,group = &quot;minio&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MinIOFileStorage</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FileStorage</span> <br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@DubboService(protocol = &quot;http&quot;,tag = &quot;qn&quot;,interfaceClass = FileStorage.class,group = &quot;qn&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">QiNiuFileStorage</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FileStorage</span> <br></code></pre></td></tr></table></figure><p><strong>nacos</strong> 显示如下</p><p>![2021-04-05 15-11-23屏幕截图](/home/ink/图片/2021-04-05 15-11-23屏幕截图.png)</p><p>但是在<strong>dubbo-admin</strong>中又只显示<strong>qn</strong>实现，只有一次显示了两个实现</p><p>消费者引用如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@DubboReference(group = &quot;minio&quot;)</span><br><span class="hljs-keyword">private</span> FileStorage minioFileStorage;<br><span class="hljs-meta">@DubboReference(group = &quot;qn&quot;)</span><br><span class="hljs-keyword">private</span> FileStorage qnFileStorage;<br></code></pre></td></tr></table></figure><p>测试结果显示，两个变量都是 <strong>QiNiuFileStorage</strong> 的实现，查看nacos，消费者只订阅了<strong>minio</strong></p><p>![](/home/ink/图片/2021-04-05 15-13-20屏幕截图.png)</p><p>多次测试后发现，此时是dubbo的负载均衡作祟，多个实现轮流调用</p><p>测试后修改配置如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@DubboService( group = &quot;minio&quot;)</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MinIOFileStorage</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FileStorage</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@DubboService(group = &quot;qn&quot;,path = &quot;qnFileStorage&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">QiNiuFileStorage</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FileStorage</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@DubboReference(group = &quot;minio&quot;)</span><br><span class="hljs-keyword">private</span> FileStorage fileStorage;<br><span class="hljs-meta">@DubboReference(group = &quot;qn&quot;)</span><br><span class="hljs-keyword">private</span> FileStorage qnFileStorage;<br></code></pre></td></tr></table></figure><p>实际起作用的是<strong>path = “qnFileStorage”</strong>，怀疑可能是dubbo通过path去寻找对应的实现类，默认情况下path相同，被是为同一实现的不同实例，启用负载。</p><p>但是<strong>dubbo-admin</strong> 仍然只能看到一个实现</p><h3 id="多版本"><a href="#多版本" class="headerlink" title="多版本"></a>多版本</h3><p>当服务端配置了版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pro">dubbo.provider.version=1.0<br>dubbo.provider.group=dev-third<br></code></pre></td></tr></table></figure><p>消费者也必须指定版本</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">dubbo.consumer.group</span>=<span class="hljs-string">dev-third</span><br><span class="hljs-attr">dubbo.consumer.version</span>=<span class="hljs-string">1.0</span><br></code></pre></td></tr></table></figure><hr><p>文档上注明 不关注版本时可以 写成 *****</p><p>但实际上 会出现以下错误</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">[<span class="hljs-number">2021</span>-<span class="hljs-number">04</span>-<span class="hljs-number">11</span> <span class="hljs-number">15</span>:<span class="hljs-number">45</span>:<span class="hljs-number">02.552</span>] [<span class="hljs-number">3.4</span><span class="hljs-number">.1</span>] [DubboSaveMetadataReport-thread-<span class="hljs-number">1</span>] [后台] [无] ERROR org.apache.dubbo.metadata.store.nacos.NacosMetadataReport :  [DUBBO] Failed to put consumer metadata org.apache.dubbo.metadata.report.identifier.MetadataIdentifier@2c1e3659;  &#123;init=<span class="hljs-literal">false</span>, side=consumer, release=<span class="hljs-number">2.7</span><span class="hljs-number">.7</span>, logger=slf4j, dubbo=<span class="hljs-number">2.0</span><span class="hljs-number">.2</span>, interface=com.bcyunqian.yq.third.api.Bank4Identify, version=*, qos.enable=<span class="hljs-literal">false</span>, generic=<span class="hljs-literal">true</span>, timeout=<span class="hljs-number">5000</span>, metadata-type=remote, application=service, sticky=<span class="hljs-literal">false</span>, group=dev-third&#125;, cause: Failed to put org.apache.dubbo.metadata.report.identifier.MetadataIdentifier@2c1e3659 to nacos &#123;<span class="hljs-string">&quot;init&quot;</span>:<span class="hljs-string">&quot;false&quot;</span>,<span class="hljs-string">&quot;side&quot;</span>:<span class="hljs-string">&quot;consumer&quot;</span>,<span class="hljs-string">&quot;release&quot;</span>:<span class="hljs-string">&quot;2.7.7&quot;</span>,<span class="hljs-string">&quot;logger&quot;</span>:<span class="hljs-string">&quot;slf4j&quot;</span>,<span class="hljs-string">&quot;dubbo&quot;</span>:<span class="hljs-string">&quot;2.0.2&quot;</span>,<span class="hljs-string">&quot;interface&quot;</span>:<span class="hljs-string">&quot;com.bcyunqian.yq.third.api.Bank4Identify&quot;</span>,<span class="hljs-string">&quot;version&quot;</span>:<span class="hljs-string">&quot;*&quot;</span>,<span class="hljs-string">&quot;qos.enable&quot;</span>:<span class="hljs-string">&quot;false&quot;</span>,<span class="hljs-string">&quot;generic&quot;</span>:<span class="hljs-string">&quot;true&quot;</span>,<span class="hljs-string">&quot;timeout&quot;</span>:<span class="hljs-string">&quot;5000&quot;</span>,<span class="hljs-string">&quot;metadata-type&quot;</span>:<span class="hljs-string">&quot;remote&quot;</span>,<span class="hljs-string">&quot;application&quot;</span>:<span class="hljs-string">&quot;service&quot;</span>,<span class="hljs-string">&quot;sticky&quot;</span>:<span class="hljs-string">&quot;false&quot;</span>,<span class="hljs-string">&quot;group&quot;</span>:<span class="hljs-string">&quot;dev-third&quot;</span>&#125;, cause: dataId invalid, dubbo version: <span class="hljs-number">2.7</span><span class="hljs-number">.7</span>, current host: <span class="hljs-number">192.168</span><span class="hljs-number">.101</span><span class="hljs-number">.100</span><br>org.apache.dubbo.rpc.RpcException: Failed to put org.apache.dubbo.metadata.report.identifier.MetadataIdentifier@2c1e3659 to nacos &#123;<span class="hljs-string">&quot;init&quot;</span>:<span class="hljs-string">&quot;false&quot;</span>,<span class="hljs-string">&quot;side&quot;</span>:<span class="hljs-string">&quot;consumer&quot;</span>,<span class="hljs-string">&quot;release&quot;</span>:<span class="hljs-string">&quot;2.7.7&quot;</span>,<span class="hljs-string">&quot;logger&quot;</span>:<span class="hljs-string">&quot;slf4j&quot;</span>,<span class="hljs-string">&quot;dubbo&quot;</span>:<span class="hljs-string">&quot;2.0.2&quot;</span>,<span class="hljs-string">&quot;interface&quot;</span>:<span class="hljs-string">&quot;com.bcyunqian.yq.third.api.Bank4Identify&quot;</span>,<span class="hljs-string">&quot;version&quot;</span>:<span class="hljs-string">&quot;*&quot;</span>,<span class="hljs-string">&quot;qos.enable&quot;</span>:<span class="hljs-string">&quot;false&quot;</span>,<span class="hljs-string">&quot;generic&quot;</span>:<span class="hljs-string">&quot;true&quot;</span>,<span class="hljs-string">&quot;timeout&quot;</span>:<span class="hljs-string">&quot;5000&quot;</span>,<span class="hljs-string">&quot;metadata-type&quot;</span>:<span class="hljs-string">&quot;remote&quot;</span>,<span class="hljs-string">&quot;application&quot;</span>:<span class="hljs-string">&quot;service&quot;</span>,<span class="hljs-string">&quot;sticky&quot;</span>:<span class="hljs-string">&quot;false&quot;</span>,<span class="hljs-string">&quot;group&quot;</span>:<span class="hljs-string">&quot;dev-third&quot;</span>&#125;, cause: dataId invalid<br>at org.apache.dubbo.metadata.store.nacos.NacosMetadataReport.storeMetadata(NacosMetadataReport.java:<span class="hljs-number">210</span>)<br>at org.apache.dubbo.metadata.store.nacos.NacosMetadataReport.doStoreConsumerMetadata(NacosMetadataReport.java:<span class="hljs-number">165</span>)<br>at org.apache.dubbo.metadata.report.support.AbstractMetadataReport.storeConsumerMetadataTask(AbstractMetadataReport.java:<span class="hljs-number">286</span>)<br>at org.apache.dubbo.metadata.report.support.AbstractMetadataReport.lambda$storeConsumerMetadata$<span class="hljs-number">1</span>(AbstractMetadataReport.java:<span class="hljs-number">272</span>)<br>at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class="hljs-number">1128</span>)<br>at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<span class="hljs-number">628</span>)<br>at java.base/java.lang.Thread.run(Thread.java:<span class="hljs-number">834</span>)<br>Caused by: com.alibaba.nacos.api.exception.NacosException: dataId invalid<br>at com.alibaba.nacos.client.config.utils.ParamUtils.checkKeyParam(ParamUtils.java:<span class="hljs-number">90</span>)<br>at com.alibaba.nacos.client.config.utils.ParamUtils.checkParam(ParamUtils.java:<span class="hljs-number">147</span>)<br>at com.alibaba.nacos.client.config.NacosConfigService.publishConfigInner(NacosConfigService.java:<span class="hljs-number">222</span>)<br>at com.alibaba.nacos.client.config.NacosConfigService.publishConfig(NacosConfigService.java:<span class="hljs-number">121</span>)<br>at com.alibaba.nacos.client.config.NacosConfigService.publishConfig(NacosConfigService.java:<span class="hljs-number">116</span>)<br>at org.apache.dubbo.metadata.store.nacos.NacosMetadataReport.storeMetadata(NacosMetadataReport.java:<span class="hljs-number">204</span>)<br>... <span class="hljs-number">6</span> common frames omitted<br></code></pre></td></tr></table></figure><p>可以看出 <strong>nacos</strong> 不支持该特性</p><h3 id="多次订阅"><a href="#多次订阅" class="headerlink" title="多次订阅"></a>多次订阅</h3><p>在启用了<strong>@EnableDubbo</strong>以及<strong>dubbo.consumer.generic=true</strong>的情况下</p><p>当同一个接口在不同的地方使用 <strong>@DubboReference</strong> ，会提示重复引入</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>dubbo</tag>
      
      <tag>分布式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用户中心规划和实现</title>
    <link href="/2021/03/17/31Q4EWQ.html"/>
    <url>/2021/03/17/31Q4EWQ.html</url>
    
    <content type="html"><![CDATA[<p>应公司发展需要，现在需要实现单点登录，以保证多个系统之间的用户一致。</p><p>故，本文旨在开发一个用户中心，以提供登录、注册、用户信息存储功能。</p><span id="more"></span><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>系统需求基本如下</p><ul><li>用户注册</li><li>用户登录</li><li>用户信息获取</li><li>用户登出</li><li>系统间的切换不再需要登录</li></ul><h3 id="细节分析"><a href="#细节分析" class="headerlink" title="细节分析"></a>细节分析</h3><h4 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h4><p>登录总体采用<strong>oauth2</strong>协议完成</p><h4 id="用户信息"><a href="#用户信息" class="headerlink" title="用户信息"></a>用户信息</h4><p>用户信息分成两块</p><ul><li>基本用户信息</li><li>业务系统自有信息</li></ul><p>第二点由业务系统自行维护，不作处理。</p><p>对于基本信息，应该由用户中心存储，业务系统需要使用时向用户中心申请，这样以便各个业务系统之间的信息一致</p><p>如果需要修改，也应该交由用户中心或者通知用户中心</p><h4 id="登出"><a href="#登出" class="headerlink" title="登出"></a>登出</h4><p>登出需要保证一处登出，所有系统一并登出。</p><p>在此，设计思路是当用户在某一个业务系统，或者直接在用户中心登出时，用户中心登出用户并且通过http发送消息给所有登录了的业务系统，业务系统再把用户从自己系统中登出。</p><p>注：该方案仅适用于业务系统在自己控制之下的情况</p><h4 id="系统切换"><a href="#系统切换" class="headerlink" title="系统切换"></a>系统切换</h4><p>当用户在访问应用A的过程中，需要去访问应用B，此时中间应该会经过用户中心。用户中心某种手段，例如cookie，识别到当前登录的用户，直接跳转到应用B。</p><p>一般情况下将用户中心将数据存入session，浏览器端使用cookie保存就可以了。</p><p>但是cookie和session是有时限的，如果用户在应用A停留时间超过了这个时限，那么在经过用户中心的时候就会判断成未登录。</p><p>所以问题就成了用户中心需要记住用户。</p><p>结合上面的业务系统每次访问都需要请求用户中心，可以得知用户正处于活动中，这一流程是服务器间的交互，不经过浏览器。</p><hr><p>用户中心这边</p><p>首先，用户登录之后，生成一个随机字串和用户id绑定，即写入redis。</p><p>然后将这个字串写入cookie，并保证cookie存活期为会话</p><p>业务系统的每次访问，根据用户id去获取这个随机字串，不断延长其expire</p><p>用户第二次进入用户中心，</p><p>后台通过cookie里的随机字串，在redis中寻找是否存在一个用户id，如果存在，则直接认证通过</p><hr><p>绑定关系为双向绑定，代表redis中需要存两个key</p><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><h4 id="登录授权"><a href="#登录授权" class="headerlink" title="登录授权"></a>登录授权</h4><p><img src="https://i.loli.net/2021/03/17/IlHZN4aLyOPzMRU.png" alt="授权"></p><h4 id="登出-1"><a href="#登出-1" class="headerlink" title="登出"></a>登出</h4><p><img src="https://i.loli.net/2021/03/17/IutEon6YsrGBTlV.png" alt="登出"></p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p><strong>oauth2</strong>协议并不复杂，此处略去不表，仅对网上少有资料的细节进行原理阐述。</p><h4 id="授权码"><a href="#授权码" class="headerlink" title="授权码"></a>授权码</h4><p>授权码的生成需要将使用范围限定为指定业务系统和指定用户，不能混用或共用，且有效期不宜过长。</p><p>本次我不打算在用户中心保存授权码，而是采用类似<strong>JWT</strong>的实现方案。</p><blockquote><p>将信息以<strong>json</strong>形式存储，加上加密和签名，组成一个字符串交给业务系统</p></blockquote><hr><p>首先确定json格式，暂定需要以下内容</p><ul><li>业务系统id</li><li>用户id</li><li>授权时间</li></ul><p>以上字段保密性要求不高，不过还是可以加上加密。</p><p>确定生成流程如下</p><ul><li>构建json数据</li><li>进行对称加密</li><li>将密文和业务系统的<strong>client_secret</strong>连接后进行签名</li><li>将密文和签名按照规则(自定义)拼装后再<strong>base64</strong>编码</li></ul><p>最后得到的数据就是授权码，其中密文和签名的拼接规则自定义即可，只要保证后续解析时能够完整地把数据给拆分开就行。</p><h4 id="token"><a href="#token" class="headerlink" title="token"></a>token</h4><p>token由于上述的登出功能限制，必须由用户中心进行保存。</p><p>除此之外，token就没有什么特别的处理了，随便生成一个UUID，和user绑定起来就行了。</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>logstash使用注意事项</title>
    <link href="/2020/11/17/2VWHDY.html"/>
    <url>/2020/11/17/2VWHDY.html</url>
    
    <content type="html"><![CDATA[<p>项目中使用elk作为日志采集方案，因此研究了一下 logstash 的使用</p><span id="more"></span><h2 id="目录位置"><a href="#目录位置" class="headerlink" title="目录位置"></a>目录位置</h2><p>在 filter 中可以使用 <strong>patterns_dir</strong>， 如下所示</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ruby">grok&#123;<br>        patterns_dir =&gt; [<span class="hljs-string">&quot;./pattern&quot;</span>]<br>        match =&gt;&#123;<span class="hljs-string">&quot;message&quot;</span>=&gt;<span class="hljs-string">&quot;%&#123;LOG&#125;&quot;</span>&#125;<br>        overwrite =&gt;[ <span class="hljs-string">&quot;message&quot;</span> ]<br>    &#125;<br></code></pre></td></tr></table></figure><p><strong>pattern</strong> 存放位置取决于启动logstash时所在目录</p><p>例如，我是在logstash根目录启动的，启动命令为 <code>./bin/logstash -f config/logstash.conf</code>；</p><p>所以这个文件也应该放在根目录中。</p><hr><p>如果使用了<strong>./bin/system-install</strong>，将logstash注册成了系统服务，使用<strong>systemctl start logstash</strong> 启动的，其工作目录位于系统根目录 <strong>/</strong>, 所以对应的文件位置也需要调整</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>编辑 <strong>/etc/systemd/system/logstash.service</strong> ，把其中的 <strong>WorkingDirectory</strong> 修改成logstash所在目录</p><p>修改前请务必确认服务处于<strong>停止</strong>状态</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>elk</tag>
      
      <tag>logstash</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot对于配置项的读取和设置</title>
    <link href="/2020/10/16/SR3GH3.html"/>
    <url>/2020/10/16/SR3GH3.html</url>
    
    <content type="html"><![CDATA[<p>项目中需要对配置文件中的配置项进行加密，因此研究一下SpringBoot的配置项处理</p><span id="more"></span><h2 id="前人栽树"><a href="#前人栽树" class="headerlink" title="前人栽树"></a>前人栽树</h2><p>搜索了一下，常用的配置项加密方案是<strong><a href="https://github.com/ulisesbocchio/jasypt-spring-boot">jasypt</a></strong>；</p><p>这是一个已经完善的方案，基本上直接引入就可以用了。但是项目中要求的加解密算法比较特殊，不能用这个项目，因此需要研究一下。</p><h2 id="配置项读取"><a href="#配置项读取" class="headerlink" title="配置项读取"></a>配置项读取</h2><p>SpringBoot中配置项读取是使用<code>ConfigFileApplicationListener</code>实现了，最终会将配置项封装到<code>PropertySource</code>的实现类里。</p><h2 id="配置项使用"><a href="#配置项使用" class="headerlink" title="配置项使用"></a>配置项使用</h2><p>读取到配置项后，需要把值给到各个bean。其中主要负责是通过<code>PropertySouurcesPropertyResolver</code>实现的，其中这个类负责提供配置项，同时还需要处理占位符等。</p><hr><p>现在找到了读取和设置，但是还是不清楚其中的数据是如何流动的。</p><p>通过对<code>PropertySourcesPropertyResolver</code>的构造方法进行debug，发现其在<code>AbstractEnviorment</code>、<code>LoggingSystemProperties</code>、<code>PropertSourcesPlaceholderConfiurer</code>被创建了实例。</p><p>环境类中创建的<strong>Resolver</strong> ，没有给存储了配置项的<code>PropertySource</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.springframework.core.env;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractEnvironment</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ConfigurableEnvironment</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ConfigurablePropertyResolver</span> <span class="hljs-variable">propertyResolver</span> <span class="hljs-operator">=</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">PropertySourcesPropertyResolver</span>(<span class="hljs-built_in">this</span>.propertySources);  <br>&#125;<br></code></pre></td></tr></table></figure><p>所以没有多大意义。</p><p>另外两个类给传入的参数都是基本一致的，从类名推测，重点研究对象应该是<code>PropertSourcesPlaceholderConfiurer</code></p><h3 id="PropertySourcesPlaceholderConfiurer"><a href="#PropertySourcesPlaceholderConfiurer" class="headerlink" title="`PropertySourcesPlaceholderConfiurer"></a>`PropertySourcesPlaceholderConfiurer</h3><p>重点方法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Processing occurs by replacing $&#123;...&#125; placeholders in bean definitions by resolving each</span><br><span class="hljs-comment"> * against this configurer&#x27;s set of &#123;<span class="hljs-doctag">@link</span> PropertySources&#125;, which includes:</span><br><span class="hljs-comment"> * &lt;ul&gt;</span><br><span class="hljs-comment"> * &lt;li&gt;all &#123;<span class="hljs-doctag">@linkplain</span> org.springframework.core.env.ConfigurableEnvironment#getPropertySources</span><br><span class="hljs-comment"> * environment property sources&#125;, if an &#123;<span class="hljs-doctag">@code</span> Environment&#125; &#123;<span class="hljs-doctag">@linkplain</span> #setEnvironment is present&#125;</span><br><span class="hljs-comment"> * &lt;li&gt;&#123;<span class="hljs-doctag">@linkplain</span> #mergeProperties merged local properties&#125;, if &#123;<span class="hljs-doctag">@linkplain</span> #setLocation any&#125;</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@linkplain</span> #setLocations have&#125; &#123;<span class="hljs-doctag">@linkplain</span> #setProperties been&#125;</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@linkplain</span> #setPropertiesArray specified&#125;</span><br><span class="hljs-comment"> * &lt;li&gt;any property sources set by calling &#123;<span class="hljs-doctag">@link</span> #setPropertySources&#125;</span><br><span class="hljs-comment"> * &lt;/ul&gt;</span><br><span class="hljs-comment"> * &lt;p&gt;If &#123;<span class="hljs-doctag">@link</span> #setPropertySources&#125; is called, &lt;strong&gt;environment and local properties will be</span><br><span class="hljs-comment"> * ignored&lt;/strong&gt;. This method is designed to give the user fine-grained control over property</span><br><span class="hljs-comment"> * sources, and once set, the configurer makes no assumptions about adding additional sources.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postProcessBeanFactory</span><span class="hljs-params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.propertySources == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-built_in">this</span>.propertySources = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MutablePropertySources</span>();<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.environment != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-built_in">this</span>.propertySources.addLast(<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">PropertySource</span>&lt;Environment&gt;(ENVIRONMENT_PROPERTIES_PROPERTY_SOURCE_NAME, <span class="hljs-built_in">this</span>.environment) &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getProperty</span><span class="hljs-params">(String key)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.source.getProperty(key);<br>&#125;<br>&#125;<br>);<br>&#125;<br><span class="hljs-keyword">try</span> &#123;<br>PropertySource&lt;?&gt; localPropertySource =<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">PropertiesPropertySource</span>(LOCAL_PROPERTIES_PROPERTY_SOURCE_NAME, mergeProperties());<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.localOverride) &#123;<br><span class="hljs-built_in">this</span>.propertySources.addFirst(localPropertySource);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">this</span>.propertySources.addLast(localPropertySource);<br>&#125;<br>&#125;<br><span class="hljs-keyword">catch</span> (IOException ex) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanInitializationException</span>(<span class="hljs-string">&quot;Could not load properties&quot;</span>, ex);<br>&#125;<br>&#125;<br><br>processProperties(beanFactory, <span class="hljs-keyword">new</span> <span class="hljs-title class_">PropertySourcesPropertyResolver</span>(<span class="hljs-built_in">this</span>.propertySources));<br><span class="hljs-built_in">this</span>.appliedPropertySources = <span class="hljs-built_in">this</span>.propertySources;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Visit each bean definition in the given bean factory and attempt to replace $&#123;...&#125; property</span><br><span class="hljs-comment"> * placeholders with values from the given properties.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processProperties</span><span class="hljs-params">(ConfigurableListableBeanFactory beanFactoryToProcess,</span><br><span class="hljs-params"><span class="hljs-keyword">final</span> ConfigurablePropertyResolver propertyResolver)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br><br>propertyResolver.setPlaceholderPrefix(<span class="hljs-built_in">this</span>.placeholderPrefix);<br>propertyResolver.setPlaceholderSuffix(<span class="hljs-built_in">this</span>.placeholderSuffix);<br>propertyResolver.setValueSeparator(<span class="hljs-built_in">this</span>.valueSeparator);<br><br><span class="hljs-type">StringValueResolver</span> <span class="hljs-variable">valueResolver</span> <span class="hljs-operator">=</span> strVal -&gt; &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">resolved</span> <span class="hljs-operator">=</span> (<span class="hljs-built_in">this</span>.ignoreUnresolvablePlaceholders ?<br>propertyResolver.resolvePlaceholders(strVal) :<br>propertyResolver.resolveRequiredPlaceholders(strVal));<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.trimValues) &#123;<br>resolved = resolved.trim();<br>&#125;<br><span class="hljs-keyword">return</span> (resolved.equals(<span class="hljs-built_in">this</span>.nullValue) ? <span class="hljs-literal">null</span> : resolved);<br>&#125;;<br><span class="hljs-comment">// 将对象实例注入到Spring容器中</span><br>doProcessProperties(beanFactoryToProcess, valueResolver);<br>&#125;<br><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doProcessProperties</span><span class="hljs-params">(ConfigurableListableBeanFactory beanFactoryToProcess,</span><br><span class="hljs-params">StringValueResolver valueResolver)</span> &#123;<br><br><span class="hljs-type">BeanDefinitionVisitor</span> <span class="hljs-variable">visitor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanDefinitionVisitor</span>(valueResolver);<br><br>String[] beanNames = beanFactoryToProcess.getBeanDefinitionNames();<br><span class="hljs-keyword">for</span> (String curName : beanNames) &#123;<br><span class="hljs-comment">// Check that we&#x27;re not parsing our own bean definition,</span><br><span class="hljs-comment">// to avoid failing on unresolvable placeholders in properties file locations.</span><br><span class="hljs-keyword">if</span> (!(curName.equals(<span class="hljs-built_in">this</span>.beanName) &amp;&amp; beanFactoryToProcess.equals(<span class="hljs-built_in">this</span>.beanFactory))) &#123;<br><span class="hljs-type">BeanDefinition</span> <span class="hljs-variable">bd</span> <span class="hljs-operator">=</span> beanFactoryToProcess.getBeanDefinition(curName);<br><span class="hljs-keyword">try</span> &#123;<br>visitor.visitBeanDefinition(bd);<br>&#125;<br><span class="hljs-keyword">catch</span> (Exception ex) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanDefinitionStoreException</span>(bd.getResourceDescription(), curName, ex.getMessage(), ex);<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// New in Spring 2.5: resolve placeholders in alias target names and aliases as well.</span><br>beanFactoryToProcess.resolveAliases(valueResolver);<br><br><span class="hljs-comment">// New in Spring 3.0: resolve placeholders in embedded values such as annotation attributes.</span><br>beanFactoryToProcess.addEmbeddedValueResolver(valueResolver);<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>PropertySourcesPlaceholderConfigurer</code>中，有两个重要属性：<code>MutablePropertySources propertySources</code>、<code>Environment environment</code></p><p>其中<code>environment</code>就存储了配置项，而<code>propertySources</code>在方法刚执行时是null。在方法中还涉及到配置来源优先级覆盖的问题</p><hr><p>从代码中可以看出来，实际上注入容器的是<code>StringValueResolver</code>的匿名子类，原本的类反倒没有直接注入。</p><h2 id="实现一"><a href="#实现一" class="headerlink" title="实现一"></a>实现一</h2><p>很容易可以看出，我们可以从第二个方法，也就是<code>protected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess,            final ConfigurablePropertyResolver propertyResolver) throws BeansException</code>下手。</p><p>编写相关代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><span class="hljs-keyword">import</span> org.springframework.beans.BeansException;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.config.ConfigurableListableBeanFactory;<br><span class="hljs-keyword">import</span> org.springframework.context.support.PropertySourcesPlaceholderConfigurer;<br><span class="hljs-keyword">import</span> org.springframework.core.env.ConfigurablePropertyResolver;<br><span class="hljs-keyword">import</span> org.springframework.util.StringValueResolver;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EncryptPropertySourcesPlaceholderConfigurer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">PropertySourcesPlaceholderConfigurer</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(getClass());<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processProperties</span><span class="hljs-params">(ConfigurableListableBeanFactory beanFactoryToProcess, ConfigurablePropertyResolver propertyResolver)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br><br>        logger.debug(<span class="hljs-string">&quot;生成自定义注释&quot;</span>);<br><br><br>        propertyResolver.setPlaceholderPrefix(<span class="hljs-built_in">this</span>.placeholderPrefix);<br>        propertyResolver.setPlaceholderSuffix(<span class="hljs-built_in">this</span>.placeholderSuffix);<br>        propertyResolver.setValueSeparator(<span class="hljs-built_in">this</span>.valueSeparator);<br><br>        <span class="hljs-type">StringValueResolver</span> <span class="hljs-variable">valueResolver</span> <span class="hljs-operator">=</span> strVal -&gt; &#123;<br><br>            <span class="hljs-type">String</span> <span class="hljs-variable">resolved</span> <span class="hljs-operator">=</span> (<span class="hljs-built_in">this</span>.ignoreUnresolvablePlaceholders ?<br>                    propertyResolver.resolvePlaceholders(strVal) :<br>                    propertyResolver.resolveRequiredPlaceholders(strVal));<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.trimValues) &#123;<br>                resolved = resolved.trim();<br>            &#125;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> (resolved.equals(<span class="hljs-built_in">this</span>.nullValue) ? <span class="hljs-literal">null</span> : resolved);<br>            logger.debug(<span class="hljs-string">&quot;key=&#123;&#125;,v=&#123;&#125;&quot;</span>, strVal,resolved);<br><br>            <span class="hljs-keyword">if</span> (s != <span class="hljs-literal">null</span> &amp;&amp; s.startsWith(<span class="hljs-string">&quot;enc&quot;</span>)) &#123;<br>               <span class="hljs-comment">//修改</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;jsdofasudfawpjtwuit8&quot;</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> s;<br>        &#125;;<br><br>        doProcessProperties(beanFactoryToProcess, valueResolver);<br><br><br><span class="hljs-comment">//        super.processProperties(beanFactoryToProcess, propertyResolver);</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean(&quot;propertySourcesPlaceholderConfigurer&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> PropertySourcesPlaceholderConfigurer <span class="hljs-title function_">propertySourcesPlaceholderConfigurer</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EncryptPropertySourcesPlaceholderConfigurer</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>Spring通过<code>StringValueResolver</code>来实现配置项的注入。</p><p>要特别注意，这个类实际负责的范围很广。除了注入配置项，还有uri，beanName之类的也在处理</p><p>可以从输出日志中看出来</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs text">[EncryptPropertySourcesPlaceholderConfigurer:lambda$processProperties$0:34] [DEBUG] - key=singleton,v=singleton<br>[EncryptPropertySourcesPlaceholderConfigurer:lambda$processProperties$0:34] [DEBUG] - key=org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration$TomcatWebServerFactoryCustomizerConfiguration,v=org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration$TomcatWebServerFactoryCustomizerConfiguration<br>[EncryptPropertySourcesPlaceholderConfigurer:lambda$processProperties$0:34] [DEBUG] - key=tomcatWebServerFactoryCustomizer,v=tomcatWebServerFactoryCustomizer<br>[EncryptPropertySourcesPlaceholderConfigurer:lambda$processProperties$0:34] [DEBUG] - key=org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration,v=org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration<br>[EncryptPropertySourcesPlaceholderConfigurer:lambda$processProperties$0:34] [DEBUG] - key=multipartResolver,v=multipartResolver<br>[EncryptPropertySourcesPlaceholderConfigurer:lambda$processProperties$0:34] [DEBUG] - key=,v=<br>[EncryptPropertySourcesPlaceholderConfigurer:lambda$processProperties$0:34] [DEBUG] - key=org.springframework.boot.autoconfigure.web.servlet.MultipartProperties,v=org.springframework.boot.autoconfigure.web.servlet.MultipartProperties<br>[EncryptPropertySourcesPlaceholderConfigurer:lambda$processProperties$0:34] [DEBUG] - key=,v=<br>[EncryptPropertySourcesPlaceholderConfigurer:lambda$processProperties$0:34] [DEBUG] - key=taskExecutor,v=taskExecutor<br>[EncryptPropertySourcesPlaceholderConfigurer:lambda$processProperties$0:34] [DEBUG] - key=applicationTaskExecutor,v=applicationTaskExecutor<br>[EncryptPropertySourcesPlaceholderConfigurer:lambda$processProperties$0:34] [DEBUG] - key=$&#123;seal.header.vid&#125;,v=HNCA<br>[EncryptPropertySourcesPlaceholderConfigurer:lambda$processProperties$0:34] [DEBUG] - key=$&#123;hn.unit.unify&#125;,v=false<br>[EncryptPropertySourcesPlaceholderConfigurer:lambda$processProperties$0:34] [DEBUG] - key=#&#123; @environment[&#x27;shiro.loginUrl&#x27;] ?: &#x27;/login.jsp&#x27; &#125;,v=#&#123; @environment[&#x27;shiro.loginUrl&#x27;] ?: &#x27;/login.jsp&#x27; &#125;<br>[EncryptPropertySourcesPlaceholderConfigurer:lambda$processProperties$0:34] [DEBUG] - key=#&#123; @environment[&#x27;shiro.successUrl&#x27;] ?: &#x27;/&#x27; &#125;,v=#&#123; @environment[&#x27;shiro.successUrl&#x27;] ?: &#x27;/&#x27; &#125;<br>[EncryptPropertySourcesPlaceholderConfigurer:lambda$processProperties$0:34] [DEBUG] - key=#&#123; @environment[&#x27;shiro.unauthorizedUrl&#x27;] ?: null &#125;,v=#&#123; @environment[&#x27;shiro.unauthorizedUrl&#x27;] ?: null &#125;<br>[EncryptPropertySourcesPlaceholderConfigurer:lambda$processProperties$0:34] [DEBUG] - key=$&#123;sms.max.send-time&#125;,v=5<br>[EncryptPropertySourcesPlaceholderConfigurer:lambda$processProperties$0:34] [DEBUG] - key=$&#123;seal.root-data-path&#125;,v=/Users/apple\seal\temp<br>[EncryptPropertySourcesPlaceholderConfigurer:lambda$processProperties$0:34] [DEBUG] - key=/bind/certificate,v=/bind/certificate<br>[EncryptPropertySourcesPlaceholderConfigurer:lambda$processProperties$0:34] [DEBUG] - key=/search/list,v=/search/list<br>[EncryptPropertySourcesPlaceholderConfigurer:lambda$processProperties$0:34] [DEBUG] - key=/swagger-resources,v=/swagger-resources<br>[EncryptPropertySourcesPlaceholderConfigurer:lambda$processProperties$0:34] [DEBUG] - key=$&#123;server.error.path:$&#123;error.path:/error&#125;&#125;,v=/error<br>[EncryptPropertySourcesPlaceholderConfigurer:lambda$processProperties$0:34] [DEBUG] - key=$&#123;server.error.path:$&#123;error.path:/error&#125;&#125;,v=/error<br>[EncryptPropertySourcesPlaceholderConfigurer:lambda$processProperties$0:34] [DEBUG] - key=/v2/api-docs,v=/v2/api-docs<br></code></pre></td></tr></table></figure><hr><p>当然，这个方案也有一定的缺点。</p><p>首先，由于解密是在获取配置项之后，因此，如果明文中使用了占位符，就无法获取对应的数据。</p><p>其次，由于Spring的机制问题，这种方案更适用于 <code>@Value</code>注入参数的配置项，对于像 jdbc 这类配置就完全不可行。</p><hr><p><strong>2021-07-23 补充</strong></p><p>我在尝试实现一个需求 替换配置文件中的某个配置项时，发现一个更为简洁的方案。</p><p>步骤如下</p><ul><li><p>创建一个<code>EnvironmentPostProcessor</code>实现类，基本代码如下</p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PortEnvironmentPostProcessor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EnvironmentPostProcessor</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postProcessEnvironment</span><span class="hljs-params">(ConfigurableEnvironment environment, S&gt; pringApplication application)</span> &#123;<br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">availableTcpPort</span> <span class="hljs-operator">=</span> SocketUtils.findAvailableTcpPort(<span class="hljs-number">6001</span>, <span class="hljs-number">12999</span>);<br><br>        properties.put(<span class="hljs-string">&quot;management.server.port&quot;</span>,availableTcpPort);<br>        properties.put(<span class="hljs-string">&quot;eureka.instance.metadata-map.management.port&quot;</span>,availableTcpPort);<br>        <span class="hljs-type">PropertiesPropertySource</span> <span class="hljs-variable">source</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PropertiesPropertySource</span>(<span class="hljs-string">&quot;CONSUME&quot;</span>, properties);<br>        environment.getPropertySources().addFirst(source);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></blockquote></li><li><p>创建<strong>META-INF/spring.factories</strong>文件，内容如下</p><blockquote><p>org.springframework.boot.env.EnvironmentPostProcessor=cn.inkroom.study.cloud.gateway.PortEnvironmentPostProcessor</p></blockquote></li></ul><p>需要特别注明几点：</p><ul><li>是否覆盖原本配置文件中的某个配置项是有调用<strong>addFirst</strong>还是<strong>addLast</strong>方法决定的，越在前面的优先级越高</li><li>默认情况下，自定义的<code>PortEnvironmentPostProcessor</code>总是在第一个被调用，因此无法获取其他配置项，意思是不能用于加解密，但是可以用于提供一些来自别的途径，较为动态的配置项</li></ul>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>配置项读取</tag>
      
      <tag>源码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jpackage打包javafx</title>
    <link href="/2020/09/30/6ZJYGK.html"/>
    <url>/2020/09/30/6ZJYGK.html</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="基本打包命令"><a href="#基本打包命令" class="headerlink" title="基本打包命令"></a>基本打包命令</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">jpackage -t app-<span class="hljs-selector-tag">image</span> -<span class="hljs-selector-tag">i</span> /Users/apple/resource/project/java/seal_client/applet/target/applet-<span class="hljs-number">1.0</span>.<span class="hljs-number">21</span>/ <span class="hljs-attr">--java-options</span> <span class="hljs-attr">--add-modules</span>=javafx<span class="hljs-selector-class">.controls</span>,javafx<span class="hljs-selector-class">.swing</span>,javafx<span class="hljs-selector-class">.fxml</span>,javafx<span class="hljs-selector-class">.web</span> <span class="hljs-attr">--java-options</span> -Dloader.path=lib/ -n applet <span class="hljs-attr">--main-class</span> com<span class="hljs-selector-class">.hongding</span><span class="hljs-selector-class">.seal</span><span class="hljs-selector-class">.pc</span><span class="hljs-selector-class">.applet</span><span class="hljs-selector-class">.AppletApplication</span> <span class="hljs-attr">--main-jar</span> applet.jar<br></code></pre></td></tr></table></figure><p>要求 javafx sdk 放到 对应的 mods 目录下</p><h3 id="配置项处理"><a href="#配置项处理" class="headerlink" title="配置项处理"></a>配置项处理</h3><h4 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h4><p>mac下相对路径失效，最好使用 user.home</p><p>因此实现一个 配置项加载器处理配置项</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>jlink精简jre</title>
    <link href="/2020/09/24/1SHCBJP.html"/>
    <url>/2020/09/24/1SHCBJP.html</url>
    
    <content type="html"><![CDATA[<p>jdk9以后提供了模块化方案，利用此方案可以实现jre的精简。但是我在实现过程中遇到了很多问题</p><span id="more"></span><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li>oracleJdk11</li><li>maven3.6.1</li><li>Idea2020.1.1</li></ul><h3 id="情况概述"><a href="#情况概述" class="headerlink" title="情况概述"></a>情况概述</h3><p>我创建了三个模块<strong>model</strong>、<strong>service</strong>、<strong>entry</strong>，相互之间依赖关系如下</p><p><img src="https://i.loli.net/2020/09/24/MAejKSubiQgndqc.png" alt="165608FC-ACAA-438A-8184-645423DE2621.png"></p><p>其中<strong>slf4j.api</strong>是<strong>service</strong>模块中引入的第三方依赖</p><hr><p>将三个模块打包后，找到生成的jar文件，将三个jar放在同一个文件夹中。</p><p>然后执行命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sehll">./jlink -p /Users/apple/resource/project/java/jdk11/target/:/Library/Java/JavaVirtualMachines/jdk-11.0.7.jdk/Contents/Home/jmods --add-modules jdk11.entry --output /Users/apple/resource/project/java/jdk11/target --launcher entry=jdk11.entry/cn.inkroom.entry.Enry<br></code></pre></td></tr></table></figure><p>其中：</p><ul><li><strong>/Users/apple/resource/project/java/jdk11/target/</strong> 代表放置了三个jar的文件夹目录</li><li><strong>/Library/Java/JavaVirtualMachines/jdk-11.0.7.jdk/Contents/Home/jmods</strong> jdk的模块目录</li><li><strong>–add-modules jdk11.entry</strong> 启动模块，这个模块内有main方法</li><li><strong>–launcher entry=jdk11.entry/cn.inkroom.entry.Enry</strong> 启动方法，等号前内容随便写</li></ul><hr><p>第一次执行结果如下：</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">错误: <span class="hljs-keyword">Module</span> slf4j.api not found, required <span class="hljs-built_in">by</span> jdk11.service<br></code></pre></td></tr></table></figure><p>推测是因为引入了第三方依赖，但是找不到。因此找到项目中的第三方依赖的jar，放到和之前的三个jar相同的目录中。</p><hr><p>再次执行命令如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">错误: 自动模块不能用于来自 file:<span class="hljs-regexp">//</span><span class="hljs-regexp">/Users/</span>apple<span class="hljs-regexp">/resource/</span>project<span class="hljs-regexp">/java/</span>jdk11<span class="hljs-regexp">/target/</span>logback-core-<span class="hljs-number">1.2</span>.<span class="hljs-number">3</span>.jar 的 jlink: logback.core<br></code></pre></td></tr></table></figure><p>这里错误就比较麻烦了。意思是jlink只支持命名模块，不支持自动模块。真的不理解java社区的思路，不支持自动模块，那生态里的一大堆jar都等着别人升级到jdk11？这个jlink搞得还有多大意义</p><hr><p>经过我百般搜索，最终找到一篇<a href="https://blog.csdn.net/hlm2016/article/details/102065694">博客</a></p><p>总体思路是通过插件给自动模块补充<strong>module-info.java</strong>，但是这会有非常多的问题。</p><p>以我这里用的<strong>slf4j</strong>举例，<strong>slf4j</strong>因为其实现原理的原因，其jar实际上是不太完整的，缺少了一些实现类，因此在生成module-info时，需要补上具体实现了<strong>slf4j</strong>的依赖。</p><p>然后在打包的过程中，插件就会下载这些相关依赖，非常耗时。</p><p>当然，耗时其实影响不大。真正影响大的是需要给所有的自动模块补充module-info，换句话说，本来应该给类库维护者的工作给加到自己身上，如果项目中用到的依赖较多，这个工作量非常大；而且由于不同类库的实现不同，还可能出现类似<strong>slf4j</strong>这种必须了解其实现细节才能补充的情况。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>就目前的情况来看，jlink实在是一个鸡肋。</p><p>首先就普通web项目来说，精简jre并没有什么意义，不差那点空间；而且假设一台机器上要部署多个不同的服务，多个jre只会让维护混乱。</p><p>其次，目前大多数类库都没有实现模块化，导致jlink无法向下分析，也拆不出合适的模块。</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>后端</tag>
      
      <tag>jre</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mybatis是如何将mapper接口注册到spring</title>
    <link href="/2020/09/21/2FNKG2W.html"/>
    <url>/2020/09/21/2FNKG2W.html</url>
    
    <content type="html"><![CDATA[<p>今天看了篇博客，就是这个标题，但是说得不够清楚。我在研究源码后补上部分细节</p><span id="more"></span><p>在阅读本篇博客前，需要阅读 <a href="https://my.oschina.net/10000000000/blog/4614571">这篇博客</a></p><hr><h3 id="MapperScannerRegistrar"><a href="#MapperScannerRegistrar" class="headerlink" title="MapperScannerRegistrar"></a>MapperScannerRegistrar</h3><p>mybatis通过该类注入一个 <code>BeanDefinitionRegistryPostProcessor</code> 的实现类 <code>MapperScannerConfigurer</code></p><h3 id="MapperScannerConfigurer"><a href="#MapperScannerConfigurer" class="headerlink" title="MapperScannerConfigurer"></a>MapperScannerConfigurer</h3><p>这个类主要读取了mybatis的一些配置信息，并且创建一个<code>ClassPathMapperScanner</code>用于对包进行扫描</p><h3 id="ClassPathMapperScanner"><a href="#ClassPathMapperScanner" class="headerlink" title="ClassPathMapperScanner"></a>ClassPathMapperScanner</h3><p>这个类负责路径扫描，但是不负责实例创建和代理</p><h3 id="MapperFactoryBean"><a href="#MapperFactoryBean" class="headerlink" title="MapperFactoryBean"></a>MapperFactoryBean</h3><p>这里负责实例的创建，但是最终该任务会被交给<code>MapperRegistry</code>，<code>MapperRegistry</code>会通过<code>MapperProxyFactory</code>创建一个代理。</p><h3 id="MapperProxyFactory"><a href="#MapperProxyFactory" class="headerlink" title="MapperProxyFactory"></a>MapperProxyFactory</h3><p>通过<code>MapperProxy</code>实现代理，所以逻辑都在<code>MapperProxy</code>里</p><h3 id="MapperMethod"><a href="#MapperMethod" class="headerlink" title="MapperMethod"></a>MapperMethod</h3><p>在<code>MapperProxy</code>里会创建<code>MapperMethod</code>，这个类才是执行相关方法的核心类</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>后端</tag>
      
      <tag>mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>恼人的bom头</title>
    <link href="/2020/09/16/BK9VX0.html"/>
    <url>/2020/09/16/BK9VX0.html</url>
    
    <content type="html"><![CDATA[<p><strong>65279</strong> ，记事本中常见的bom头。</p><p>万万没想到，居然出现在了数据里。</p><span id="more"></span><p>前两天程序突然出现了一个字符串判等错误。原本以为是客户填错了，后来翻数据一看，这怎么俩字符串一模一样？</p><hr><p>本来就是一个<strong>equals</strong>返回false的问题。看数据是相同的字符串，然后去翻日志，日志里也是相同的。</p><p>尝试了很多办法都没看出有什么不同。</p><p>于是后来一气之下一个字符一个字符的判断过去，结果就发现了问题所在。</p><p>两个字符串居然<strong>长度不一样</strong>，有一个字符串开头多出一个不可见字符，将字符转成int后发现，这第一个字符就是<strong>65279</strong>。</p><p>这东西就是<strong>bom头</strong>，我经常看到的地方就是各种文本编辑器保存文件的时候可能会加上这个头。</p><hr><p>所以其实这个问题解决方案就很简单，把数据改一下就行了。</p><p>但是这个头是怎么出来的呢？出问题的字符串来源是一个不应该被修改过的数据，而这个数据在以前是可行的，这就很奇怪。</p><p>当时得出结论已经快下班了，于是就保留事故现场，第二天再来找源头。</p><p>结果第二天上班之后发现，这个问题又消失了，客户已经正常使用了。</p><hr><p>事故现场消失，无法排查原因，只能做些推测。</p><p>数据是存储在redis中的，怀疑是序列化中出现问题，序列化方案是<strong>FastJson</strong>提供的序列化工具类<code>GenericFastJsonRedisSerializer</code></p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>单元测试方式执行次数的断言</title>
    <link href="/2020/07/06/MTZ194.html"/>
    <url>/2020/07/06/MTZ194.html</url>
    
    <content type="html"><![CDATA[<p>关于<code>org.mockito.Mockito.verify()</code>方法断言调用次数的一些细节</p><span id="more"></span><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Verifies certain behavior happened at least once / exact number of times / never. E.g:</span><br><span class="hljs-comment">     * &lt;pre class=&quot;code&quot;&gt;&lt;code class=&quot;java&quot;&gt;</span><br><span class="hljs-comment">     *   verify(mock, times(5)).someMethod(&quot;was called five times&quot;);</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     *   verify(mock, atLeast(2)).someMethod(&quot;was called at least two times&quot;);</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     *   //you can use flexible argument matchers, e.g:</span><br><span class="hljs-comment">     *   verify(mock, atLeastOnce()).someMethod(&lt;b&gt;anyString()&lt;/b&gt;);</span><br><span class="hljs-comment">     * &lt;/code&gt;&lt;/pre&gt;</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * &lt;b&gt;times(1) is the default&lt;/b&gt; and can be omitted</span><br><span class="hljs-comment">     * &lt;p&gt;</span><br><span class="hljs-comment">     * Arguments passed are compared using &lt;code&gt;equals()&lt;/code&gt; method.</span><br><span class="hljs-comment">     * Read about &#123;<span class="hljs-doctag">@link</span> ArgumentCaptor&#125; or &#123;<span class="hljs-doctag">@link</span> ArgumentMatcher&#125; to find out other ways of matching / asserting arguments passed.</span><br><span class="hljs-comment">     * &lt;p&gt;</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> mock to be verified</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> mode times(x), atLeastOnce() or never()</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> mock object itself</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@CheckReturnValue</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-title function_">verify</span><span class="hljs-params">(T mock, VerificationMode mode)</span> &#123;<br>        <span class="hljs-keyword">return</span> MOCKITO_CORE.verify(mock, mode);<br>    &#125;<br></code></pre></td></tr></table></figure><p>方法注释中只写了第二个参数的使用方式，但是没有指出第二个参数的生命周期。</p><hr><p>因此我有以下问题：</p><ul><li>多次执行被mock方法后，只调用一次<code>verify</code>，其次数如何断言？</li><li>同一个被mock bean，通过改变被mock方法的参数调用，<code>verify</code>如何分别断言不同参数的调用？</li><li>相同的mock调用(不改变参数)，和<code>verify</code>交叉调用，次数应该如何断言，即次数是否会累计计算？</li></ul><h3 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h3><h4 id="问题1："><a href="#问题1：" class="headerlink" title="问题1："></a>问题1：</h4><p><strong>多次执行被mock方法后，只调用一次<code>verify</code>，其次数如何断言？</strong></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ConsumeHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> mock(ConsumeHandler.class);<br><br>handler.consume(<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">10</span>);<br>handler.consume(<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">10</span>);<br>handler.consume(<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">10</span>);<br>handler.consume(<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">10</span>);<br><br><br>verify(handler,times(<span class="hljs-number">4</span>)).consume(isNull(),isNull(),isNull(),eq(<span class="hljs-number">10</span>));<br>verify(handler,times(<span class="hljs-number">4</span>)).consume(isNull(),isNull(),isNull(),eq(<span class="hljs-number">10</span>));<br></code></pre></td></tr></table></figure><p><strong>总结：</strong></p><p>单纯的调用<code>verify</code>，其次数确实和调用次数相关；要特别注意的是，多次<code>verify</code>次数是累计计算，并不会出现因为上次<code>verify</code>了而重新开始计算</p><h4 id="问题2："><a href="#问题2：" class="headerlink" title="问题2："></a>问题2：</h4><p><strong>同一个被mock bean，通过改变被mock方法的参数调用，<code>verify</code>如何分别断言不同参数的调用？</strong></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ConsumeHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> mock(ConsumeHandler.class);<br><br><br>handler.consume(<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">10</span>);<br>handler.consume(<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">1</span>);<br>handler.consume(<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">1</span>);<br>handler.consume(<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">14</span>);<br><br><br>verify(handler,times(<span class="hljs-number">1</span>)).consume(isNull(),isNull(),isNull(),eq(<span class="hljs-number">10</span>));<br>verify(handler,times(<span class="hljs-number">2</span>)).consume(isNull(),isNull(),isNull(),eq(<span class="hljs-number">1</span>));<br>verify(handler,times(<span class="hljs-number">4</span>)).consume(isNull(),isNull(),isNull(),anyInt());<br></code></pre></td></tr></table></figure><p><strong>总结：</strong></p><p>次数和参数相关，只有满足了参数匹配的调用才会被计算次数</p><h4 id="问题3："><a href="#问题3：" class="headerlink" title="问题3："></a>问题3：</h4><p><strong>相同的mock调用(不改变参数)，和<code>verify</code>交叉调用，次数应该如何断言，即次数是否会累计计算？</strong></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ConsumeHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> mock(ConsumeHandler.class);<br><br><br>handler.consume(<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">10</span>);<br><br>verify(handler,times(<span class="hljs-number">1</span>)).consume(isNull(),isNull(),isNull(),eq(<span class="hljs-number">10</span>));<br><br>handler.consume(<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">10</span>);<br><br>verify(handler,times(<span class="hljs-number">2</span>)).consume(isNull(),isNull(),isNull(),eq(<span class="hljs-number">10</span>));<br><br>handler.consume(<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">10</span>);<br>handler.consume(<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">10</span>);<br><br>verify(handler,times(<span class="hljs-number">4</span>)).consume(isNull(),isNull(),isNull(),eq(<span class="hljs-number">10</span>));<br></code></pre></td></tr></table></figure><p><strong>总结：</strong></p><p>可以看出，次数只和调用<code>verify</code>之前，执行了多少次符合参数匹配的方式有关，与<code>verify</code>调用次数无关</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>后端</tag>
      
      <tag>单元测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用装饰模式实现多种扣费方式</title>
    <link href="/2020/07/01/23AVPCZ.html"/>
    <url>/2020/07/01/23AVPCZ.html</url>
    
    <content type="html"><![CDATA[<p>利用装饰模式实现多种扣费方式，利于扩展。</p><span id="more"></span><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>项目中有个扣费功能。原本是直接从用户本身扣费，最近新增的需求要求从别的地方扣费。那么就要对原本的扣费流程进行修改，最基本的方式就是直接 if else，但是本次使用装饰模式来实现该功能。</p><p>优点在于后期可以扩展更多扣费方式，而且可以简单地调整扣费方式的优先级，同时有利于简化调用方的代码。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>装饰模式首先要求有一个接口，这个接口给调用方使用。调用方只需要持有接口的一个实例对象即可。</p><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>那么接口定义如下（隐去部分业务相关代码）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 负责签署时扣除次数，使用装饰模式</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ConsumeHandler</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 扣除次数</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> user</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> count     需要扣除的次数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回扣除后剩余的次数；</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">consume</span><span class="hljs-params">(User user, <span class="hljs-type">int</span> count)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>返回值</strong></p><p>项目中扣除的是次数，若有需要扣除其他都是同理。</p><p>每一个处理器返回的值代表从当前途径扣除的次数；这样做的好处在于，可以允许同时使用多种方式支付，只要所有资金来源加起来能够超过需要扣除的次数，那么一定能扣除成功，不至于强求一次支付成功。</p><p><strong>参数</strong></p><p><code>count</code>代表需要<strong>当前</strong>处理器扣除的次数。注意是<strong>当前</strong>，不是总计次数。</p><p><strong>举例</strong></p><p>假设有处理器A和处理器B，目前要扣除12次，扣除顺序为A-&gt;B。</p><p>基于装饰模式，应该由B来调用A</p><p>那么B接收次数为<strong>12</strong>次，调用A，告诉A需要扣除<strong>12次</strong></p><p>A执行逻辑，扣除<strong>5</strong>次，返回<strong>7</strong></p><p>B拿到<strong>7</strong>，判断剩余次数不为<strong>0</strong>，需要自身扣除<strong>7</strong>次。</p><p>B扣除完成，返回给调用方<strong>0</strong></p><p>调用方接收到扣除结果<strong>0</strong>，扣费成功。</p><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>装饰模式有一些通用逻辑，例如都需要接收一个上级参数。本次中还有一个判断当前是否应该继续扣费的逻辑，因此额外写一个抽象类实现这些逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractConsumeHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ConsumeHandler</span> &#123;<br><br><br>    <span class="hljs-keyword">protected</span> ConsumeHandler parent;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AbstractConsumeHandler</span><span class="hljs-params">(ConsumeHandler parent)</span> &#123;<br>        <span class="hljs-built_in">this</span>.parent = parent;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">consume</span><span class="hljs-params">(User user, <span class="hljs-type">int</span> count)</span> &#123;<br>     <span class="hljs-comment">//扣费完成</span><br>        <span class="hljs-keyword">if</span> (count == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> count;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> count;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.parent != <span class="hljs-literal">null</span>) &#123;<br>            c = <span class="hljs-built_in">this</span>.parent.consume(contract, signatory, user, count);<br>            <span class="hljs-keyword">if</span> (c == <span class="hljs-number">0</span>) &#123;<span class="hljs-comment">//扣费完毕</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">myCount</span> <span class="hljs-operator">=</span> c;<br><br><span class="hljs-comment">//        继续扣费</span><br>        c = consumeCount(contract, signatory, user, myCount);<br><br>        <span class="hljs-keyword">return</span> myCount - c;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 子类需要重写的方法，用于实际扣除次数；子类不需要考虑次数是否扣除完毕的问题</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> user</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> count     当前处理器需要扣除的次数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回当前处理器扣除的次数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-type">int</span> <span class="hljs-title function_">consumeCount</span><span class="hljs-params">( User user, <span class="hljs-type">int</span> count)</span>;<br><br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>实际处理器，只需要继承抽象类，并且直接实现扣费逻辑即可。</p><h2 id="注入"><a href="#注入" class="headerlink" title="注入"></a>注入</h2><p>项目基于<strong>SpringBoot</strong>开发，需要一种友好的方式注入实例。</p><p>本来想直接通过<code>@Component</code>之类的注解注入处理器实例，但是这样一来不好注入上级实例，不利于调整优先级；二来调用方不方便选择注入实例。</p><p>所以还是只能通过配置类手动注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 注入次数消费处理器</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ConsumeHandler <span class="hljs-title function_">consumeHandler</span><span class="hljs-params">(AgentService agentService, UserService userService)</span> &#123;<br><br><span class="hljs-comment">//        优先级高的放前面</span><br>        <span class="hljs-type">AgentCountConsumeHandler</span> <span class="hljs-variable">agentCountConsumeHandler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AgentCountConsumeHandler</span>(<span class="hljs-literal">null</span>);<br><br>        agentCountConsumeHandler.setService(agentService);<br><br>        <span class="hljs-type">UserCountConsumeHandler</span> <span class="hljs-variable">userCountConsumeHandler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserCountConsumeHandler</span>(agentCountConsumeHandler);<br>        userCountConsumeHandler.setUserService(userService);<br><br>        <span class="hljs-keyword">return</span> userCountConsumeHandler;<br>    &#125;<br></code></pre></td></tr></table></figure><p>这种注入方式较为死板，处理器本身依赖的外部组件只能手动set，且失去了一层代理，可能部分切面功能无法使用。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>如果采用多种途径共同扣费逻辑，需要特别处理事务回滚相关。因为每一个处理器都不能知道最终结果是否会扣费成功，因此自身都会进行数据持久化操作。只有调用方知道是否扣费成功，此时方能进行回滚操作</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>后端</tag>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数组越界下标翻转</title>
    <link href="/2020/05/28/3NZ0KXT.html"/>
    <url>/2020/05/28/3NZ0KXT.html</url>
    
    <content type="html"><![CDATA[<p>简单的数学知识</p><span id="more"></span><h3 id="向上翻转"><a href="#向上翻转" class="headerlink" title="向上翻转"></a>向上翻转</h3><p>新下标 = (当前下标 + 数组长度 - 1) % 数组长度</p><hr><p>例如：</p><p>当前下标0，数组长度5。则：</p><p>( 0 + 5 - 1 ) % 5 = 4</p><h3 id="向下翻转"><a href="#向下翻转" class="headerlink" title="向下翻转"></a>向下翻转</h3><p>新下标 = (当前下标 + 1) % 数组长度</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>日志采集</title>
    <link href="/2020/05/18/126CEWS.html"/>
    <url>/2020/05/18/126CEWS.html</url>
    
    <content type="html"><![CDATA[<p>随着互联网的发展，网络基础设置的改善，人们对于网络应用提出了更高的要求，于是各大互联网公司纷纷采用分布式架构以支持越来越高的并发量。由分布式架构引出来的日志问题也越来越突出。在单机环境下可以正常使用的日志解决方案在分布式环境下表现的有心无力。因此本系统的目的在于提供一个更加友好的日志采集和存储方案。<br>本文分几部分阐述了基于Java开发，涉及消息中间件，socket短连接等技术的日志采集系统的结构和设计实现过程，实现了日志发送、日志存储、日志备份、日志实时浏览等功能。支持横向扩展，可以轻松实现分布式部署。同时充分考虑了宕机情况的出现，尽可能地保证系统核心功能的正常运行。<br>根据本文设计思路，最终开发出一个健壮、稳定的日志采集系统。</p><span id="more"></span><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>软件客户端发送日志消息到消息中间件，采集模块从消息中间件中拿取数据，存入时序数据库，并且定时备份日志文件到本地文件系统，同时利用WebSocket等技术实现日志的实时浏览。</p><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><h4 id="日志发送"><a href="#日志发送" class="headerlink" title="日志发送"></a>日志发送</h4><p>软件客户端通过本系统提供的工具发送日志消息到指定的消息中间件，且在一定程度上保证有序。</p><h4 id="日志收集"><a href="#日志收集" class="headerlink" title="日志收集"></a>日志收集</h4><p>本系统通过监听消息中间件，即使拿取日志消息，并且按照一定的规则进行持久化存储。</p><h4 id="服务监控"><a href="#服务监控" class="headerlink" title="服务监控"></a>服务监控</h4><p>本系统提供Web模块以监控采集模块以及相关服务运行状况。</p><h4 id="日志备份"><a href="#日志备份" class="headerlink" title="日志备份"></a>日志备份</h4><p>本系统可以定期将日志持久化到文件，存储在本地文件系统。同时提供相应的下载接口</p><h4 id="实时日志浏览"><a href="#实时日志浏览" class="headerlink" title="实时日志浏览"></a>实时日志浏览</h4><p>本系统提供接口以实时查看消息中间件接收到的日志消息，同时支持简单的规则过滤，并保证在一定程度下日志消息有序，以便开发人员调试。</p><h4 id="宕机记录"><a href="#宕机记录" class="headerlink" title="宕机记录"></a>宕机记录</h4><p>可通过本系统查看相应日志生产者宕机情况</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>涉及到的环境</p><ul><li>jdk1.8+</li><li>ActiveMq</li><li>Influxdb</li></ul><h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><p><img src="https://user-images.githubusercontent.com/27911304/82168048-3e1ecb80-98f0-11ea-8f64-e8592e97f03f.png" alt="系统架构"></p><p><img src="https://user-images.githubusercontent.com/27911304/82168151-a53c8000-98f0-11ea-98d6-7307b519efd5.png" alt="流程图"></p><h4 id="client"><a href="#client" class="headerlink" title="client"></a>client</h4><p>供日志产生端使用的工具模块。思路为自定义日志组件消息通道，目前支持log4j框架；以及直接读入程序日志文件。该模块需要对现有Java项目进行一定程序的修改。</p><h4 id="MQ"><a href="#MQ" class="headerlink" title="MQ"></a>MQ</h4><p>消息中间件依赖。用于中转日志以及服务状态监控等数据通信领域。</p><h4 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h4><p>日志采集模块。负责监听消息中间件，将日志消息持久化到TSDB，同时负责按照一定的周期备份日志文件到本地文件系统或其他存储系统。</p><p>该模块支持横向扩展，只需要多台机器保持消息中间件等相关配置一致即可。</p><h4 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h4><p>图形化界面模块。B/S架构。该模块以Web界面方式提供监控Server模块状态、日志文件下载、系统报警和实时日志浏览等功能。</p><p>该模块非必需模块，缺失或宕机不影响日志采集存储功能。</p><h4 id="TSDB"><a href="#TSDB" class="headerlink" title="TSDB"></a>TSDB</h4><p>时序数据库。用于临时存储日志消息，以解决使用消息中间件通讯中由于网络抖动等原因导致的顺序错位。</p><h3 id="通信方案"><a href="#通信方案" class="headerlink" title="通信方案"></a>通信方案</h3><p>本系统使用了四种通信方式</p><ul><li>JMS——主要用于Client-MQ-Server。</li><li>HTTP协议——Web模块对用户提供服务。</li><li>Socket——Web和Server直接通信，主要用于文件传输。</li><li>WebSocket——用于Web模块浏览实时日志</li></ul><p><img src="https://user-images.githubusercontent.com/27911304/82168320-1b40e700-98f1-11ea-9cc6-952fe013ae38.png" alt="client-MQ-Server"></p><p><img src="https://user-images.githubusercontent.com/27911304/82168325-209e3180-98f1-11ea-906d-1a36e6e15e95.png" alt="Web-User"></p><p><img src="https://user-images.githubusercontent.com/27911304/82168332-23992200-98f1-11ea-8afd-105f03851967.png" alt="Client-Web"></p><h2 id="可行性分析"><a href="#可行性分析" class="headerlink" title="可行性分析"></a>可行性分析</h2><p>解释部分设计原理和难点解决方案</p><h3 id="日志发送方式"><a href="#日志发送方式" class="headerlink" title="日志发送方式"></a>日志发送方式</h3><p>引入消息中间件作为通信桥梁，使用队列模式</p><p><strong>优点</strong></p><ul><li>日志生产者和消费者解耦</li><li>日志消费者可以横向扩展</li></ul><p><strong>缺点</strong></p><ul><li>日志消费者无法保证日志有序</li></ul><h3 id="Java程序如何接入"><a href="#Java程序如何接入" class="headerlink" title="Java程序如何接入"></a>Java程序如何接入</h3><ul><li>如果是基于slf4j的程序，只需要引入一个appender，修改日志配置即可</li><li>或者基于文件监控，需要在服务器上额外部署一个服务(不推荐)</li></ul><h3 id="如何保证日志有序"><a href="#如何保证日志有序" class="headerlink" title="如何保证日志有序"></a>如何保证日志有序</h3><p>引入时序数据库，日志消费者将从中间件获取的日志存储到时序数据库，由时序数据库负责排序和临时存储。消费者再每隔一段时间从数据库获取数据，依次保证在这段时间间隔内的日志尽可能有序。</p><h3 id="如何实现日志实时浏览"><a href="#如何实现日志实时浏览" class="headerlink" title="如何实现日志实时浏览"></a>如何实现日志实时浏览</h3><ul><li>日志消费者在从<strong>queue</strong>中获取数据后，再以<strong>topic</strong>形式发送出去</li><li>Web模块订阅<strong>topic</strong>，一旦接收到日志消息，则以<strong>WebSocket</strong>方式进行广播</li><li>前端通过<strong>WebSocket</strong>和后端进行全双工通信</li></ul><h3 id="如何降低耦合"><a href="#如何降低耦合" class="headerlink" title="如何降低耦合"></a>如何降低耦合</h3><p><strong>耦合来源</strong></p><ul><li>消息中间件</li><li>时序数据库</li></ul><p><strong>解决方案</strong></p><p>使用设计模式实现相关实现的可替换。可参考slf4j不同日志输出组件的原理</p><h2 id="健壮性分析"><a href="#健壮性分析" class="headerlink" title="健壮性分析"></a>健壮性分析</h2><ul><li>消息中间件</li></ul><p>消息中间件宕机将会影响Client发送日志，此时Client需要将日志缓存到本地，等待消息中间件恢复之后将日志消息重新发送。</p><ul><li>Client</li></ul><p>Client宕机即代表终端服务宕机，此时不会产生日志，且终端服务宕机应该有另外的报警方案，不在本系统设计考虑范围内。</p><ul><li>Server</li></ul><p>Server支持横向扩展，单一机器宕机只会影响日志采集效率，不会导致系统全线崩溃。</p><ul><li>Web</li></ul><p>该模块为非必需模块，宕机不会影响日志采集功能，因此不在考虑范围内；建议使用额外的方案以监听该模块状态，例如定时发送HTTP请求即可判断模块运行状态。</p><ul><li>TSDB</li></ul><p>时序数据库宕机将会导致Server无法持久化，此时Server将会把采集到的日志返还到消息中间件，不采用缓存方案，防止此时Server宕机导致缓存的日志丢失。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h3><p><img src="https://user-images.githubusercontent.com/27911304/82169128-10875180-98f3-11ea-8ffd-bd0d51e46702.png" alt="Web模块"></p><p><img src="https://user-images.githubusercontent.com/27911304/82169134-154c0580-98f3-11ea-9b97-7683a33f216d.png" alt="Server模块"></p><p><img src="https://user-images.githubusercontent.com/27911304/82169137-167d3280-98f3-11ea-8c6a-58779faeb1ea.png" alt="时序数据库"></p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>本系统已托管在<strong>github</strong>，项目地址为：<a href="https://github.com/inkroom/log-colleage/">https://github.com/inkroom/log-colleage/</a></p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>后端</tag>
      
      <tag>log</tag>
      
      <tag>日志采集</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dream</title>
    <link href="/dream.html"/>
    <url>/dream.html</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="0d5bdd9467c8b63970daa2f176b111d537a0e44f6f6a821c9a33b1784dfbda15">1a3bc4d09898515f6b4aa1af22494c2b99772e49768598ce482de4acff3842f3bb05f2517aa91ebfba955668493401b8788ef8720e7f40a42a6078e328a0eed32358b491b90e200f4a70536f3eb5646fee36cabcecc84ee406a202e7196e9852b5f7f0cea187f82d589545cd1a1bf024270f3ccee8fb96c98679c8f4cb8fd543b09d068c7903de53e9074bbea0425a75cdb10435fb73a2b641798987b61a7f88d06a286996d583ad6e7c604fea9a1bf71743fd253723a0a0fffacda9455750dd06dec7958c862958a9e1d0d8bddd6e20894d2cba99635f33c8f220d06baf6555aab24b7e0cd99578a5289504e23d1d0aa3ad49e1b6b84c2b2089708d1c046d89405bc36384169fb99f4e91674c6072617280baa5239f80782833bc48148a164b17de7e8cbc8a6925f8082fb1fb5dd21dab4dd9f670a5912b1b88fb7d91c6bc68d4d9b7eca55df7d61cfb1a6c70713c22060b5d82a386cad6ebf9357353c824b0775be87ecbb7cd6aedfb85eb427129aa49fc41d28cfe099d9dd6b189258cd9eae3f7c85654d804b5c5e57b84359bfdd0f88bb36b38fbf2ee13764872c89fa8ece6d6e8d909d3c0b8043e6d78bd26bfcdae4555dc091d0fef84e61b4836984f15b1e9433d849971f257faa664b0312d38a04c9140c70c3dfdbe6d0f0fe6e22e8a90e6df8a7598f1c4d2fd0923a4d96074fd35baee52eb22ddcd8e6e7fdd5432b397dc1586c953eb37300095d6675c42ce6359688c3893672a93205dee8767b55f227ce6a37bc9821af83c890a7ce3d1cba7847d2d74ac09715e6f2e5ecd2b553d9eba6ff387f0729570496a29abddd4537efc8020d3156f574973d9f300775c87977bd1e351b09bb98282cbe443e7f3664a39ea0f0eda0ad91f3867020789123904b82d4c66dcf570677fe6819c9947c2eed9ac790d7f5188861db4cedcd836d526f03bd2ea5b2e00fac80087c61c291c7c913705e095a9fd599537c0916ddd70264385236a3bd1d6774152fcb3f4516b7d71f18d5a2d36355ed5baa1747c6f15bc54a464207f0bbc71ab30a6b1ba8bc40f3d94c6b18702aebb604923fffcd286068e95979868f4e8e5b245e36c60a34d3d7a3bb91211775a56cdeddd0df918de11a6b39161ced060363e4dac1e43deab224cd09b0e8d228470f4d07c6ce3cd398af14a6821a51910f0d4792094e678e46f4c9deb132d2c2ab0c35ff9c01b31b37166a3365727f426cd93804710c1e5ca37e1da27d1c9df379eebc92c98fe765735437884ee0d2f463ba0476a54bc2e9b2addfaf40d00a268e92a992cce56cbef785e7c0e6fcf18697dfc28b1ef71c122201048acea0229f1dbdcf692644cc906afe52762d6cd6126deefc51900e5476bb27751f9fb24fdb757074dc176ff7ad96ee9f42166aab3743922c0c4872f2538ecf28258570cabec87918290ab7e2265780fe7663401e4fda60af3ef27cd62daa938be5ff6f6b2eb8deb2e02063b2d568afa3e129c1469154c03a7ef04d1290caa8cdf04698449df087405c03bd885c70f6ae36b6a627116aa99358e88fcddbf997f79d9ff90260c519058c84f4afff9fc25c5aaeed04f31b24b7d667576fd82f5fe3c951389562f088971b96f7d429ec7da364740eb3375d5f2c9245f3afcd50feb8a1f76744f7dabd23fb87e756517dd05cfe5e3147b1a60de0ead02621e29643a53c9623bfb7df340c50b8bed5af9e424d69411daee3b29192c781ae87fe765e0f8827ee5d390262503ac56404e3405335e0bba5058da4f2c98d6d03032dc9d05bb08a61162e188935e7cdfeed4dfef906552fc4ffc45555399d731e1a95be9c36e74a15ce301aa089dfa3a5b9db2be8dc649a299cf09f3752c9ad04ed85edd46db4efe2f363a0aa0228891d1b63f98e9da152160235718288c792643831cef3958832ae743a6c3425ccce922bb14f9d0ec013535579479b262563da9d65d4fabb02cca485145b6257674b9f411ee00921d5cb0988eddf98b9eb8121e120d32aa8298034158360f889edda245685d8acddaffc28a26e1ad7275938f35f757ab723929bacc2e1e58a60aaac9afe35a588274db92c174af4a2d93d31f50e842cb0fc9d847b180a7f9010101059cfa88ba19a3395ea81ee979088d8b5d2802c29bc5d655a9687824c8a31ed72bc80a98e419f1fae4289da3e056b0b3b8c18e095dfeb22fa603a43024471b84a23bf4d0</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-wave">      <input class="hbe hbe-input-field hbe-input-field-wave" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-wave" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-wave">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-wave" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>private</category>
      
      <category>生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>梦</tag>
      
      <tag>梦中梦</tag>
      
      <tag>private</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于netty的文件传输</title>
    <link href="/2020/05/15/1BZHG4N.html"/>
    <url>/2020/05/15/1BZHG4N.html</url>
    
    <content type="html"><![CDATA[<p>项目中需要迁移一部分文件，原计划通过ftp上传；但是服务器环境中ftp传输总是有问题，因此自己开发一个文件传输服务</p><span id="more"></span><h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><p>本次任务中需要实现一个文件传输程序，不需要额外的功能。</p><hr><p>程序分为 <strong>server</strong> 端和 <strong>client</strong> 端</p><p>server 采用netty实现；client采用原生socket即可</p><hr><p>传输中涉及协议定义；协议主要是为了方便扩展，如果只是一个简单的文件传输，那么只需要用socket即可</p><p>协议定义如下</p><ul><li>开头四个byte 用于存储本次帧长度</li><li>后续字节采用json格式，如下<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;本次协议的操作&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;协议的数据，一般是文件的base64&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure></li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><p>只展示核心的 pipline 实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(SocketChannel socketChannel)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    socketChannel.pipeline().addLast(<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringEncoder</span>(),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">LengthFieldBasedFrameDecoder</span>(Integer.MAX_VALUE, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringDecoder</span>(CharsetUtil.UTF_8),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleChannelInboundHandler</span>&lt;String&gt;() &#123;<br><br>                <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelRead0</span><span class="hljs-params">(ChannelHandlerContext ctx, String msg)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>                    logger.debug(<span class="hljs-string">&quot;收到消息:&#123;&#125;&quot;</span>, msg);<br>                    <span class="hljs-type">JSONObject</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> JSONObject.parseObject(msg);<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>                    <span class="hljs-keyword">if</span> (json.getString(<span class="hljs-string">&quot;type&quot;</span>).equals(<span class="hljs-string">&quot;check&quot;</span>)) &#123;<span class="hljs-comment">//校验文件是否存在</span><br><br>                        <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> json.getString(<span class="hljs-string">&quot;msg&quot;</span>);<br><br>                        body = <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(dir, path).exists() + <span class="hljs-string">&quot;&quot;</span>;<br>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (json.getString(<span class="hljs-string">&quot;type&quot;</span>).equals(<span class="hljs-string">&quot;upload&quot;</span>)) &#123;<span class="hljs-comment">//文件上传</span><br>                        <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> json.getString(<span class="hljs-string">&quot;msg&quot;</span>);<br>                        <span class="hljs-type">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> json.getString(<span class="hljs-string">&quot;data&quot;</span>);<span class="hljs-comment">//文件base64</span><br>                        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(dir, path);<br>                        <span class="hljs-keyword">if</span> (!file.getParentFile().exists()) &#123;<br>                            file.getParentFile().mkdirs();<br>                        &#125;<br>    <span class="hljs-comment">//                                                base64解码</span><br>                        <span class="hljs-type">byte</span>[] bytes = Base64.decodeBase64(data);<br>                        <span class="hljs-keyword">try</span> (<span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(file)) &#123;<br>                            IOUtils.write(bytes, out);<br>                        &#125;<br>                        body = <span class="hljs-string">&quot;ok&quot;</span>;<br>                        logger.debug(<span class="hljs-string">&quot;upload write&quot;</span>);<br>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (json.getString(<span class="hljs-string">&quot;type&quot;</span>).equals(<span class="hljs-string">&quot;download&quot;</span>)) &#123;<br>                        <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> json.getString(<span class="hljs-string">&quot;msg&quot;</span>);<br>                        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(dir, path);<br>                        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>();<br>                        <span class="hljs-keyword">if</span> (file.exists()) &#123;<br>                            j.put(<span class="hljs-string">&quot;r&quot;</span>, <span class="hljs-string">&quot;true&quot;</span>);<br>                            j.put(<span class="hljs-string">&quot;data&quot;</span>, Base64.encodeBase64String(IOUtils.toByteArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file))));<br>                        &#125; <span class="hljs-keyword">else</span> &#123;<br>                            j.put(<span class="hljs-string">&quot;r&quot;</span>, <span class="hljs-string">&quot;false&quot;</span>);<br>                        &#125;<br>                        body = j.toJSONString();<br>                        logger.debug(<span class="hljs-string">&quot;download &#123;&#125;&quot;</span>, j.toString());<br>                    &#125;<br><br>                    <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> body.getBytes().length;<br>    <span class="hljs-comment">//                                            首先写一个长度</span><br>                    <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">4</span>];<br>                    <span class="hljs-comment">//通过移位运算，截取低8位的方式，将int保存到byte数组</span><br>                    bytes[<span class="hljs-number">0</span>] = (<span class="hljs-type">byte</span>) (length &gt;&gt;&gt; <span class="hljs-number">24</span>);<br>                    bytes[<span class="hljs-number">1</span>] = (<span class="hljs-type">byte</span>) (length &gt;&gt;&gt; <span class="hljs-number">16</span>);<br>                    bytes[<span class="hljs-number">2</span>] = (<span class="hljs-type">byte</span>) (length &gt;&gt;&gt; <span class="hljs-number">8</span>);<br>                    bytes[<span class="hljs-number">3</span>] = (<span class="hljs-type">byte</span>) length;<br><br>                    logger.debug(<span class="hljs-string">&quot;写入长度=&#123;&#125;&quot;</span>, length);<br>                    <span class="hljs-type">ByteBuf</span> <span class="hljs-variable">buf</span> <span class="hljs-operator">=</span> Unpooled.buffer(<span class="hljs-number">4</span> + length).writeBytes(bytes).writeBytes(body.getBytes());<br>                    ctx.writeAndFlush(buf);<br>    <span class="hljs-comment">//                                            ctx.writeAndFlush(bytes);</span><br>    <span class="hljs-comment">//                                            ctx.writeAndFlush(Unpooled.copiedBuffer((body).getBytes()));</span><br><br>                &#125;<br>            &#125;<br>    );<br>&#125;<br></code></pre></td></tr></table></figure><hr><p>其中较为重要的是对数据的拆包，用到了 <code>new LengthFieldBasedFrameDecoder(Integer.MAX_VALUE, 0, 4, 0, 4)</code></p><p>依次解释参数</p><ul><li>Integer.MAX_VALUE 数据包的最大长度</li><li>0 字节偏移量，代表帧与帧之间是否有间隔，此次为0即可</li><li>4 代表长度字段的字节数，本次使用<strong>int</strong>存储长度，因此是4个长度</li><li>0 </li><li>4 交给下一个handler的数据跳过的字节数。例如一个帧 携带的数据长度 20 字节，加上长度，一共是 24 字节；此处为4，代表拆包器交给下一个handler的数据会跳过4个字节，从下标4处开始读取长度字段大小的字节数据，也就是20个字节</li></ul><hr><p><code>new StringDecoder(CharsetUtil.UTF_8)</code>  此处是对数据进行解码，后续handler可以直接使用字符串，其参数来自于<code>LengthFieldBasedFrameDecoder</code>读取的数据</p><hr><p>最后一个就是处理器，其获取的数据就是json格式，直接处理即可；</p><p>需要注意的是数据返回。返回给client的数据也要遵循协议，即开头4个字节代表数据大小</p><p>此处采用了对int进行位运算的方案，而不是调用更为方便的 <code>writeInt(int)</code> 方法；</p><p>因为该方法并不会一定写入四个字节，而是写入当前int实际占据的字节数。例如本次数据长度为 2，那么实际只会写入一个字节；因为int占据4个字节，但是 2 只会用到32位低位的两位，netty只会写入一个字节</p><h3 id="client"><a href="#client" class="headerlink" title="client"></a>client</h3><p>client端采取原生的socket实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><br>  <span class="hljs-keyword">private</span> String <span class="hljs-title function_">send</span><span class="hljs-params">(JSONObject json)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> json.toJSONString();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> body.length();<br>        <span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(properties.getHost(), properties.getPort());<br>        socket.getOutputStream().write(int2Bytes(length));<br>        socket.getOutputStream().write(body.getBytes());<br><br><span class="hljs-comment">// 读取长度</span><br><br>        <span class="hljs-type">byte</span>[] le = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">4</span>];<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> socket.getInputStream();<br><br>        length = input.read(le, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>);<br>        logger.debug(<span class="hljs-string">&quot;[netty] - 读取长度的字节长度=&#123;&#125;&quot;</span>, length);<br>        <span class="hljs-keyword">if</span> (length != <span class="hljs-number">4</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AppMsgException</span>(<span class="hljs-string">&quot;错误的包数据&quot;</span>);<br>        &#125;<br>        length = bytes2Int(le);<br><br>        logger.debug(<span class="hljs-string">&quot;[netty] - 包的长度=&#123;&#125;&quot;</span>, length);<br>        <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[length];<br><br>        <span class="hljs-type">byte</span>[] cache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">65535</span>];<span class="hljs-comment">//缓冲区大小</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">readLength</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">do</span> &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> input.read(cache, <span class="hljs-number">0</span>, cache.length);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; t; i++, readLength++) &#123;<br>                bytes[readLength] = cache[i];<br>            &#125;<br>        &#125; <span class="hljs-keyword">while</span> (readLength != length);<br>        socket.close();<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes);<br>    &#125;<br><br></code></pre></td></tr></table></figure><hr><p>基本逻辑是——建立链接-&gt;发送数据-&gt;读取返回</p><p><code>socket.getOutputStream().write(int2Bytes(length));</code> 这一行的原理同上述返回，都是确保一定写入了4个字节</p><p>读取内容也较为简单，也是先读取四个字节，然后再读取指定长度的数据</p><p>注意 原生socket 缓冲区大小有限制，即使指定读取 50 个字节，也可能无法读取到足够的数据，因此需要循环读取，保证能够读取到指定长度的数据</p><hr><p>最后再提一下，socket连接尽量不要使用多线程。我就因为把<code>Socket</code>作为成员变量，然后多线程操作，结果导致数据读取老是出错</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>netty</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java security</title>
    <link href="/2020/05/13/21DB9B8.html"/>
    <url>/2020/05/13/21DB9B8.html</url>
    
    <content type="html"><![CDATA[<p><strong>该博文有问题，请无视</strong></p><span id="more"></span><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>项目上需要使用证书做pdf签章，引入了bc库。在单元测试时，签章正常通过，tomcat运行时，加载证书失败</p><h2 id="出错位置追溯"><a href="#出错位置追溯" class="headerlink" title="出错位置追溯"></a>出错位置追溯</h2><p>问题出现在一下代码第二行中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loadKeyStore</span><span class="hljs-params">(InputStream pfx, String password)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    keyStore = KeyStore.getInstance(<span class="hljs-string">&quot;PKCS12&quot;</span>);<br>    keyStore.load(pfx, password.toCharArray());<br>    <span class="hljs-built_in">this</span>.loadKeyStore(keyStore, password);<br>&#125;<br><br></code></pre></td></tr></table></figure><hr><p>分别的单元测试环境、Tomcat环境中debug后发现，<code>keyStore</code>这个变量中有个成员变量<code>keyStoreSpi</code> 对应的具体实现不同。</p><p>在单元测试中是 <code>sun.security.pkcs12.PKCS12KeyStore</code>，而在tomcat中是一个bc库中的实现。</p><p>那么原因可能找到了，对应的实现不同导致的。</p><hr><p>问题是：为什么这个变量会经常换？</p><h2 id="源码debug"><a href="#源码debug" class="headerlink" title="源码debug"></a>源码debug</h2><p>查看<code>KeyStore#getInstance</code> 方法，其内部依次调用了 <code>Security.getImpl</code>、<code>Providers.getProviderList()</code></p><p>具体如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> GetInstance.Instance <span class="hljs-title function_">getInstance</span><span class="hljs-params">(String var0, Class&lt;?&gt; var1, String var2)</span> <span class="hljs-keyword">throws</span> NoSuchAlgorithmException &#123;<br>       <span class="hljs-type">ProviderList</span> <span class="hljs-variable">var3</span> <span class="hljs-operator">=</span> Providers.getProviderList();<br>       <span class="hljs-type">Service</span> <span class="hljs-variable">var4</span> <span class="hljs-operator">=</span> var3.getService(var0, var2);<br>       <span class="hljs-keyword">if</span> (var4 == <span class="hljs-literal">null</span>) &#123;<br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NoSuchAlgorithmException</span>(var2 + <span class="hljs-string">&quot; &quot;</span> + var0 + <span class="hljs-string">&quot; not available&quot;</span>);<br>       &#125; <span class="hljs-keyword">else</span> &#123;<br>           <span class="hljs-keyword">try</span> &#123;<br>               <span class="hljs-keyword">return</span> getInstance(var4, var1);<br>           &#125; <span class="hljs-keyword">catch</span> (NoSuchAlgorithmException var10) &#123;<br>               <span class="hljs-type">NoSuchAlgorithmException</span> <span class="hljs-variable">var5</span> <span class="hljs-operator">=</span> var10;<br>               <span class="hljs-type">Iterator</span> <span class="hljs-variable">var6</span> <span class="hljs-operator">=</span> var3.getServices(var0, var2).iterator();<br><br>               <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>                   Service var7;<br>                   <span class="hljs-keyword">do</span> &#123;<br>                       <span class="hljs-keyword">if</span> (!var6.hasNext()) &#123;<br>                           <span class="hljs-keyword">throw</span> var5;<br>                       &#125;<br><br>                       var7 = (Service)var6.next();<br>                   &#125; <span class="hljs-keyword">while</span>(var7 == var4);<br><br>                   <span class="hljs-keyword">try</span> &#123;<br>                       <span class="hljs-keyword">return</span> getInstance(var7, var1);<br>                   &#125; <span class="hljs-keyword">catch</span> (NoSuchAlgorithmException var9) &#123;<br>                       var5 = var9;<br>                   &#125;<br>               &#125;<br>           &#125;<br>       &#125;<br>   &#125;<br><br><br></code></pre></td></tr></table></figure><p>注意其中的第二行，<code>var3.getService(var0,var1)</code>，这里是需要获取一个<code>KeyStore</code>实现，其中的var0=KeyStore，var2=PKCS12</p><p>最后返回了一个<code>java.security.Provider$Service</code>，这个会生成一个<code>PKCS12KeyStore</code>，从而正确签章</p><h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><p>查看了<code>KeyStore</code>源码后，发现其<code>getInstance</code>支持如下重载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> KeyStore <span class="hljs-title function_">getInstance</span><span class="hljs-params">(String type, Provider provider)</span><br>        <span class="hljs-keyword">throws</span> KeyStoreException, NoSuchProviderException;<br></code></pre></td></tr></table></figure><p>那么重点就在于其第二个参数，如果能够传入生成<code>PKCS12KeyStore</code>的值，问题不就解决了？</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>现在需要获取一个<code>Provider</code>实现，</p><p>根据debug的结果，其寻找 Provider 在于<code>ProviderList</code>的的userList属性。</p><p>debug之后发现，其在单元测试环境下，userList数据如下</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><br><br>providers <span class="hljs-attribute">size</span>=11<br><span class="hljs-attribute">provider</span>=SUN version 1.8<br><span class="hljs-attribute">provider</span>=SunRsaSign version 1.8<br><span class="hljs-attribute">provider</span>=SunEC version 1.8<br><span class="hljs-attribute">provider</span>=SunJSSE version 1.8<br><span class="hljs-attribute">provider</span>=SunJCE version 1.8<br><span class="hljs-attribute">provider</span>=SunJGSS version 1.8<br><span class="hljs-attribute">provider</span>=SunSASL version 1.8<br><span class="hljs-attribute">provider</span>=XMLDSig version 1.8<br><span class="hljs-attribute">provider</span>=SunPCSC version 1.8<br><span class="hljs-attribute">provider</span>=SunMSCAPI version 1.8<br><span class="hljs-attribute">provider</span>=BC version 1.6<br><br></code></pre></td></tr></table></figure><p>tomcat环境下如下</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs routeros">providers <span class="hljs-attribute">size</span>=11<br><span class="hljs-attribute">provider</span>=SUN version 1.8<br><span class="hljs-attribute">provider</span>=BC version 1.6<br><span class="hljs-attribute">provider</span>=SunRsaSign version 1.8<br><span class="hljs-attribute">provider</span>=SunEC version 1.8<br><span class="hljs-attribute">provider</span>=SunJSSE version 1.8<br><span class="hljs-attribute">provider</span>=SunJCE version 1.8<br><span class="hljs-attribute">provider</span>=SunJGSS version 1.8<br><span class="hljs-attribute">provider</span>=SunSASL version 1.8<br><span class="hljs-attribute">provider</span>=XMLDSig version 1.8<br><span class="hljs-attribute">provider</span>=SunPCSC version 1.8<br><span class="hljs-attribute">provider</span>=SunMSCAPI version 1.8<br><br></code></pre></td></tr></table></figure><p>很明显可以看出 bc 库的顺序不对，这个大概就是根源了。</p><hr><p>单元测试下需要对应的索引为<strong>3</strong>，即为<strong>SunJSSE</strong>，这是<code>Provider</code>的name属性</p><p><strong>解决失败</strong></p><p>虽然确实换了spi 属性，但是tomcat下依然失败</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>后端</tag>
      
      <tag>加密</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot依赖外置</title>
    <link href="/2020/05/13/2Q6VVTX.html"/>
    <url>/2020/05/13/2Q6VVTX.html</url>
    
    <content type="html"><![CDATA[<p>近期有个SpringBoot的项目需要频繁更新，但是每次上传到服务器上几十MB，实在是花时间，所以打算优化打包方案，将第三方依赖外置</p><span id="more"></span><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>近期有个SpringBoot的项目需要频繁更新，但是每次上传到服务器上几十MB，实在是花时间，所以打算优化打包方案，将第三方依赖外置</p><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><ul><li>首先使用SpringBoot打包插件将第三方排除，但是一些版本号同步更新的本地模块依赖需要放到一个jar中</li><li>使用maven dependency插件将第三方依赖复制到构建目录中</li><li>使用maven过滤功能实现一个启动脚本</li><li>使用assembly打包一个完整版，包括boot jar，第三方依赖，启动脚本</li><li>第一次部署使用完整版，后续更新只需要上传boot jar就行了</li></ul><h3 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h3><p>首先在 <strong>resource</strong> 目录中准备一个脚本</p><p>内容如下</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">java -Dloader.<span class="hljs-attribute">path</span>=lib/ -Dfile.<span class="hljs-attribute">encoding</span>=utf-8 -jar @project.build.finalName@.jar<br><br></code></pre></td></tr></table></figure><p>其中 <strong>@project.build.finalName@</strong> 是最后生成的可执行jar的文件名<br>path指定第三方依赖目录</p><hr><p>其次修改pom文件如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 启用maven过滤，主要为脚本做准备 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">finalName</span>&gt;</span>$&#123;project.artifactId&#125;-$&#123;project.version&#125;-$&#123;spring.active&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">finalName</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">mainClass</span>&gt;</span>xxx.Application<span class="hljs-tag">&lt;/<span class="hljs-name">mainClass</span>&gt;</span><br><br>                <span class="hljs-tag">&lt;<span class="hljs-name">layout</span>&gt;</span>ZIP<span class="hljs-tag">&lt;/<span class="hljs-name">layout</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">executable</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">executable</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- 以下为需要打包到jar中的本地模块依赖，主要是版本号需要更新，如果放到第三方依赖中，可能会出现多个版本  --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>xxx.xxx<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>upload-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>xxx.xxx<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pay<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>$&#123;project.parent.groupId&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>swagger-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-dependency-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>copy-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">phase</span>&gt;</span>package<span class="hljs-tag">&lt;/<span class="hljs-name">phase</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>copy-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- 输出的第三方依赖位置 --&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">outputDirectory</span>&gt;</span>$&#123;project.build.directory&#125;/lib<span class="hljs-tag">&lt;/<span class="hljs-name">outputDirectory</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">overWriteReleases</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">overWriteReleases</span>&gt;</span><br>                        <span class="hljs-comment">&lt;!-- 此处排除需要打到boot jar中的本地模块依赖 --&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">excludeGroupIds</span>&gt;</span><br>                            $&#123;project.parent.groupId&#125;,xxx.xxx<br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">excludeGroupIds</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">descriptors</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">descriptor</span>&gt;</span>assembly.xml<span class="hljs-tag">&lt;/<span class="hljs-name">descriptor</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">descriptors</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><span class="hljs-comment">&lt;!-- 配置执行器 --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>make-assembly<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">phase</span>&gt;</span>package<span class="hljs-tag">&lt;/<span class="hljs-name">phase</span>&gt;</span><span class="hljs-comment">&lt;!-- 绑定到package生命周期阶段上 --&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>single<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><span class="hljs-comment">&lt;!-- 只运行一次 --&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br><br>                    <span class="hljs-comment">&lt;!--                        &lt;configuration&gt;--&gt;</span><br>                    <span class="hljs-comment">&lt;!--                            &lt;finalName&gt;$&#123;project.name&#125;&lt;/finalName&gt;--&gt;</span><br><br>                    <span class="hljs-comment">&lt;!--                            &lt;descriptor&gt;src/main/assembly.xml&lt;/descriptor&gt;&amp;lt;!&amp;ndash;配置描述文件路径&amp;ndash;&amp;gt;--&gt;</span><br>                    <span class="hljs-comment">&lt;!--                        &lt;/configuration&gt;--&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><p>在 <strong>pom.xml</strong> 同级目录创建 <strong>assembly.xml</strong></p><p>内容如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">assembly</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>release<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">formats</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">format</span>&gt;</span>zip<span class="hljs-tag">&lt;/<span class="hljs-name">format</span>&gt;</span><span class="hljs-comment">&lt;!--打包的文件格式,也可以有：war zip--&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">formats</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--tar.gz压缩包下是否生成和项目名相同的根目录--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">includeBaseDirectory</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">includeBaseDirectory</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- 如果使用这个，也可以不使用maven-dependency插件 --&gt;</span><br><span class="hljs-comment">&lt;!--    &lt;dependencySets&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;dependencySet&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--            &amp;lt;!&amp;ndash;是否把本项目添加到依赖文件夹下&amp;ndash;&amp;gt;--&gt;</span><br><span class="hljs-comment">&lt;!--            &lt;useProjectArtifact&gt;true&lt;/useProjectArtifact&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--            &lt;outputDirectory&gt;lib&lt;/outputDirectory&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--            &amp;lt;!&amp;ndash;将scope为runtime的依赖包打包&amp;ndash;&amp;gt;--&gt;</span><br><span class="hljs-comment">&lt;!--            &lt;scope&gt;runtime&lt;/scope&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;/dependencySet&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--    &lt;/dependencySets&gt;--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">fileSets</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">fileSet</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>$&#123;project.build.directory&#125;/lib<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">outputDirectory</span>&gt;</span>/lib<span class="hljs-tag">&lt;/<span class="hljs-name">outputDirectory</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">fileSet</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">fileSets</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">files</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>target/$&#123;build.finalName&#125;.jar<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">outputDirectory</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">outputDirectory</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span><br>           <span class="hljs-comment">&lt;!-- 此处将脚本复制两份，分别对应类unix和windows系统，注意，maven过滤之后的文件在target目录下 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>$&#123;project.build.directory&#125;/classes/start.sh<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">outputDirectory</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">outputDirectory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">destName</span>&gt;</span>start.bat<span class="hljs-tag">&lt;/<span class="hljs-name">destName</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>$&#123;project.build.directory&#125;/classes/start.sh<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">outputDirectory</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">outputDirectory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">destName</span>&gt;</span>start.sh<span class="hljs-tag">&lt;/<span class="hljs-name">destName</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">files</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">assembly</span>&gt;</span><br><br><br></code></pre></td></tr></table></figure><h3 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h3><p><img src="https://user-images.githubusercontent.com/27911304/70195072-87fb6700-173f-11ea-8431-e96d6b92690e.png" alt="TIM图片20191205091306"></p><p>可以很明显的看出两个方式打包的大小差异</p><hr><p>完整版的目录结构<br><img src="https://user-images.githubusercontent.com/27911304/70195270-30113000-1740-11ea-8a3d-db9eed190719.png" alt="04ACB025-7C19-4a98-9351-2E6AD9007E23"></p><hr><h4 id="2021-04-30-补充"><a href="#2021-04-30-补充" class="headerlink" title="2021-04-30 补充"></a>2021-04-30 补充</h4><p><strong>maven-dependency-plugin</strong> 的<strong>exclude</strong>对于包的判断有些与众不同</p><p>项目包名为<code>com.bc</code>，然后有个依赖包为 <code>com.bc.uc</code> 结果我发现这个依赖包<strong>不会</strong>被copy。</p><p>因此只能放弃 copy 插件，改为使用 assembly 提供的依赖copy，这样还少了一次copy操作</p><h4 id="2021-07-19-补充"><a href="#2021-07-19-补充" class="headerlink" title="2021-07-19 补充"></a>2021-07-19 补充</h4><p>使用<strong>assembly</strong>或者<strong>maven-dependency-plugin</strong>有个问题，会把scope为<strong>test</strong>的依赖一并copy打包，指定scope=runtime也不好用，于是升级插件版本到3.3.0，就ok了</p><p>但是<strong>maven-dependency-plugin</strong>有<code>&lt;includeScpre&gt;</code>可以排除test环境的包</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>后端</tag>
      
      <tag>SpringBoot</tag>
      
      <tag>maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>idea无法识别SpringBoot @占位符</title>
    <link href="/2020/05/13/VRVDZ9.html"/>
    <url>/2020/05/13/VRVDZ9.html</url>
    
    <content type="html"><![CDATA[<p>idea部分情况下出现不识别占位符</p><span id="more"></span><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>idea下启动SpringBoot项目</p><p>配置文件中使用了@@占位符获取maven中的配置项</p><p>idea启动时报错</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-string">&#x27;@&#x27;</span> that cannot <span class="hljs-built_in">start</span> <span class="hljs-keyword">any</span> <span class="hljs-keyword">token</span>. (Do <span class="hljs-keyword">not</span> use @ <span class="hljs-keyword">for</span> indentation)<br></code></pre></td></tr></table></figure><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>pom.xml中添加如下内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>plugins</code>中添加如下内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-resources-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                   <span class="hljs-tag">&lt;<span class="hljs-name">delimiters</span>&gt;</span><br>                       <span class="hljs-tag">&lt;<span class="hljs-name">delimiter</span>&gt;</span>@<span class="hljs-tag">&lt;/<span class="hljs-name">delimiter</span>&gt;</span><br>                   <span class="hljs-tag">&lt;/<span class="hljs-name">delimiters</span>&gt;</span><br>                   <span class="hljs-tag">&lt;<span class="hljs-name">useDefaultDelimiters</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">useDefaultDelimiters</span>&gt;</span><br>               <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><br></code></pre></td></tr></table></figure><hr><p>如果上述方案不奏效，可以尝试执行<code>mvn spring-boot:run</code> 之后就不会出错了</p><p>或者可以直接修改target/classes/application.yml 文件</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://www.jianshu.com/p/a77b48166327">原来你不是这样的BUG(1):found character ‘@’ that cannot start any token. (Do not use @ for indentation)</a></p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>后端</tag>
      
      <tag>idea</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot实现jsonp跨域</title>
    <link href="/2020/05/13/20T898X.html"/>
    <url>/2020/05/13/20T898X.html</url>
    
    <content type="html"><![CDATA[<p>优雅实现跨域通信，对代码侵入性小</p><span id="more"></span><h2 id="实现jsonp跨域通信"><a href="#实现jsonp跨域通信" class="headerlink" title="实现jsonp跨域通信"></a>实现jsonp跨域通信</h2><blockquote><p>实现基于jsonp的跨域通信方案</p></blockquote><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><blockquote><p>浏览器对非同源ajax请求有限制，不允许发送跨域请求<br>目前跨域解决方案有两种   </p><ul><li>cros配置</li><li>jsonp请求</li></ul><p>cros为新规范，通过一个head请求询问服务器是否允许跨域，若不允许则被拦截<br>jsonp则为利用浏览器不限制js脚本的同源性，通过动态创建script请求，服务器传递回一个js函数调用语法，浏览器端按照js函数正常调用回调函数</p></blockquote><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><p>首先确定服务器端应该如何返回数据</p><p>一次正确的jsonp请求，服务器端应该返回如下格式数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-title function_">jQuery39948237</span>(&#123;<span class="hljs-attr">key</span>:<span class="hljs-number">3</span>&#125;)<br><br></code></pre></td></tr></table></figure><p>其中，<code>jQuery39948237</code>为浏览器端要执行的函数名，该函数由ajax库动态创建，并将函数名作为一个请求参数和该次请求的其余参数一并发送，服务器端无需对此参数做过多处理</p><p><code>&#123;key:3&#125;</code>为此次请求返回的数据，作为函数参数传递</p><hr><p>其次，服务器端如何处理？</p><p>为了兼容jsonp和cros方案，服务器端应该在请求带有函数名参数时返回函数调用，否则正常返回json数据即可</p><hr><p>最后，为了减少代码的侵入，不应该将上述流程放入一个Controller正常逻辑中，应该考虑使用aop实现</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h4><p>前端本次使用jquery库 <del>(本来想用axios库的，但是axios不支持jsonp)</del></p><p>代码如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br>$.<span class="hljs-title function_">ajax</span>(&#123;<br>     <span class="hljs-attr">url</span>:<span class="hljs-string">&#x27;http://localhost:8999/boot/dto&#x27;</span>,<br>     <span class="hljs-attr">dataType</span>:<span class="hljs-string">&quot;jsonp&quot;</span>,<br>     <span class="hljs-attr">success</span>:<span class="hljs-function">(<span class="hljs-params">response</span>)=&gt;</span>&#123;<br>         <span class="hljs-variable language_">this</span>.<span class="hljs-property">messages</span>.<span class="hljs-title function_">push</span>(response);<br>     &#125;<br> &#125;)<br><br></code></pre></td></tr></table></figure><p>Jquery默认jsonp函数名参数name为<strong>callback</strong></p><h4 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h4><p>本次采用aop实现</p><p>具体思路为: 给Controller添加后切点，判断request是否有函数名参数，如果有则修改返回的数据，没有则不做处理</p><p>而aop又有两种方案</p><ul><li>常规aop，自己定义切点</li><li><code>ResponseBodyAdvice</code>，Spring提供的可直接用于数据返回的工具类</li></ul><p>本次使用第二种方案</p><hr><p>首先是Controller的接口实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;dto&quot;)</span><br><span class="hljs-keyword">public</span> Position <span class="hljs-title function_">dto</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Position</span>(<span class="hljs-number">239</span>, <span class="hljs-number">43</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>返回一个复杂类型，Spring会自动对其做json序列化操作</p><hr><p>然后的<code>ResponseBodyAdvice</code>实现</p><p>该类全路径为：<code>org.springframework.web.servlet.mvc.method.annotation.ResponseBodyAdvice</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 处理controller返回值，对于有callback值的使用jsonp格式，其余不处理</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestControllerAdvice(basePackageClasses = IndexController.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JsonpAdvice</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ResponseBodyAdvice</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(getClass());<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ObjectMapper mapper;<br><br>    <span class="hljs-comment">//jquery默认是callback，其余jsonp库可能不一样</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">callBackKey</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;callback&quot;</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">supports</span><span class="hljs-params">(MethodParameter methodParameter, Class aClass)</span> &#123;<br>        logger.debug(<span class="hljs-string">&quot;返回的class=&#123;&#125;&quot;</span>, aClass);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 在此处对返回值进行处理，需要特别注意如果是非String类型，会被Json序列化，从而添加了双引号，解决办法见</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> body               返回值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> methodParameter    方法参数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> mediaType          当前contentType，非String类型为json</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> aClass             convert的class</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> serverHttpRequest  request，暂时支持是ServletServerHttpRequest类型，其余类型将会原样返回</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> serverHttpResponse response</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 如果body是String类型，加上方法头后返回，如果是其他类型，序列化后返回</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@see</span> com.inkbox.boot.demo.converter.Jackson2HttpMessageConverter</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">beforeBodyWrite</span><span class="hljs-params">(Object body, MethodParameter methodParameter, MediaType mediaType, Class aClass, ServerHttpRequest serverHttpRequest, ServerHttpResponse serverHttpResponse)</span> &#123;<br><br>        <span class="hljs-keyword">if</span> (body == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-comment">// 如果返回String类型，media是plain，否则是json，将会经过json序列化，在下方返回纯字符串之后依然会被序列化，就会添上多余的双引号</span><br>        logger.debug(<span class="hljs-string">&quot;body=&#123;&#125;,request=&#123;&#125;,response=&#123;&#125;,media=&#123;&#125;&quot;</span>, body, serverHttpRequest, serverHttpResponse, mediaType.getSubtype());<br><br><br>        <span class="hljs-keyword">if</span> (serverHttpRequest <span class="hljs-keyword">instanceof</span> ServletServerHttpRequest) &#123;<br>            <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> ((ServletServerHttpRequest) serverHttpRequest).getServletRequest();<br><br>            <span class="hljs-type">String</span> <span class="hljs-variable">callback</span> <span class="hljs-operator">=</span> request.getParameter(callBackKey);<br><br>            <span class="hljs-keyword">if</span> (!StringUtils.isEmpty(callback)) &#123;<br>                <span class="hljs-comment">//使用了jsonp</span><br>                <span class="hljs-keyword">if</span> (body <span class="hljs-keyword">instanceof</span> String) &#123;<br>                    <span class="hljs-keyword">return</span> callback + <span class="hljs-string">&quot;(\&quot;&quot;</span> + body + <span class="hljs-string">&quot;\&quot;)&quot;</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-type">String</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> mapper.writeValueAsString(body);<br>                        logger.debug(<span class="hljs-string">&quot;转化后的返回值=&#123;&#125;,&#123;&#125;&quot;</span>, res, callback + <span class="hljs-string">&quot;(&quot;</span> + res + <span class="hljs-string">&quot;)&quot;</span>);<br><br>                        <span class="hljs-keyword">return</span> callback + <span class="hljs-string">&quot;(&quot;</span> + res + <span class="hljs-string">&quot;)&quot;</span>;<br>                    &#125; <span class="hljs-keyword">catch</span> (JsonProcessingException e) &#123;<br>                        logger.warn(<span class="hljs-string">&quot;【jsonp支持】数据body序列化失败&quot;</span>, e);<br>                        <span class="hljs-keyword">return</span> body;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            logger.warn(<span class="hljs-string">&quot;【jsonp支持】不支持的request class  =&#123;&#125;&quot;</span>, serverHttpRequest.getClass());<br>        &#125;<br>        <span class="hljs-keyword">return</span> body;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用<code>@RestControllerAdvice</code>指明切点</p><h3 id="bug"><a href="#bug" class="headerlink" title="bug"></a>bug</h3><p>经过此步骤，理论上即可实现jsonp调用了。</p><p>然而实际测试发现，由于Spring json序列化策略的问题，如果返回jsonp字符串，json序列化之后，将会添上一对引号，如下</p><p>应该返回</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Jquery332</span>(&#123;<span class="hljs-string">&quot;x&quot;</span>:<span class="hljs-number">239</span>,<span class="hljs-string">&quot;y&quot;</span>:<span class="hljs-number">43</span>&#125;)<br></code></pre></td></tr></table></figure><p>实际返回</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&quot;Jquery332(&#123;\&quot;x\&quot;:239,\&quot;y\&quot;:43&#125;)&quot;</span><br><br></code></pre></td></tr></table></figure><p>导致浏览器端无法正常运行函数</p><hr><p>经多方查找资料后得知</p><p>由于在<code>ResponseBodyAdvice</code>中修改了实际的返回值类型为<code>String</code>，而字符串类型经过<code>Jackson</code>序列化后就会加上引号</p><p>解决办法为：修改默认的json序列化<code>MessageConverter</code>处理逻辑，对于实际是<code>String</code>的不做处理</p><p>代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Jackson2HttpMessageConverter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MappingJackson2HttpMessageConverter</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(getClass());<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeInternal</span><span class="hljs-params">(Object object, Type type, HttpOutputMessage outputMessage)</span> <span class="hljs-keyword">throws</span> IOException, HttpMessageNotWritableException &#123;<br>        <span class="hljs-keyword">if</span> (object <span class="hljs-keyword">instanceof</span> String) &#123;<br>            <span class="hljs-comment">//绕开实际上返回的String类型，不序列化</span><br>            <span class="hljs-type">Charset</span> <span class="hljs-variable">charset</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getDefaultCharset();<br>            StreamUtils.copy((String) object, charset, outputMessage.getBody());<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">super</span>.writeInternal(object, type, outputMessage);<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MvcConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(getClass());<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> MappingJackson2HttpMessageConverter converter;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configureMessageConverters</span><span class="hljs-params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;<br><span class="hljs-comment">//        MappingJackson2HttpMessageConverter converter = mappingJackson2HttpMessageConverter();</span><br>        converter.setSupportedMediaTypes(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;MediaType&gt;() &#123;&#123;<br>            add(MediaType.TEXT_HTML);<br>            add(MediaType.APPLICATION_JSON_UTF8);<br>        &#125;&#125;);<br>        converters.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringHttpMessageConverter</span>(StandardCharsets.UTF_8));<br>        converters.add(converter);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><hr><p><strong>2021-07-23 补充</strong></p><p>再次使用该方案实现某功能时，由于我忘了已经解决过双引号问题，于是我又想办法解决了一次，这次的方案更加简单，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> MappingJackson2HttpMessageConverter <span class="hljs-title function_">jackson2HttpMessageConverter</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>    <span class="hljs-type">SimpleModule</span> <span class="hljs-variable">module</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleModule</span>();<br>  <span class="hljs-comment">//    处理long类型，防止前台出现精度丢失问题</span><br>    <span class="hljs-keyword">module</span>.addSerializer(Long.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonSerializer</span>&lt;Long&gt;() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Long anEnum, JsonGenerator jsonGenerator, SerializerProvider serializerProvider)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>            jsonGenerator.writeString(String.valueOf(anEnum));<br>        &#125;<br>    &#125;);<br><br>    <span class="hljs-keyword">module</span>.addSerializer(String.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">JsonSerializer</span>&lt;String&gt;() &#123;<br>        <span class="hljs-comment">//用于处理返回一个String类型时，不加上双引号</span><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(String value, JsonGenerator gen, SerializerProvider serializers)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>            <span class="hljs-keyword">if</span> (gen.getOutputContext().getParent() == <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//单纯的序列化一个字符串，而非一个field对应的value</span><br>                gen.writeRaw(value);<br>            &#125; <span class="hljs-keyword">else</span><br>                gen.writeString(value);<br><br>        &#125;<br>    &#125;);<br>    objectMapper.registerModule(<span class="hljs-keyword">module</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MappingJackson2HttpMessageConverter</span>(objectMapper);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这次是对序列化工具<code>ObjectMapper</code>下手，该方案更加友好，而且<code>ObjectMapper</code>还可以用在别的地方，不单局限在类型转换上</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>具体实现可查阅<a href="https://github.com/inkroom/SpringBoot-study/commit/3eb6e25ecc905d8528c0d1efe11ccb818070727e">github</a></p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>SpringBoot</tag>
      
      <tag>跨域</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue纯数字input</title>
    <link href="/2020/05/13/1REFGMK.html"/>
    <url>/2020/05/13/1REFGMK.html</url>
    
    <content type="html"><![CDATA[<p>vue实现只能输入数字</p><span id="more"></span><p>最近项目中需要实现一个元和分的转换，要求存储使用分，显示使用元。意外发现了一个实现input 只能输入纯数字的方案</p><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs vue">computed: &#123;<br>   money: &#123;<br>     //pay-content组件金额以分为单位，当前组件以元为单位，因此需要转换<br>     get() &#123;<br>       //返回元为单位<br>       return this.payData.totalAmount / 100;<br>     &#125;,<br>     set(value) &#123;<br>       this.payData.totalAmount = parseFloat(value) * 100;<br>       console.log(<br>         `money set $&#123;value&#125; $&#123;parseFloat(value)&#125; this.total=$&#123;<br>           this.payData.totalAmount<br>         &#125;`<br>       );<br>       // if(value.endsWith(&#x27;.&#x27;))&#123;<br>       //   this.payData.totalAmount = parseFloat(value.substring()) * 100;<br>       // &#125;<br>     &#125;<br>   &#125;<br> &#125;,<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql事务冲突</title>
    <link href="/2020/05/13/14DPE6D.html"/>
    <url>/2020/05/13/14DPE6D.html</url>
    
    <content type="html"><![CDATA[<p>开启了事务的情况下mysql如何处理插入</p><span id="more"></span><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>有两个事务，流程为先查询后添加；关键字段有唯一约束</p><p>当事务A开始执行，添加了一条数据，但是尚未提交。</p><p>此时事务B进入，查询数据不存在，然后添加一条事务A添加的数据。</p><hr><p>那么问题是，如果事务A未提交，事务B提交，事务B是否会抛违背唯一约束，具体是在什么时候抛出来的。</p><h2 id="事实"><a href="#事实" class="headerlink" title="事实"></a>事实</h2><p>以下是项目中相关操作的时间：</p><blockquote><p>A事务开始时间  2020-04-29 14:05:03:881<br>第一次查询     2020-04-29 14:05:03.888<br>第一次用户添加 2020-04-29 14:05:03.986<br>B事务开始时间  2020-04-29 14:05:03.925<br>第二次查询     2020-04-29 14:05:03.928<br>第二次事务添加 2020-04-29 14:05:04.031<br>A事务结束时间  2020-04-29 14:05:05.616<br>异常时间       2020-04-29 14:05:05.620<br>B事务结束时间  2020-04-29 14:05:05.627</p></blockquote><p>期间两次查询结果均为空</p><hr><p>可以看出，两次事务的添加操作执行了类似串行化的逻辑，第二次添加应该是阻塞了，待事务A提交后，第二次添加就立刻抛出了异常。</p><p>为了验证以上推测，开启实验</p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>开启两个mysql 会话，模拟上述步骤。<br>| 事务A| 事务B|<br>| ————- | —————————————- |<br>| start transaction |   |<br>| select id from user where phone =’123’  |   |<br>| insert into user (id,phone) values (90,’123’) |   |<br>|  | start transaction |<br>|  | insert into user (id,phone) values (91,’123’) |<br>| commit |  |<br>| | uniqe key error |</p><p><img src="https://user-images.githubusercontent.com/27911304/80572909-a5ec9f80-8a31-11ea-9904-2cd2b2219e4b.gif" alt="transaction"></p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>在事务A中，通过<strong>insert</strong>语句，给phone=123这一行添加了行锁，事务B同样操作这一行，就会出现阻塞。事务A提交之后，锁就被释放，事务B就能获取到锁</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后端</tag>
      
      <tag>mysql</tag>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用位运算存储用户状态</title>
    <link href="/2020/03/19/2N47DH6.html"/>
    <url>/2020/03/19/2N47DH6.html</url>
    
    <content type="html"><![CDATA[<p>使用位运算来存储用户状态、权限；便于后期扩展</p><span id="more"></span><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>很多项目中都会存储用户状态，诸如用户类型、相关操作权限等等。</p><p>比较常用的方案有两种。</p><ul><li>使用一个int类型字段存储用户状态，不同的数字代表不同的状态</li><li>比较特殊的状态需要另外使用字段存储</li></ul><p>方案一的问题在于无法存储复合状态。例如某个用户既是普通用户又处于封禁状态，想要使用方案一存储则数字会相当的多，不利于开发记忆。</p><p>因此我使用<strong>位运算</strong>方案来存储状态</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>位运算的思路为利用一个int(或者long)的不同位来存储不同状态。</p><p>例如 状态数字 <strong>10</strong>，换算成二进制长这样：</p><blockquote><p>1010</p></blockquote><p>这样一看，一个数字 <strong>10</strong> 就有四个位，可以存储四个状态。</p><p>这个状态就可以这样解释：</p><blockquote><p>最低位的0代表这是一个普通用户<br>第二低的1代表用户未曾登录<br>第二高的0代表用户可以使用手机号登录<br>最高位的1代表用户要接收消息通知</p></blockquote><p>当然，每一位代表的意义在此并不重要。重要的是，每一个bit有两种状态：0和1，需要定义的是0代表enable还是1代表disable。这影响的是每一个bit的实际意义，也和接下来的方法定义有关。</p><hr><p>同时，为了后续扩展，在进行状态定义的时候，最好要从低位往高位定义，高位未定义时必定为0。当用户需要增加新状态时，将新状态定义为1，那么原本的用户的状态数据可以不作修改。</p><hr><p>存储效率：</p><blockquote><p>以int类型为例，int占4个字节，共有4x8=32位，意为可以同时存储<strong>32</strong>种不同的状态，在实际意义上则代表<strong>2^32</strong>种现实意义</p></blockquote><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>首先，<br>需要对要用到的位进行定义。</p><blockquote><p>在此使用枚举来进行定义；</p></blockquote><p>同时，<br>需要标明状态被定位在哪一个bit上</p><blockquote><p>这一点很容易实现，使用<strong>2</strong>的幂指数即可；比如2=2^1，代表定位到从低往高数第二位的位置上</p></blockquote><p>因此枚举定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">UserStatus</span> &#123;<br><br>    <span class="hljs-comment">//以下均为代表不可用状态</span><br><br>    USERNAME(<span class="hljs-number">1</span>),<span class="hljs-comment">//是否可以使用username字段登录</span><br>    MOBILE(<span class="hljs-number">2</span>),<span class="hljs-comment">//是否可以使用手机号登录</span><br>    SMSCODE(<span class="hljs-number">4</span>),<span class="hljs-comment">//是否可以通过短信验证码登录</span><br>    SIGN(<span class="hljs-number">8</span>),<span class="hljs-comment">//是否可签署合同</span><br>    SEND(<span class="hljs-number">16</span>),<span class="hljs-comment">//是否发送合同</span><br>    INIT_PASSWORD(<span class="hljs-number">32</span>),<span class="hljs-comment">//是否是初始密码,0代表是初始密码，一个用户刚注册或导入的情况下都是初始密码（默认密码）</span><br>    INIT_SIGN_PASSWORD(<span class="hljs-number">64</span>),<span class="hljs-comment">//是否是默认的签署密码，0代表是默认密码</span><br>    DIY_VERIFY(<span class="hljs-number">128</span>),<span class="hljs-comment">//是否是修改过的的身份认证信息</span><br>    RECEIVE_SMS(<span class="hljs-number">256</span>),<span class="hljs-comment">//接收短信通知</span><br>    RECEIVE_EMAIL(<span class="hljs-number">512</span>),<span class="hljs-comment">//接收邮件通知</span><br>    RECEIVE_WEB_NOTICE(<span class="hljs-number">1024</span>),<span class="hljs-comment">//接收站内通知</span><br>    ;<br><br>    <span class="hljs-type">int</span> code;<span class="hljs-comment">//需要指定的位数，应该都是2的幂指数，指定位上为1代表不允许</span><br>    <span class="hljs-type">boolean</span> userDiy;<span class="hljs-comment">//是否允许普通用户自己修改指定状态</span><br><br>    UserStatus(<span class="hljs-type">int</span> code) &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">code</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> code;<br>    &#125;<br><br><br>&#125;<br><br></code></pre></td></tr></table></figure><hr><p>接下来需要对于状态的一些操作函数。我一共定义了三种：<strong>is</strong>、<strong>enable</strong>、<strong>disable</strong>；</p><h4 id="is函数"><a href="#is函数" class="headerlink" title="is函数"></a>is函数</h4><p>首先是<strong>is</strong>函数：</p><p>方法申明如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">is</span><span class="hljs-params">(<span class="hljs-type">int</span> code, BitInfo status)</span>;<br></code></pre></td></tr></table></figure><p>其中：<strong>code</strong>代表存储了复合状态的状态数据，status代表某种定义的状态，我再次定义了一个BitInfo接口用于扩展，简单的理解成一个2的幂指数即可。</p><p>那么is函数的意义为：在code中的status对应位上是否为<strong>1</strong></p><p>我使用的是 对应位 为 <strong>1</strong>，实际上0或者1不影响方法定义，只会对使用上有影响</p><hr><p>接下来就是位运算的部分了</p><p>可以把这个函数实现分成两部分：一、取出指定位的数据；二、判断数字</p><p>还是拿 <strong>10</strong> 举例，在此我需要判断其从低往高数第二位是否为0<br>那么code传递的应该是10，status代表的幂指数应该是2</p><p><strong>10</strong>化为二进制如下</p><blockquote><p>1010</p></blockquote><p><strong>2</strong>化为二进制如下</p><blockquote><p>0010</p></blockquote><p>很明显可以看出，只需要将两个数字进行与(&amp;)运算，即可以拿出指定位；准确的说是将无关位置为0，指定位不变。</p><p>结果是：</p><blockquote><p>0010</p></blockquote><p>再与<strong>2</strong>做个比对即可。</p><hr><p>因此方法实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-title function_">is</span><span class="hljs-params">(<span class="hljs-type">int</span> code, BitInfo status)</span> &#123;<br>     <span class="hljs-comment">//和指定位进行与运算后，对应的结果为0，即为允许，status.code 为1,代表不允许</span><br>    <span class="hljs-keyword">return</span> (code &amp; status.code()) != status.code();<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="disable"><a href="#disable" class="headerlink" title="disable"></a>disable</h4><p>disable函数的意义是：将指定位置为1。</p><p>要求：</p><ul><li>随便一个状态数字在disable之后进行is返回false</li><li>对状态数字进行反复disable，结果都不能有变化(意思是不能简单的使用取反操作)</li></ul><p>方法申明如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-title function_">disable</span><span class="hljs-params">(<span class="hljs-type">int</span> code, BitInfo status)</span>;<br></code></pre></td></tr></table></figure><p>在此将<strong>10</strong>的最低位置为1</p><p>相关参数为</p><ul><li>code:10</li><li>status:1</li></ul><p>1的二进制如下</p><blockquote><p>0001</p></blockquote><p>很明显可以看出，只需要将两个数字进行 或(|)运算即可</p><hr><p>实现如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-type">int</span> <span class="hljs-title function_">disable</span><span class="hljs-params">(<span class="hljs-type">int</span> code, <span class="hljs-type">int</span> status)</span> &#123;<br>   <span class="hljs-comment">//将指定位数置为1 即不允许</span><br>   <span class="hljs-keyword">return</span> code | status;<br> &#125;<br>    <br></code></pre></td></tr></table></figure><h4 id="enable"><a href="#enable" class="headerlink" title="enable"></a>enable</h4><p>enable函数的意义是：将指定位置为0。</p><p>要求：</p><ul><li>随便一个状态数字在enable之后进行is返回true</li><li>对状态数字进行反复enable，结果都不能有变化(意思是不能简单的使用取反操作)</li></ul><p>方法申明如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-title function_">enable</span><span class="hljs-params">(<span class="hljs-type">int</span> code, BitInfo status)</span>;<br></code></pre></td></tr></table></figure><p>在此将<strong>10</strong>的最低位置为1</p><p>相关参数为</p><ul><li>code:10</li><li>status:1</li></ul><p>在disable函数中，已经将指定位置为1了，那么只需要把这个1再给变回来即可，且不能影响其他位</p><p>因此只需要将10和2先后进行<strong>或</strong>运算和<strong>异或</strong>运算即可</p><hr><p>方法实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-title function_">enable</span><span class="hljs-params">(<span class="hljs-type">int</span> code, BitInfo status)</span> &#123;<br><br>    <span class="hljs-comment">//将指定位数置为0 即允许</span><br>    <span class="hljs-comment">//将位和1 或，则指定位一定为1，再与status异或，指定位则为0</span><br><br>    <span class="hljs-keyword">return</span> (code | status.code()) ^ status.code();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>那么在使用上也很简单。</p><p>例如我要判断 状态 <strong>254</strong> 是否可以接收短信，只需要这样调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><br>BitInfo.is(<span class="hljs-number">254</span>,UserStatus.RECEIVE_SMS)<br><br></code></pre></td></tr></table></figure><p>返回true即代表可以接收短信</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>使用位运算存储状态有以下优点：</p><ul><li>节约空间</li><li>易于扩展</li><li>可以同时存储复合状态</li></ul><p>但是缺点也很明显：</p><ul><li>不够直观，必须通过程序才能看出具体状态含义</li><li>逻辑复杂，过于专注底层位运算可能会搞混，但是只关注抽象层就好得多</li></ul><hr><p>上述代码中还是有一定问题的。例如同时enable多个状态，调用上就比较复杂，会出现很多括号；这可以通过链式调用来解决，我在此就不作修改了。</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>后端</tag>
      
      <tag>位运算</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>左右两栏各自滚动</title>
    <link href="/2020/03/16/29NXD3S.html"/>
    <url>/2020/03/16/29NXD3S.html</url>
    
    <content type="html"><![CDATA[<p>圣杯布局？</p><span id="more"></span><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>项目中需要在一个div中使用一个左右两栏布局，且左右各拥有纵向滚动条。</p><p>首先，父div占页面的下部分80%左右高度，撑满全部视图且自适应。</p><p>其次，在这个div里分左右布局，且不能出现全局滚动条</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><p>父div设置relative，两个子div absolute，且top、bottom、left、right全部为0</p><h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><p>方案一的缺点在于js无法获取子div的坐标。因此方案如下</p><p>父div保持方案一不变。子div设置如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-attribute">height</span>:<span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">min-height</span>:<span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">max-height</span>:<span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">overflow-y</span>:scroll;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>其中高度具体数字不重要。其中原理不明</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>json反序列化问题</title>
    <link href="/2020/03/12/2WMCQ45.html"/>
    <url>/2020/03/12/2WMCQ45.html</url>
    
    <content type="html"><![CDATA[<p>使用fastjson反序列化数据不全；没想到设计上居然不报错</p><span id="more"></span><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p> fastjson 在反序列化一段json数据是总会丢失某个属性。</p><h2 id="json数据"><a href="#json数据" class="headerlink" title="json数据"></a>json数据</h2> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json"> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;time&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;contract&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;1212&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;notifyUrl&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;http://localhost:20001&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;userId&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;1976220424287027200&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="java"><a href="#java" class="headerlink" title="java"></a>java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NotifyMqMsg</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Contract contract;<br><br>    <span class="hljs-comment">// 这是第几次通知，从0开始</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> time;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">NotifyMqMsg</span><span class="hljs-params">(Contract contract)</span> &#123;<br>        <span class="hljs-built_in">this</span>.contract = contract;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Contract <span class="hljs-title function_">getContract</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> contract;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setContract</span><span class="hljs-params">(Contract contract)</span> &#123;<br>        <span class="hljs-built_in">this</span>.contract = contract;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getTime</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> time;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTime</span><span class="hljs-params">(<span class="hljs-type">int</span> time)</span> &#123;<br>        <span class="hljs-built_in">this</span>.time = time;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> JSON.toJSONString(<span class="hljs-built_in">this</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>每次反序列化的时候 <strong>time</strong> 属性始终为0.</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>问题原因是 <code>NotifyMqMsg</code> 构造方法有问题，没有默认构造方法。但是fastjson居然不报错，jackson就会报错。大概是采用的方案不同</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>后端</tag>
      
      <tag>json</tag>
      
      <tag>序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringCache的事务管理与单元测试</title>
    <link href="/2020/03/08/1B59D5C.html"/>
    <url>/2020/03/08/1B59D5C.html</url>
    
    <content type="html"><![CDATA[<p>在某个项目中，使用了SpringCache redis作为缓存解决方案，jpa作为orm</p><p>在单元测试时，在执行某步操作时，需要往缓存中放入数据，之后启用断言判断对应的缓存是否存在，结果全部报缓存不存在</p><span id="more"></span><h2 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h2><p>在某个项目中，使用了SpringCache redis作为缓存解决方案，jpa作为orm</p><p>在单元测试时，在执行某步操作时，需要往缓存中放入数据，之后启用断言判断对应的缓存是否存在，结果全部报缓存不存在</p><h2 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h2><h3 id="springCache"><a href="#springCache" class="headerlink" title="springCache"></a>springCache</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br>   <span class="hljs-keyword">public</span> CacheManager <span class="hljs-title function_">cacheManager</span><span class="hljs-params">(RedisConnectionFactory factory, RedisSerializer serializer)</span> &#123;<br>       log.info(<span class="hljs-string">&quot;[缓存配置] - 注入缓存管理器&quot;</span>);<br>       <span class="hljs-keyword">return</span> RedisCacheManager.builder(factory)<br>               <span class="hljs-comment">//默认缓存时间</span><br>               .cacheDefaults(<br>                       getRedisCacheConfigurationWithTtl(<span class="hljs-number">300</span>)<br>                               .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>()))<br>                               .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(serializer))<br>               )<br><br>               .transactionAware()<span class="hljs-comment">//注意，这里是开启了redis 事务</span><br>               <span class="hljs-comment">//自定义缓存时间</span><br>               .withInitialCacheConfigurations(getRedisCacheConfigurationMap())<br>               .build();<br>   &#125;<br><br></code></pre></td></tr></table></figure><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="hljs-meta">@Transactional</span> <span class="hljs-comment">//这里和下一行代表测试用例结束后自动回滚</span><br><span class="hljs-meta">@Rollback</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BasicMockControllerTest</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="缓存调用"><a href="#缓存调用" class="headerlink" title="缓存调用"></a>缓存调用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@CachePut(key = &quot;#result.id&quot;)</span><br> <span class="hljs-meta">@Override</span><br> <span class="hljs-keyword">public</span> User <span class="hljs-title function_">update</span><span class="hljs-params">(User user)</span> &#123;<br>     user = userRepository.save(user);<br>     <span class="hljs-keyword">return</span> user;<br> &#125;<br></code></pre></td></tr></table></figure><h2 id="相关源码"><a href="#相关源码" class="headerlink" title="相关源码"></a>相关源码</h2><h3 id="springCache事务管理逻辑"><a href="#springCache事务管理逻辑" class="headerlink" title="springCache事务管理逻辑"></a>springCache事务管理逻辑</h3><p>在<code>org.springframework.cache.transaction.AbstractTransactionSupportingCacheManager#decorateCache</code> 中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isTransactionAware</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.transactionAware;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> Cache <span class="hljs-title function_">decorateCache</span><span class="hljs-params">(Cache cache)</span> &#123;<br><span class="hljs-keyword">return</span> (isTransactionAware() ? <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransactionAwareCacheDecorator</span>(cache) : cache);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>其中<code>this.transactionAware</code>来自 之前配置的 <code>transactionAware()</code>方法，对应值为true</p><p>因此，这里会创建一个有事务管理的Cache实现</p><hr><p>在<code>TransactionAwareCacheDecorator</code>中，核心方法 put 中，会根据配置了事务决定逻辑</p><p>代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Object key, <span class="hljs-meta">@Nullable</span> <span class="hljs-keyword">final</span> Object value)</span> &#123;<br><span class="hljs-keyword">if</span> (TransactionSynchronizationManager.isSynchronizationActive()) &#123;<br>TransactionSynchronizationManager.registerSynchronization(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TransactionSynchronizationAdapter</span>() &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCommit</span><span class="hljs-params">()</span> &#123;<br>TransactionAwareCacheDecorator.<span class="hljs-built_in">this</span>.targetCache.put(key, value);<br>&#125;<br>&#125;);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">this</span>.targetCache.put(key, value);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="事务何时提交"><a href="#事务何时提交" class="headerlink" title="事务何时提交"></a>事务何时提交</h3><p>根据测试，redis事务提交时机同jdbc事务；即jdbc事务结束，提交时，redis也一起提交，相反则一起回滚</p><p>在Spring中，redis事务总是和jdbc事务相关联。</p><p>而我在单元测试中，配置了事务回滚，因此在写缓存断言的时候，事务尚未结束，redis 还不能决定提交还是回滚，此时缓存中肯定没有数据。当测试用例结束后，事务自动回滚，redis也回滚，所以手动去redis查看时，也没有数据</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>后端</tag>
      
      <tag>事务</tag>
      
      <tag>cache</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot配置文件优先级</title>
    <link href="/2019/11/04/1CXKHHK.html"/>
    <url>/2019/11/04/1CXKHHK.html</url>
    
    <content type="html"><![CDATA[<p>记录SpringBoot的配置优先级</p><span id="more"></span><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>项目场景为：SpringBoot本身jar中附带有application.properties配置文件，现在需要将部分配置项放到jar外面</p><h3 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h3><p>查阅资料得知SpringBoot加载配置文件顺序如下:</p><ul><li>当前目录下的/config目录</li><li>当前目录</li><li>classpath里的/config目录</li><li>classpath 根目录</li></ul><p>因此，将jpa相关配置存放在jar中，将eureka配置外置</p><p>实验发现：</p><p><strong>server.port</strong>配置项在两个地方都有时，优先使用外置</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://www.cnblogs.com/xiaoqi/p/6955288.html">https://www.cnblogs.com/xiaoqi/p/6955288.html</a></p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>后端</tag>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实现swagger2不显示类名</title>
    <link href="/2019/11/01/2EEH37B.html"/>
    <url>/2019/11/01/2EEH37B.html</url>
    
    <content type="html"><![CDATA[<p>对swagger2进行扩展，实现自定义需求</p><span id="more"></span><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><p>在使用swagger2 2.9.2时</p><p>在UI上接口旁边会显示类名，我需要把这个去掉<br><img src="https://i.loli.net/2019/11/01/ytJOdM9PQqFwoD7.png" alt=""></p><hr><p>经debug之后，发现这个字段是通过<code>springfox.documentation.spring.web.scanners.ApiListingReader</code>显示的</p><p>而这个类是被自动注入到<code>springfox.documentation.spring.web.plugins.DocumentationPluginsManager</code>中的</p><p>因此，只需要自己实现一个<code>ApiListingReader</code>注入到spring容器就可以了</p><hr><h4 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h4><p><img src="https://i.loli.net/2019/11/01/2Xc83BoGxCaKmys.png" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>后端</tag>
      
      <tag>文档</tag>
      
      <tag>swagger</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sm2签章</title>
    <link href="/2019/10/19/9ED8ZM.html"/>
    <url>/2019/10/19/9ED8ZM.html</url>
    
    <content type="html"><![CDATA[<p>使用itext7 实现对pdf文件的<strong>sm2</strong>签章和验证</p><span id="more"></span><p>####　流程</p><p>－首先获取签名dir，再往里面填一些自定义的数据，其中很重要的是签名的公钥</p><ul><li>使用sm3对数据进行hash，sm2做签名后填充到预先位置，在此需要特别注意生成的签名的大小</li><li>验证时通过byteRange获取实际被签章的的内容，做hash运算</li><li>获取签名值，与上述的hash和获取的公钥进行验证操作</li></ul><h4 id="签名"><a href="#签名" class="headerlink" title="签名"></a>签名</h4><h2 id="核心结构IExternalSignatureContainer"><a href="#核心结构IExternalSignatureContainer" class="headerlink" title="核心结构IExternalSignatureContainer"></a>核心结构<code>IExternalSignatureContainer</code></h2><p>其中<code>modifySigningDictionary</code>方法用于存储自定的数据，itext要求必须设置<code>PdfName#Filter</code>、<code>PdfName#SubFilter</code>,</p><p>一般如下填充即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">modifySigningDictionary</span><span class="hljs-params">(PdfDictionary signDic)</span> &#123;<br><br>   signDic.put(PdfName.Filter, PdfName.Adobe_PPKLite);<br><br>   signDic.put(PdfName.SubFilter, PdfName.Adbe_pkcs7_detached);<br>&#125;<br></code></pre></td></tr></table></figure><p>其他自定义数据也可以放进去</p><hr><p><code>sign</code> 方法实际签章，参数是要签名的数据；返回签名字节，在这里面进行hash，签名操作</p><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p><strong>获取要签名的内容</strong></p><p>具体内容在PdfName.ByteRange中，该数据格式为[0 330387 346781 229585 ],<br>实际保密的内容是0-330387和346781-229585，中间的部分为签名数据，可以不用理会。</p><p>特别注意长度，如果签名不够是会进行<strong>补0</strong>的，所以长度可能会超过实际签名出来的长度</p><hr><p><strong>获取签名</strong><br>签名内容在PdfName.Content中，直接获取即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">PdfReader</span> <span class="hljs-variable">pdfReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PdfReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(FileUtils.read(<span class="hljs-string">&quot;new.pdf&quot;</span>)));<br><span class="hljs-type">PdfDocument</span> <span class="hljs-variable">pdfDocument</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PdfDocument</span>(pdfReader);<br><span class="hljs-type">SignatureUtil</span> <span class="hljs-variable">signatureUtil</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SignatureUtil</span>(pdfDocument);<br>List&lt;String&gt; signedNames = signatureUtil.getSignatureNames();<br><span class="hljs-type">byte</span>[] pdfData = IOUtils.toByteArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;&quot;</span>));<br><span class="hljs-type">PdfDictionary</span> <span class="hljs-variable">signatureDictionary</span> <span class="hljs-operator">=</span> signatureUtil.getSignatureDictionary(signedNames.get(<span class="hljs-number">0</span>));<br><span class="hljs-type">byte</span>[] content = signatureDictionary.getAsString(PdfName.Contents).getValueBytes();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>加密</tag>
      
      <tag>pdf</tag>
      
      <tag>签名</tag>
      
      <tag>sm2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>aop切面类</title>
    <link href="/2019/10/17/2SFDH34.html"/>
    <url>/2019/10/17/2SFDH34.html</url>
    
    <content type="html"><![CDATA[<p>记录一下较为常用的aop切面</p><span id="more"></span><ul><li>org.aopalliance.intercept.MethodInterceptor 环绕切面</li></ul><h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><p>.. ：匹配方法定义中的任意数量的参数，此外还匹配类定义中的任意数量包</p><p>＋ ：匹配给定类的任意子类</p><p>＊ ：匹配任意数量的字符</p><p>为了方便类型（如接口、类名、包名）过滤方法，Spring AOP 提供了within关键字。其语法格式如下：</p><p>within(<type name>)</p><p>//匹配com.zejian.dao包及其子包中所有类中的所有方法<br>@Pointcut(“within(com.zejian.dao..*)”)</p><p>//匹配UserDaoImpl类中所有方法<br>@Pointcut(“within(com.zejian.dao.UserDaoImpl)”)</p><p>//匹配UserDaoImpl类及其子类中所有方法<br>@Pointcut(“within(com.zejian.dao.UserDaoImpl+)”)</p><p>//匹配所有实现UserDao接口的类的所有方法<br>@Pointcut(“within(com.zejian.dao.UserDao+)”)</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot实现分布式session</title>
    <link href="/2019/10/12/3HEJMC.html"/>
    <url>/2019/10/12/3HEJMC.html</url>
    
    <content type="html"><![CDATA[<p>基于SpringBoot对session存储方案进行扩展，适用于分布式环境</p><span id="more"></span><h2 id="实现分布式session"><a href="#实现分布式session" class="headerlink" title="实现分布式session"></a>实现分布式session</h2><blockquote><p>实现基于redis的分布式session</p></blockquote><hr><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>基于HttpRequestWapper，对request获取的Session实现类进行替换，即提供一个从redis获取数据的Session实现类</p><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><p>引入<strong>spring-boot-starter-data-redis</strong>、<strong>spring-session-data-redis</strong>；<br>引入<code>kryo</code>作为序列化方案</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.session<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-session-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br> <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.esotericsoftware<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>kryo<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>de.javakaffee<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>kryo-serializers<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.41<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><br><span class="hljs-attr">spring.redis.host</span>=<span class="hljs-string">127.0.0.1</span><br><span class="hljs-attr">spring.redis.database</span>=<span class="hljs-string">2</span><br><br></code></pre></td></tr></table></figure><p>ps: 如果有需要还可以修改对应的连接池配置，或者更换默认的<code>lettuce</code>框架</p><h3 id="编写序列化类"><a href="#编写序列化类" class="headerlink" title="编写序列化类"></a>编写序列化类</h3><p>该类用于数据的序列化和反序列化，本样例基于<code>kryo</code>实现，该框架具有体积小、速度快等优势。</p><p>此步骤可以省略，不提供具体实现Spring默认使用Jdk序列化方案</p><hr><p>序列化需要实现<code>org.springframework.data.redis.serializer.RedisSerializer</code>类</p><p>该类可以用于不同的存储方案</p><p>demo如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">KryoRedisSerializer</span>&lt;T&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">RedisSerializer</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(KryoRedisSerializer.class);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">byte</span>[] EMPTY_BYTE_ARRAY = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">0</span>];<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ThreadLocal&lt;Kryo&gt; kryos = ThreadLocal.withInitial(Kryo::<span class="hljs-keyword">new</span>);<br><br>    <span class="hljs-keyword">private</span> Class&lt;T&gt; clazz;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">KryoRedisSerializer</span><span class="hljs-params">(Class&lt;T&gt; clazz)</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>        <span class="hljs-built_in">this</span>.clazz = clazz;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">byte</span>[] serialize(T t) <span class="hljs-keyword">throws</span> SerializationException &#123;<br>        <span class="hljs-keyword">if</span> (t == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> EMPTY_BYTE_ARRAY;<br>        &#125;<br><br>        logger.debug(<span class="hljs-string">&quot;序列化&#123;&#125;，&#123;&#125;&quot;</span>, t.getClass(), t);<br><br>        <span class="hljs-type">Kryo</span> <span class="hljs-variable">kryo</span> <span class="hljs-operator">=</span> kryos.get();<br>        kryo.setRegistrationRequired(<span class="hljs-literal">false</span>);<span class="hljs-comment">//关闭注册行为，避免相同类无法强转</span><br>        kryo.setReferences(<span class="hljs-literal">false</span>);<br><span class="hljs-comment">//        kryo.register(clazz);</span><br><br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>             <span class="hljs-type">Output</span> <span class="hljs-variable">output</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Output</span>(baos)) &#123;<br>            kryo.writeClassAndObject(output, t);<br>            output.flush();<br>            <span class="hljs-keyword">return</span> baos.toByteArray();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            logger.error(e.getMessage(), e);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> EMPTY_BYTE_ARRAY;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">deserialize</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] bytes)</span> <span class="hljs-keyword">throws</span> SerializationException &#123;<br>        <span class="hljs-keyword">if</span> (bytes == <span class="hljs-literal">null</span> || bytes.length &lt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-type">Kryo</span> <span class="hljs-variable">kryo</span> <span class="hljs-operator">=</span> kryos.get();<br>        kryo.setReferences(<span class="hljs-literal">false</span>);<br>        kryo.setRegistrationRequired(<span class="hljs-literal">false</span>);<br><span class="hljs-comment">//        kryo.register(clazz);</span><br><br>        logger.debug(<span class="hljs-string">&quot;反序列化&quot;</span>);<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">Input</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Input</span>(bytes)) &#123;<br>            <span class="hljs-keyword">return</span> (T) kryo.readClassAndObject(input);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            logger.error(e.getMessage(), e);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>ps: 需要注意的是，虽然该类提供了一个泛型对象，但是实际运用中并没有什么用；在反序列化时并不能知道应该返回一个什么类型的对象；因此多数序列化框架都是采取的在序列化结果中存储该对象的实际类型；</strong></p><p>再ps：由于<code>kryo</code>序列化后为二进制，因此对于List、Map等可能带有泛型，且存储对象并非同一个子类的情况还需要进行测试</p><h3 id="注入Spring容器"><a href="#注入Spring容器" class="headerlink" title="注入Spring容器"></a>注入Spring容器</h3><p>Spring Session通过<code>org.springframework.session.data.redis.RedisOperationsSessionRepository</code> 实现Session的替换，以及数据的序列化</p><p>仔细查看该类可知，该类有两个较为重要的属性</p><ul><li><code>RedisSerializer&lt;Object&gt; defaultSerializer</code></li><li><code>RedisOperations&lt;Object, Object&gt; sessionRedisOperations</code></li></ul><hr><p>defaultSerializer初始化为<code>JdkSerializationRedisSerializer</code></p><p>用于<code>onMessage</code>方法，该方法可能为Redis值过期事件响应，负责对传递过来的数据做session删除和过期操作</p><p>不太明白为什么不从<code>sessionRedisOperations</code>中获取序列化实例，这点有待研究</p><hr><p>sessionRedisOperations在构造方法中传入</p><p>由于Spring Bean注入顺序的原因，该值为Spring redis starter自动创建的<code>RedisTemplate</code>实例，该实例中使用了Jdk序列化方案，需要修改，但是暂时没找到办法注入自己创建的实例</p><p>故采取折中方案，即获取<code>RedisOperationsSessionRepository</code>实例，手动修改里面的<code>RedisTemplate</code>里的·<code>RedisSerializer</code></p><hr><p>最终配置类如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableRedisHttpSession</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisSessionConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="hljs-title function_">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory redisConnectionFactory, RedisOperationsSessionRepository repository)</span> &#123;<br>        RedisTemplate&lt;Object, Object&gt; template = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisTemplate</span>&lt;&gt;();<br>        template.setConnectionFactory(redisConnectionFactory);<br><br>        RedisSerializer&lt;Object&gt; serializer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">KryoRedisSerializer</span>&lt;&gt;(Object.class);<br>        <span class="hljs-comment">// redis value使用的序列化器</span><br>        template.setValueSerializer(serializer);<br>        <span class="hljs-comment">// redis key使用的序列化器</span><br>        template.setKeySerializer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>());<br><br>        repository.setDefaultSerializer(serializer);<br>        <span class="hljs-comment">//由于RedisOperationsSessionRepository 要先构造，且不提供方法修改属性，只能采取这种这种的方法</span><br>        RedisOperations&lt;Object, Object&gt; sessionRedisOperations = repository.getSessionRedisOperations();<br>        <span class="hljs-keyword">if</span> (sessionRedisOperations <span class="hljs-keyword">instanceof</span>  RedisTemplate)&#123;<br>            RedisTemplate&lt;Object,Object&gt; redisTemplate = ((RedisTemplate&lt;Object, Object&gt;) sessionRedisOperations);<br>            redisTemplate.setValueSerializer(serializer);<br>            redisTemplate.setHashValueSerializer(serializer);<br>        &#125;<br><br>        template.afterPropertiesSet();<br>        <span class="hljs-keyword">return</span> template;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>ps： 更多配置信息亦可通过<code>RedisOperationsSessionRepository</code>修改，如session有效实现，cookie name值等等</p><h3 id="todo"><a href="#todo" class="headerlink" title="todo"></a>todo</h3><ul><li>寻找更合适的注入<code>Serializer</code>方式</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>具体实现可查阅<a href="https://github.com/inkroom/SpringBoot-study/commit/5dafbfe8e24ecb9df001b9ae3554a5c5d216d477">github</a></p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>后端</tag>
      
      <tag>分布式</tag>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mybatis-plus缓存配置</title>
    <link href="/2019/10/12/29N9S98.html"/>
    <url>/2019/10/12/29N9S98.html</url>
    
    <content type="html"><![CDATA[<p>关闭mybatis的缓存</p><span id="more"></span><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>在单元测试中使用mybatis-plus查询一条数据</p><p>再用jdbcTemplate修改数据</p><p>再用mybatis-plus查询数据，发现数据未修改</p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>这是由于mybatis的一级缓存在起作用。前后两次查询之间没有使用mybatis的修改数据，缓存未被清除</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><ul><li><p>使用mybatis做修改操作</p></li><li><p>配置mybatis-plus.configuration.local-cache-scope=statement</p><blockquote><p>mybatis-plus.configuration.cache-enabled=false无效</p></blockquote></li></ul><h3 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h3><ul><li>mybatis和其他orm搭配使用可能会出问题</li><li>分布式条件下，如果一条修改sql被一台机器执行，而另一台机器全部执行查找，会出现不一致问题</li></ul>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>后端</tag>
      
      <tag>mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
